/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by 'package:ffigen'
///
/// Generated from godot_headers https://github.com/godotengine/godot_headers

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for SQLite
class Godot {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  Godot(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void godot_color_new_rgba(
    ffi.Pointer<godot_color> r_dest,
    double p_r,
    double p_g,
    double p_b,
    double p_a,
  ) {
    return (_godot_color_new_rgba ??= _dylib.lookupFunction<
        _c_godot_color_new_rgba,
        _dart_godot_color_new_rgba>('godot_color_new_rgba'))(
      r_dest,
      p_r,
      p_g,
      p_b,
      p_a,
    );
  }

  _dart_godot_color_new_rgba? _godot_color_new_rgba;

  void godot_color_new_rgb(
    ffi.Pointer<godot_color> r_dest,
    double p_r,
    double p_g,
    double p_b,
  ) {
    return (_godot_color_new_rgb ??= _dylib.lookupFunction<
        _c_godot_color_new_rgb,
        _dart_godot_color_new_rgb>('godot_color_new_rgb'))(
      r_dest,
      p_r,
      p_g,
      p_b,
    );
  }

  _dart_godot_color_new_rgb? _godot_color_new_rgb;

  double godot_color_get_r(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_r ??=
        _dylib.lookupFunction<_c_godot_color_get_r, _dart_godot_color_get_r>(
            'godot_color_get_r'))(
      p_self,
    );
  }

  _dart_godot_color_get_r? _godot_color_get_r;

  void godot_color_set_r(
    ffi.Pointer<godot_color> p_self,
    double r,
  ) {
    return (_godot_color_set_r ??=
        _dylib.lookupFunction<_c_godot_color_set_r, _dart_godot_color_set_r>(
            'godot_color_set_r'))(
      p_self,
      r,
    );
  }

  _dart_godot_color_set_r? _godot_color_set_r;

  double godot_color_get_g(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_g ??=
        _dylib.lookupFunction<_c_godot_color_get_g, _dart_godot_color_get_g>(
            'godot_color_get_g'))(
      p_self,
    );
  }

  _dart_godot_color_get_g? _godot_color_get_g;

  void godot_color_set_g(
    ffi.Pointer<godot_color> p_self,
    double g,
  ) {
    return (_godot_color_set_g ??=
        _dylib.lookupFunction<_c_godot_color_set_g, _dart_godot_color_set_g>(
            'godot_color_set_g'))(
      p_self,
      g,
    );
  }

  _dart_godot_color_set_g? _godot_color_set_g;

  double godot_color_get_b(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_b ??=
        _dylib.lookupFunction<_c_godot_color_get_b, _dart_godot_color_get_b>(
            'godot_color_get_b'))(
      p_self,
    );
  }

  _dart_godot_color_get_b? _godot_color_get_b;

  void godot_color_set_b(
    ffi.Pointer<godot_color> p_self,
    double b,
  ) {
    return (_godot_color_set_b ??=
        _dylib.lookupFunction<_c_godot_color_set_b, _dart_godot_color_set_b>(
            'godot_color_set_b'))(
      p_self,
      b,
    );
  }

  _dart_godot_color_set_b? _godot_color_set_b;

  double godot_color_get_a(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_a ??=
        _dylib.lookupFunction<_c_godot_color_get_a, _dart_godot_color_get_a>(
            'godot_color_get_a'))(
      p_self,
    );
  }

  _dart_godot_color_get_a? _godot_color_get_a;

  void godot_color_set_a(
    ffi.Pointer<godot_color> p_self,
    double a,
  ) {
    return (_godot_color_set_a ??=
        _dylib.lookupFunction<_c_godot_color_set_a, _dart_godot_color_set_a>(
            'godot_color_set_a'))(
      p_self,
      a,
    );
  }

  _dart_godot_color_set_a? _godot_color_set_a;

  double godot_color_get_h(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_h ??=
        _dylib.lookupFunction<_c_godot_color_get_h, _dart_godot_color_get_h>(
            'godot_color_get_h'))(
      p_self,
    );
  }

  _dart_godot_color_get_h? _godot_color_get_h;

  double godot_color_get_s(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_s ??=
        _dylib.lookupFunction<_c_godot_color_get_s, _dart_godot_color_get_s>(
            'godot_color_get_s'))(
      p_self,
    );
  }

  _dart_godot_color_get_s? _godot_color_get_s;

  double godot_color_get_v(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_get_v ??=
        _dylib.lookupFunction<_c_godot_color_get_v, _dart_godot_color_get_v>(
            'godot_color_get_v'))(
      p_self,
    );
  }

  _dart_godot_color_get_v? _godot_color_get_v;

  godot_string godot_color_as_string(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_as_string ??= _dylib.lookupFunction<
        _c_godot_color_as_string,
        _dart_godot_color_as_string>('godot_color_as_string'))(
      p_self,
    );
  }

  _dart_godot_color_as_string? _godot_color_as_string;

  int godot_color_to_rgba32(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_rgba32 ??= _dylib.lookupFunction<
        _c_godot_color_to_rgba32,
        _dart_godot_color_to_rgba32>('godot_color_to_rgba32'))(
      p_self,
    );
  }

  _dart_godot_color_to_rgba32? _godot_color_to_rgba32;

  int godot_color_to_abgr32(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_abgr32 ??= _dylib.lookupFunction<
        _c_godot_color_to_abgr32,
        _dart_godot_color_to_abgr32>('godot_color_to_abgr32'))(
      p_self,
    );
  }

  _dart_godot_color_to_abgr32? _godot_color_to_abgr32;

  int godot_color_to_abgr64(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_abgr64 ??= _dylib.lookupFunction<
        _c_godot_color_to_abgr64,
        _dart_godot_color_to_abgr64>('godot_color_to_abgr64'))(
      p_self,
    );
  }

  _dart_godot_color_to_abgr64? _godot_color_to_abgr64;

  int godot_color_to_argb64(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_argb64 ??= _dylib.lookupFunction<
        _c_godot_color_to_argb64,
        _dart_godot_color_to_argb64>('godot_color_to_argb64'))(
      p_self,
    );
  }

  _dart_godot_color_to_argb64? _godot_color_to_argb64;

  int godot_color_to_rgba64(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_rgba64 ??= _dylib.lookupFunction<
        _c_godot_color_to_rgba64,
        _dart_godot_color_to_rgba64>('godot_color_to_rgba64'))(
      p_self,
    );
  }

  _dart_godot_color_to_rgba64? _godot_color_to_rgba64;

  int godot_color_to_argb32(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_to_argb32 ??= _dylib.lookupFunction<
        _c_godot_color_to_argb32,
        _dart_godot_color_to_argb32>('godot_color_to_argb32'))(
      p_self,
    );
  }

  _dart_godot_color_to_argb32? _godot_color_to_argb32;

  double godot_color_gray(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_gray ??=
        _dylib.lookupFunction<_c_godot_color_gray, _dart_godot_color_gray>(
            'godot_color_gray'))(
      p_self,
    );
  }

  _dart_godot_color_gray? _godot_color_gray;

  godot_color godot_color_inverted(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_inverted ??= _dylib.lookupFunction<
        _c_godot_color_inverted,
        _dart_godot_color_inverted>('godot_color_inverted'))(
      p_self,
    );
  }

  _dart_godot_color_inverted? _godot_color_inverted;

  godot_color godot_color_contrasted(
    ffi.Pointer<godot_color> p_self,
  ) {
    return (_godot_color_contrasted ??= _dylib.lookupFunction<
        _c_godot_color_contrasted,
        _dart_godot_color_contrasted>('godot_color_contrasted'))(
      p_self,
    );
  }

  _dart_godot_color_contrasted? _godot_color_contrasted;

  godot_color godot_color_linear_interpolate(
    ffi.Pointer<godot_color> p_self,
    ffi.Pointer<godot_color> p_b,
    double p_t,
  ) {
    return (_godot_color_linear_interpolate ??= _dylib.lookupFunction<
            _c_godot_color_linear_interpolate,
            _dart_godot_color_linear_interpolate>(
        'godot_color_linear_interpolate'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_color_linear_interpolate? _godot_color_linear_interpolate;

  godot_color godot_color_blend(
    ffi.Pointer<godot_color> p_self,
    ffi.Pointer<godot_color> p_over,
  ) {
    return (_godot_color_blend ??=
        _dylib.lookupFunction<_c_godot_color_blend, _dart_godot_color_blend>(
            'godot_color_blend'))(
      p_self,
      p_over,
    );
  }

  _dart_godot_color_blend? _godot_color_blend;

  godot_color godot_color_darkened(
    ffi.Pointer<godot_color> p_self,
    double p_amount,
  ) {
    return (_godot_color_darkened ??= _dylib.lookupFunction<
        _c_godot_color_darkened,
        _dart_godot_color_darkened>('godot_color_darkened'))(
      p_self,
      p_amount,
    );
  }

  _dart_godot_color_darkened? _godot_color_darkened;

  godot_color godot_color_from_hsv(
    ffi.Pointer<godot_color> p_self,
    double p_h,
    double p_s,
    double p_v,
    double p_a,
  ) {
    return (_godot_color_from_hsv ??= _dylib.lookupFunction<
        _c_godot_color_from_hsv,
        _dart_godot_color_from_hsv>('godot_color_from_hsv'))(
      p_self,
      p_h,
      p_s,
      p_v,
      p_a,
    );
  }

  _dart_godot_color_from_hsv? _godot_color_from_hsv;

  godot_color godot_color_lightened(
    ffi.Pointer<godot_color> p_self,
    double p_amount,
  ) {
    return (_godot_color_lightened ??= _dylib.lookupFunction<
        _c_godot_color_lightened,
        _dart_godot_color_lightened>('godot_color_lightened'))(
      p_self,
      p_amount,
    );
  }

  _dart_godot_color_lightened? _godot_color_lightened;

  godot_string godot_color_to_html(
    ffi.Pointer<godot_color> p_self,
    bool p_with_alpha,
  ) {
    return (_godot_color_to_html ??= _dylib.lookupFunction<
        _c_godot_color_to_html,
        _dart_godot_color_to_html>('godot_color_to_html'))(
      p_self,
      p_with_alpha ? 1 : 0,
    );
  }

  _dart_godot_color_to_html? _godot_color_to_html;

  bool godot_color_operator_equal(
    ffi.Pointer<godot_color> p_self,
    ffi.Pointer<godot_color> p_b,
  ) {
    return (_godot_color_operator_equal ??= _dylib.lookupFunction<
            _c_godot_color_operator_equal,
            _dart_godot_color_operator_equal>('godot_color_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_color_operator_equal? _godot_color_operator_equal;

  bool godot_color_operator_less(
    ffi.Pointer<godot_color> p_self,
    ffi.Pointer<godot_color> p_b,
  ) {
    return (_godot_color_operator_less ??= _dylib.lookupFunction<
            _c_godot_color_operator_less,
            _dart_godot_color_operator_less>('godot_color_operator_less'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_color_operator_less? _godot_color_operator_less;

  void godot_vector2_new(
    ffi.Pointer<godot_vector2> r_dest,
    double p_x,
    double p_y,
  ) {
    return (_godot_vector2_new ??=
        _dylib.lookupFunction<_c_godot_vector2_new, _dart_godot_vector2_new>(
            'godot_vector2_new'))(
      r_dest,
      p_x,
      p_y,
    );
  }

  _dart_godot_vector2_new? _godot_vector2_new;

  godot_string godot_vector2_as_string(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_as_string ??= _dylib.lookupFunction<
        _c_godot_vector2_as_string,
        _dart_godot_vector2_as_string>('godot_vector2_as_string'))(
      p_self,
    );
  }

  _dart_godot_vector2_as_string? _godot_vector2_as_string;

  godot_vector2 godot_vector2_normalized(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_normalized ??= _dylib.lookupFunction<
        _c_godot_vector2_normalized,
        _dart_godot_vector2_normalized>('godot_vector2_normalized'))(
      p_self,
    );
  }

  _dart_godot_vector2_normalized? _godot_vector2_normalized;

  double godot_vector2_length(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_length ??= _dylib.lookupFunction<
        _c_godot_vector2_length,
        _dart_godot_vector2_length>('godot_vector2_length'))(
      p_self,
    );
  }

  _dart_godot_vector2_length? _godot_vector2_length;

  double godot_vector2_angle(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_angle ??= _dylib.lookupFunction<
        _c_godot_vector2_angle,
        _dart_godot_vector2_angle>('godot_vector2_angle'))(
      p_self,
    );
  }

  _dart_godot_vector2_angle? _godot_vector2_angle;

  double godot_vector2_length_squared(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_length_squared ??= _dylib.lookupFunction<
        _c_godot_vector2_length_squared,
        _dart_godot_vector2_length_squared>('godot_vector2_length_squared'))(
      p_self,
    );
  }

  _dart_godot_vector2_length_squared? _godot_vector2_length_squared;

  bool godot_vector2_is_normalized(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_is_normalized ??= _dylib.lookupFunction<
            _c_godot_vector2_is_normalized,
            _dart_godot_vector2_is_normalized>('godot_vector2_is_normalized'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_vector2_is_normalized? _godot_vector2_is_normalized;

  godot_vector2 godot_vector2_direction_to(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_direction_to ??= _dylib.lookupFunction<
        _c_godot_vector2_direction_to,
        _dart_godot_vector2_direction_to>('godot_vector2_direction_to'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_direction_to? _godot_vector2_direction_to;

  double godot_vector2_distance_to(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_to,
  ) {
    return (_godot_vector2_distance_to ??= _dylib.lookupFunction<
        _c_godot_vector2_distance_to,
        _dart_godot_vector2_distance_to>('godot_vector2_distance_to'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_vector2_distance_to? _godot_vector2_distance_to;

  double godot_vector2_distance_squared_to(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_to,
  ) {
    return (_godot_vector2_distance_squared_to ??= _dylib.lookupFunction<
            _c_godot_vector2_distance_squared_to,
            _dart_godot_vector2_distance_squared_to>(
        'godot_vector2_distance_squared_to'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_vector2_distance_squared_to? _godot_vector2_distance_squared_to;

  double godot_vector2_angle_to(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_to,
  ) {
    return (_godot_vector2_angle_to ??= _dylib.lookupFunction<
        _c_godot_vector2_angle_to,
        _dart_godot_vector2_angle_to>('godot_vector2_angle_to'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_vector2_angle_to? _godot_vector2_angle_to;

  double godot_vector2_angle_to_point(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_to,
  ) {
    return (_godot_vector2_angle_to_point ??= _dylib.lookupFunction<
        _c_godot_vector2_angle_to_point,
        _dart_godot_vector2_angle_to_point>('godot_vector2_angle_to_point'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_vector2_angle_to_point? _godot_vector2_angle_to_point;

  godot_vector2 godot_vector2_linear_interpolate(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
    double p_t,
  ) {
    return (_godot_vector2_linear_interpolate ??= _dylib.lookupFunction<
            _c_godot_vector2_linear_interpolate,
            _dart_godot_vector2_linear_interpolate>(
        'godot_vector2_linear_interpolate'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_vector2_linear_interpolate? _godot_vector2_linear_interpolate;

  godot_vector2 godot_vector2_cubic_interpolate(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
    ffi.Pointer<godot_vector2> p_pre_a,
    ffi.Pointer<godot_vector2> p_post_b,
    double p_t,
  ) {
    return (_godot_vector2_cubic_interpolate ??= _dylib.lookupFunction<
            _c_godot_vector2_cubic_interpolate,
            _dart_godot_vector2_cubic_interpolate>(
        'godot_vector2_cubic_interpolate'))(
      p_self,
      p_b,
      p_pre_a,
      p_post_b,
      p_t,
    );
  }

  _dart_godot_vector2_cubic_interpolate? _godot_vector2_cubic_interpolate;

  godot_vector2 godot_vector2_move_toward(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_to,
    double p_delta,
  ) {
    return (_godot_vector2_move_toward ??= _dylib.lookupFunction<
        _c_godot_vector2_move_toward,
        _dart_godot_vector2_move_toward>('godot_vector2_move_toward'))(
      p_self,
      p_to,
      p_delta,
    );
  }

  _dart_godot_vector2_move_toward? _godot_vector2_move_toward;

  godot_vector2 godot_vector2_rotated(
    ffi.Pointer<godot_vector2> p_self,
    double p_phi,
  ) {
    return (_godot_vector2_rotated ??= _dylib.lookupFunction<
        _c_godot_vector2_rotated,
        _dart_godot_vector2_rotated>('godot_vector2_rotated'))(
      p_self,
      p_phi,
    );
  }

  _dart_godot_vector2_rotated? _godot_vector2_rotated;

  godot_vector2 godot_vector2_tangent(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_tangent ??= _dylib.lookupFunction<
        _c_godot_vector2_tangent,
        _dart_godot_vector2_tangent>('godot_vector2_tangent'))(
      p_self,
    );
  }

  _dart_godot_vector2_tangent? _godot_vector2_tangent;

  godot_vector2 godot_vector2_floor(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_floor ??= _dylib.lookupFunction<
        _c_godot_vector2_floor,
        _dart_godot_vector2_floor>('godot_vector2_floor'))(
      p_self,
    );
  }

  _dart_godot_vector2_floor? _godot_vector2_floor;

  godot_vector2 godot_vector2_snapped(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_by,
  ) {
    return (_godot_vector2_snapped ??= _dylib.lookupFunction<
        _c_godot_vector2_snapped,
        _dart_godot_vector2_snapped>('godot_vector2_snapped'))(
      p_self,
      p_by,
    );
  }

  _dart_godot_vector2_snapped? _godot_vector2_snapped;

  double godot_vector2_aspect(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_aspect ??= _dylib.lookupFunction<
        _c_godot_vector2_aspect,
        _dart_godot_vector2_aspect>('godot_vector2_aspect'))(
      p_self,
    );
  }

  _dart_godot_vector2_aspect? _godot_vector2_aspect;

  double godot_vector2_dot(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_with,
  ) {
    return (_godot_vector2_dot ??=
        _dylib.lookupFunction<_c_godot_vector2_dot, _dart_godot_vector2_dot>(
            'godot_vector2_dot'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_vector2_dot? _godot_vector2_dot;

  godot_vector2 godot_vector2_slide(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_n,
  ) {
    return (_godot_vector2_slide ??= _dylib.lookupFunction<
        _c_godot_vector2_slide,
        _dart_godot_vector2_slide>('godot_vector2_slide'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector2_slide? _godot_vector2_slide;

  godot_vector2 godot_vector2_bounce(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_n,
  ) {
    return (_godot_vector2_bounce ??= _dylib.lookupFunction<
        _c_godot_vector2_bounce,
        _dart_godot_vector2_bounce>('godot_vector2_bounce'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector2_bounce? _godot_vector2_bounce;

  godot_vector2 godot_vector2_reflect(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_n,
  ) {
    return (_godot_vector2_reflect ??= _dylib.lookupFunction<
        _c_godot_vector2_reflect,
        _dart_godot_vector2_reflect>('godot_vector2_reflect'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector2_reflect? _godot_vector2_reflect;

  godot_vector2 godot_vector2_abs(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_abs ??=
        _dylib.lookupFunction<_c_godot_vector2_abs, _dart_godot_vector2_abs>(
            'godot_vector2_abs'))(
      p_self,
    );
  }

  _dart_godot_vector2_abs? _godot_vector2_abs;

  godot_vector2 godot_vector2_clamped(
    ffi.Pointer<godot_vector2> p_self,
    double p_length,
  ) {
    return (_godot_vector2_clamped ??= _dylib.lookupFunction<
        _c_godot_vector2_clamped,
        _dart_godot_vector2_clamped>('godot_vector2_clamped'))(
      p_self,
      p_length,
    );
  }

  _dart_godot_vector2_clamped? _godot_vector2_clamped;

  godot_vector2 godot_vector2_operator_add(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_add ??= _dylib.lookupFunction<
        _c_godot_vector2_operator_add,
        _dart_godot_vector2_operator_add>('godot_vector2_operator_add'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_add? _godot_vector2_operator_add;

  godot_vector2 godot_vector2_operator_subtract(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_subtract ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_subtract,
            _dart_godot_vector2_operator_subtract>(
        'godot_vector2_operator_subtract'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_subtract? _godot_vector2_operator_subtract;

  godot_vector2 godot_vector2_operator_multiply_vector(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_multiply_vector ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_multiply_vector,
            _dart_godot_vector2_operator_multiply_vector>(
        'godot_vector2_operator_multiply_vector'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_multiply_vector?
      _godot_vector2_operator_multiply_vector;

  godot_vector2 godot_vector2_operator_multiply_scalar(
    ffi.Pointer<godot_vector2> p_self,
    double p_b,
  ) {
    return (_godot_vector2_operator_multiply_scalar ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_multiply_scalar,
            _dart_godot_vector2_operator_multiply_scalar>(
        'godot_vector2_operator_multiply_scalar'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_multiply_scalar?
      _godot_vector2_operator_multiply_scalar;

  godot_vector2 godot_vector2_operator_divide_vector(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_divide_vector ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_divide_vector,
            _dart_godot_vector2_operator_divide_vector>(
        'godot_vector2_operator_divide_vector'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_divide_vector?
      _godot_vector2_operator_divide_vector;

  godot_vector2 godot_vector2_operator_divide_scalar(
    ffi.Pointer<godot_vector2> p_self,
    double p_b,
  ) {
    return (_godot_vector2_operator_divide_scalar ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_divide_scalar,
            _dart_godot_vector2_operator_divide_scalar>(
        'godot_vector2_operator_divide_scalar'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector2_operator_divide_scalar?
      _godot_vector2_operator_divide_scalar;

  bool godot_vector2_operator_equal(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_equal ??= _dylib.lookupFunction<
                _c_godot_vector2_operator_equal,
                _dart_godot_vector2_operator_equal>(
            'godot_vector2_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_vector2_operator_equal? _godot_vector2_operator_equal;

  bool godot_vector2_operator_less(
    ffi.Pointer<godot_vector2> p_self,
    ffi.Pointer<godot_vector2> p_b,
  ) {
    return (_godot_vector2_operator_less ??= _dylib.lookupFunction<
            _c_godot_vector2_operator_less,
            _dart_godot_vector2_operator_less>('godot_vector2_operator_less'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_vector2_operator_less? _godot_vector2_operator_less;

  godot_vector2 godot_vector2_operator_neg(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_operator_neg ??= _dylib.lookupFunction<
        _c_godot_vector2_operator_neg,
        _dart_godot_vector2_operator_neg>('godot_vector2_operator_neg'))(
      p_self,
    );
  }

  _dart_godot_vector2_operator_neg? _godot_vector2_operator_neg;

  void godot_vector2_set_x(
    ffi.Pointer<godot_vector2> p_self,
    double p_x,
  ) {
    return (_godot_vector2_set_x ??= _dylib.lookupFunction<
        _c_godot_vector2_set_x,
        _dart_godot_vector2_set_x>('godot_vector2_set_x'))(
      p_self,
      p_x,
    );
  }

  _dart_godot_vector2_set_x? _godot_vector2_set_x;

  void godot_vector2_set_y(
    ffi.Pointer<godot_vector2> p_self,
    double p_y,
  ) {
    return (_godot_vector2_set_y ??= _dylib.lookupFunction<
        _c_godot_vector2_set_y,
        _dart_godot_vector2_set_y>('godot_vector2_set_y'))(
      p_self,
      p_y,
    );
  }

  _dart_godot_vector2_set_y? _godot_vector2_set_y;

  double godot_vector2_get_x(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_get_x ??= _dylib.lookupFunction<
        _c_godot_vector2_get_x,
        _dart_godot_vector2_get_x>('godot_vector2_get_x'))(
      p_self,
    );
  }

  _dart_godot_vector2_get_x? _godot_vector2_get_x;

  double godot_vector2_get_y(
    ffi.Pointer<godot_vector2> p_self,
  ) {
    return (_godot_vector2_get_y ??= _dylib.lookupFunction<
        _c_godot_vector2_get_y,
        _dart_godot_vector2_get_y>('godot_vector2_get_y'))(
      p_self,
    );
  }

  _dart_godot_vector2_get_y? _godot_vector2_get_y;

  void godot_quat_new(
    ffi.Pointer<godot_quat> r_dest,
    double p_x,
    double p_y,
    double p_z,
    double p_w,
  ) {
    return (_godot_quat_new ??=
        _dylib.lookupFunction<_c_godot_quat_new, _dart_godot_quat_new>(
            'godot_quat_new'))(
      r_dest,
      p_x,
      p_y,
      p_z,
      p_w,
    );
  }

  _dart_godot_quat_new? _godot_quat_new;

  void godot_quat_new_with_axis_angle(
    ffi.Pointer<godot_quat> r_dest,
    ffi.Pointer<godot_vector3> p_axis,
    double p_angle,
  ) {
    return (_godot_quat_new_with_axis_angle ??= _dylib.lookupFunction<
            _c_godot_quat_new_with_axis_angle,
            _dart_godot_quat_new_with_axis_angle>(
        'godot_quat_new_with_axis_angle'))(
      r_dest,
      p_axis,
      p_angle,
    );
  }

  _dart_godot_quat_new_with_axis_angle? _godot_quat_new_with_axis_angle;

  void godot_quat_new_with_basis(
    ffi.Pointer<godot_quat> r_dest,
    ffi.Pointer<godot_basis> p_basis,
  ) {
    return (_godot_quat_new_with_basis ??= _dylib.lookupFunction<
        _c_godot_quat_new_with_basis,
        _dart_godot_quat_new_with_basis>('godot_quat_new_with_basis'))(
      r_dest,
      p_basis,
    );
  }

  _dart_godot_quat_new_with_basis? _godot_quat_new_with_basis;

  void godot_quat_new_with_euler(
    ffi.Pointer<godot_quat> r_dest,
    ffi.Pointer<godot_vector3> p_euler,
  ) {
    return (_godot_quat_new_with_euler ??= _dylib.lookupFunction<
        _c_godot_quat_new_with_euler,
        _dart_godot_quat_new_with_euler>('godot_quat_new_with_euler'))(
      r_dest,
      p_euler,
    );
  }

  _dart_godot_quat_new_with_euler? _godot_quat_new_with_euler;

  double godot_quat_get_x(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_get_x ??=
        _dylib.lookupFunction<_c_godot_quat_get_x, _dart_godot_quat_get_x>(
            'godot_quat_get_x'))(
      p_self,
    );
  }

  _dart_godot_quat_get_x? _godot_quat_get_x;

  void godot_quat_set_x(
    ffi.Pointer<godot_quat> p_self,
    double val,
  ) {
    return (_godot_quat_set_x ??=
        _dylib.lookupFunction<_c_godot_quat_set_x, _dart_godot_quat_set_x>(
            'godot_quat_set_x'))(
      p_self,
      val,
    );
  }

  _dart_godot_quat_set_x? _godot_quat_set_x;

  double godot_quat_get_y(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_get_y ??=
        _dylib.lookupFunction<_c_godot_quat_get_y, _dart_godot_quat_get_y>(
            'godot_quat_get_y'))(
      p_self,
    );
  }

  _dart_godot_quat_get_y? _godot_quat_get_y;

  void godot_quat_set_y(
    ffi.Pointer<godot_quat> p_self,
    double val,
  ) {
    return (_godot_quat_set_y ??=
        _dylib.lookupFunction<_c_godot_quat_set_y, _dart_godot_quat_set_y>(
            'godot_quat_set_y'))(
      p_self,
      val,
    );
  }

  _dart_godot_quat_set_y? _godot_quat_set_y;

  double godot_quat_get_z(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_get_z ??=
        _dylib.lookupFunction<_c_godot_quat_get_z, _dart_godot_quat_get_z>(
            'godot_quat_get_z'))(
      p_self,
    );
  }

  _dart_godot_quat_get_z? _godot_quat_get_z;

  void godot_quat_set_z(
    ffi.Pointer<godot_quat> p_self,
    double val,
  ) {
    return (_godot_quat_set_z ??=
        _dylib.lookupFunction<_c_godot_quat_set_z, _dart_godot_quat_set_z>(
            'godot_quat_set_z'))(
      p_self,
      val,
    );
  }

  _dart_godot_quat_set_z? _godot_quat_set_z;

  double godot_quat_get_w(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_get_w ??=
        _dylib.lookupFunction<_c_godot_quat_get_w, _dart_godot_quat_get_w>(
            'godot_quat_get_w'))(
      p_self,
    );
  }

  _dart_godot_quat_get_w? _godot_quat_get_w;

  void godot_quat_set_w(
    ffi.Pointer<godot_quat> p_self,
    double val,
  ) {
    return (_godot_quat_set_w ??=
        _dylib.lookupFunction<_c_godot_quat_set_w, _dart_godot_quat_set_w>(
            'godot_quat_set_w'))(
      p_self,
      val,
    );
  }

  _dart_godot_quat_set_w? _godot_quat_set_w;

  godot_string godot_quat_as_string(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_as_string ??= _dylib.lookupFunction<
        _c_godot_quat_as_string,
        _dart_godot_quat_as_string>('godot_quat_as_string'))(
      p_self,
    );
  }

  _dart_godot_quat_as_string? _godot_quat_as_string;

  double godot_quat_length(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_length ??=
        _dylib.lookupFunction<_c_godot_quat_length, _dart_godot_quat_length>(
            'godot_quat_length'))(
      p_self,
    );
  }

  _dart_godot_quat_length? _godot_quat_length;

  double godot_quat_length_squared(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_length_squared ??= _dylib.lookupFunction<
        _c_godot_quat_length_squared,
        _dart_godot_quat_length_squared>('godot_quat_length_squared'))(
      p_self,
    );
  }

  _dart_godot_quat_length_squared? _godot_quat_length_squared;

  godot_quat godot_quat_normalized(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_normalized ??= _dylib.lookupFunction<
        _c_godot_quat_normalized,
        _dart_godot_quat_normalized>('godot_quat_normalized'))(
      p_self,
    );
  }

  _dart_godot_quat_normalized? _godot_quat_normalized;

  bool godot_quat_is_normalized(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_is_normalized ??= _dylib.lookupFunction<
            _c_godot_quat_is_normalized,
            _dart_godot_quat_is_normalized>('godot_quat_is_normalized'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_quat_is_normalized? _godot_quat_is_normalized;

  godot_quat godot_quat_inverse(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_inverse ??=
        _dylib.lookupFunction<_c_godot_quat_inverse, _dart_godot_quat_inverse>(
            'godot_quat_inverse'))(
      p_self,
    );
  }

  _dart_godot_quat_inverse? _godot_quat_inverse;

  double godot_quat_dot(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
  ) {
    return (_godot_quat_dot ??=
        _dylib.lookupFunction<_c_godot_quat_dot, _dart_godot_quat_dot>(
            'godot_quat_dot'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_quat_dot? _godot_quat_dot;

  godot_vector3 godot_quat_xform(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_quat_xform ??=
        _dylib.lookupFunction<_c_godot_quat_xform, _dart_godot_quat_xform>(
            'godot_quat_xform'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_quat_xform? _godot_quat_xform;

  godot_quat godot_quat_slerp(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
    double p_t,
  ) {
    return (_godot_quat_slerp ??=
        _dylib.lookupFunction<_c_godot_quat_slerp, _dart_godot_quat_slerp>(
            'godot_quat_slerp'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_quat_slerp? _godot_quat_slerp;

  godot_quat godot_quat_slerpni(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
    double p_t,
  ) {
    return (_godot_quat_slerpni ??=
        _dylib.lookupFunction<_c_godot_quat_slerpni, _dart_godot_quat_slerpni>(
            'godot_quat_slerpni'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_quat_slerpni? _godot_quat_slerpni;

  godot_quat godot_quat_cubic_slerp(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
    ffi.Pointer<godot_quat> p_pre_a,
    ffi.Pointer<godot_quat> p_post_b,
    double p_t,
  ) {
    return (_godot_quat_cubic_slerp ??= _dylib.lookupFunction<
        _c_godot_quat_cubic_slerp,
        _dart_godot_quat_cubic_slerp>('godot_quat_cubic_slerp'))(
      p_self,
      p_b,
      p_pre_a,
      p_post_b,
      p_t,
    );
  }

  _dart_godot_quat_cubic_slerp? _godot_quat_cubic_slerp;

  godot_quat godot_quat_operator_multiply(
    ffi.Pointer<godot_quat> p_self,
    double p_b,
  ) {
    return (_godot_quat_operator_multiply ??= _dylib.lookupFunction<
        _c_godot_quat_operator_multiply,
        _dart_godot_quat_operator_multiply>('godot_quat_operator_multiply'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_quat_operator_multiply? _godot_quat_operator_multiply;

  godot_quat godot_quat_operator_add(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
  ) {
    return (_godot_quat_operator_add ??= _dylib.lookupFunction<
        _c_godot_quat_operator_add,
        _dart_godot_quat_operator_add>('godot_quat_operator_add'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_quat_operator_add? _godot_quat_operator_add;

  godot_quat godot_quat_operator_subtract(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
  ) {
    return (_godot_quat_operator_subtract ??= _dylib.lookupFunction<
        _c_godot_quat_operator_subtract,
        _dart_godot_quat_operator_subtract>('godot_quat_operator_subtract'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_quat_operator_subtract? _godot_quat_operator_subtract;

  godot_quat godot_quat_operator_divide(
    ffi.Pointer<godot_quat> p_self,
    double p_b,
  ) {
    return (_godot_quat_operator_divide ??= _dylib.lookupFunction<
        _c_godot_quat_operator_divide,
        _dart_godot_quat_operator_divide>('godot_quat_operator_divide'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_quat_operator_divide? _godot_quat_operator_divide;

  bool godot_quat_operator_equal(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_quat> p_b,
  ) {
    return (_godot_quat_operator_equal ??= _dylib.lookupFunction<
            _c_godot_quat_operator_equal,
            _dart_godot_quat_operator_equal>('godot_quat_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_quat_operator_equal? _godot_quat_operator_equal;

  godot_quat godot_quat_operator_neg(
    ffi.Pointer<godot_quat> p_self,
  ) {
    return (_godot_quat_operator_neg ??= _dylib.lookupFunction<
        _c_godot_quat_operator_neg,
        _dart_godot_quat_operator_neg>('godot_quat_operator_neg'))(
      p_self,
    );
  }

  _dart_godot_quat_operator_neg? _godot_quat_operator_neg;

  void godot_quat_set_axis_angle(
    ffi.Pointer<godot_quat> p_self,
    ffi.Pointer<godot_vector3> p_axis,
    double p_angle,
  ) {
    return (_godot_quat_set_axis_angle ??= _dylib.lookupFunction<
        _c_godot_quat_set_axis_angle,
        _dart_godot_quat_set_axis_angle>('godot_quat_set_axis_angle'))(
      p_self,
      p_axis,
      p_angle,
    );
  }

  _dart_godot_quat_set_axis_angle? _godot_quat_set_axis_angle;

  void godot_basis_new_with_rows(
    ffi.Pointer<godot_basis> r_dest,
    ffi.Pointer<godot_vector3> p_x_axis,
    ffi.Pointer<godot_vector3> p_y_axis,
    ffi.Pointer<godot_vector3> p_z_axis,
  ) {
    return (_godot_basis_new_with_rows ??= _dylib.lookupFunction<
        _c_godot_basis_new_with_rows,
        _dart_godot_basis_new_with_rows>('godot_basis_new_with_rows'))(
      r_dest,
      p_x_axis,
      p_y_axis,
      p_z_axis,
    );
  }

  _dart_godot_basis_new_with_rows? _godot_basis_new_with_rows;

  void godot_basis_new_with_axis_and_angle(
    ffi.Pointer<godot_basis> r_dest,
    ffi.Pointer<godot_vector3> p_axis,
    double p_phi,
  ) {
    return (_godot_basis_new_with_axis_and_angle ??= _dylib.lookupFunction<
            _c_godot_basis_new_with_axis_and_angle,
            _dart_godot_basis_new_with_axis_and_angle>(
        'godot_basis_new_with_axis_and_angle'))(
      r_dest,
      p_axis,
      p_phi,
    );
  }

  _dart_godot_basis_new_with_axis_and_angle?
      _godot_basis_new_with_axis_and_angle;

  void godot_basis_new_with_euler(
    ffi.Pointer<godot_basis> r_dest,
    ffi.Pointer<godot_vector3> p_euler,
  ) {
    return (_godot_basis_new_with_euler ??= _dylib.lookupFunction<
        _c_godot_basis_new_with_euler,
        _dart_godot_basis_new_with_euler>('godot_basis_new_with_euler'))(
      r_dest,
      p_euler,
    );
  }

  _dart_godot_basis_new_with_euler? _godot_basis_new_with_euler;

  void godot_basis_new_with_euler_quat(
    ffi.Pointer<godot_basis> r_dest,
    ffi.Pointer<godot_quat> p_euler,
  ) {
    return (_godot_basis_new_with_euler_quat ??= _dylib.lookupFunction<
            _c_godot_basis_new_with_euler_quat,
            _dart_godot_basis_new_with_euler_quat>(
        'godot_basis_new_with_euler_quat'))(
      r_dest,
      p_euler,
    );
  }

  _dart_godot_basis_new_with_euler_quat? _godot_basis_new_with_euler_quat;

  godot_string godot_basis_as_string(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_as_string ??= _dylib.lookupFunction<
        _c_godot_basis_as_string,
        _dart_godot_basis_as_string>('godot_basis_as_string'))(
      p_self,
    );
  }

  _dart_godot_basis_as_string? _godot_basis_as_string;

  godot_basis godot_basis_inverse(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_inverse ??= _dylib.lookupFunction<
        _c_godot_basis_inverse,
        _dart_godot_basis_inverse>('godot_basis_inverse'))(
      p_self,
    );
  }

  _dart_godot_basis_inverse? _godot_basis_inverse;

  godot_basis godot_basis_transposed(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_transposed ??= _dylib.lookupFunction<
        _c_godot_basis_transposed,
        _dart_godot_basis_transposed>('godot_basis_transposed'))(
      p_self,
    );
  }

  _dart_godot_basis_transposed? _godot_basis_transposed;

  godot_basis godot_basis_orthonormalized(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_orthonormalized ??= _dylib.lookupFunction<
        _c_godot_basis_orthonormalized,
        _dart_godot_basis_orthonormalized>('godot_basis_orthonormalized'))(
      p_self,
    );
  }

  _dart_godot_basis_orthonormalized? _godot_basis_orthonormalized;

  double godot_basis_determinant(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_determinant ??= _dylib.lookupFunction<
        _c_godot_basis_determinant,
        _dart_godot_basis_determinant>('godot_basis_determinant'))(
      p_self,
    );
  }

  _dart_godot_basis_determinant? _godot_basis_determinant;

  godot_basis godot_basis_rotated(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_axis,
    double p_phi,
  ) {
    return (_godot_basis_rotated ??= _dylib.lookupFunction<
        _c_godot_basis_rotated,
        _dart_godot_basis_rotated>('godot_basis_rotated'))(
      p_self,
      p_axis,
      p_phi,
    );
  }

  _dart_godot_basis_rotated? _godot_basis_rotated;

  godot_basis godot_basis_scaled(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_scale,
  ) {
    return (_godot_basis_scaled ??=
        _dylib.lookupFunction<_c_godot_basis_scaled, _dart_godot_basis_scaled>(
            'godot_basis_scaled'))(
      p_self,
      p_scale,
    );
  }

  _dart_godot_basis_scaled? _godot_basis_scaled;

  godot_vector3 godot_basis_get_scale(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_get_scale ??= _dylib.lookupFunction<
        _c_godot_basis_get_scale,
        _dart_godot_basis_get_scale>('godot_basis_get_scale'))(
      p_self,
    );
  }

  _dart_godot_basis_get_scale? _godot_basis_get_scale;

  godot_vector3 godot_basis_get_euler(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_get_euler ??= _dylib.lookupFunction<
        _c_godot_basis_get_euler,
        _dart_godot_basis_get_euler>('godot_basis_get_euler'))(
      p_self,
    );
  }

  _dart_godot_basis_get_euler? _godot_basis_get_euler;

  godot_quat godot_basis_get_quat(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_get_quat ??= _dylib.lookupFunction<
        _c_godot_basis_get_quat,
        _dart_godot_basis_get_quat>('godot_basis_get_quat'))(
      p_self,
    );
  }

  _dart_godot_basis_get_quat? _godot_basis_get_quat;

  void godot_basis_set_quat(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_quat> p_quat,
  ) {
    return (_godot_basis_set_quat ??= _dylib.lookupFunction<
        _c_godot_basis_set_quat,
        _dart_godot_basis_set_quat>('godot_basis_set_quat'))(
      p_self,
      p_quat,
    );
  }

  _dart_godot_basis_set_quat? _godot_basis_set_quat;

  void godot_basis_set_axis_angle_scale(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_axis,
    double p_phi,
    ffi.Pointer<godot_vector3> p_scale,
  ) {
    return (_godot_basis_set_axis_angle_scale ??= _dylib.lookupFunction<
            _c_godot_basis_set_axis_angle_scale,
            _dart_godot_basis_set_axis_angle_scale>(
        'godot_basis_set_axis_angle_scale'))(
      p_self,
      p_axis,
      p_phi,
      p_scale,
    );
  }

  _dart_godot_basis_set_axis_angle_scale? _godot_basis_set_axis_angle_scale;

  void godot_basis_set_euler_scale(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_euler,
    ffi.Pointer<godot_vector3> p_scale,
  ) {
    return (_godot_basis_set_euler_scale ??= _dylib.lookupFunction<
        _c_godot_basis_set_euler_scale,
        _dart_godot_basis_set_euler_scale>('godot_basis_set_euler_scale'))(
      p_self,
      p_euler,
      p_scale,
    );
  }

  _dart_godot_basis_set_euler_scale? _godot_basis_set_euler_scale;

  void godot_basis_set_quat_scale(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_quat> p_quat,
    ffi.Pointer<godot_vector3> p_scale,
  ) {
    return (_godot_basis_set_quat_scale ??= _dylib.lookupFunction<
        _c_godot_basis_set_quat_scale,
        _dart_godot_basis_set_quat_scale>('godot_basis_set_quat_scale'))(
      p_self,
      p_quat,
      p_scale,
    );
  }

  _dart_godot_basis_set_quat_scale? _godot_basis_set_quat_scale;

  double godot_basis_tdotx(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_with,
  ) {
    return (_godot_basis_tdotx ??=
        _dylib.lookupFunction<_c_godot_basis_tdotx, _dart_godot_basis_tdotx>(
            'godot_basis_tdotx'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_basis_tdotx? _godot_basis_tdotx;

  double godot_basis_tdoty(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_with,
  ) {
    return (_godot_basis_tdoty ??=
        _dylib.lookupFunction<_c_godot_basis_tdoty, _dart_godot_basis_tdoty>(
            'godot_basis_tdoty'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_basis_tdoty? _godot_basis_tdoty;

  double godot_basis_tdotz(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_with,
  ) {
    return (_godot_basis_tdotz ??=
        _dylib.lookupFunction<_c_godot_basis_tdotz, _dart_godot_basis_tdotz>(
            'godot_basis_tdotz'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_basis_tdotz? _godot_basis_tdotz;

  godot_vector3 godot_basis_xform(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_basis_xform ??=
        _dylib.lookupFunction<_c_godot_basis_xform, _dart_godot_basis_xform>(
            'godot_basis_xform'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_basis_xform? _godot_basis_xform;

  godot_vector3 godot_basis_xform_inv(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_basis_xform_inv ??= _dylib.lookupFunction<
        _c_godot_basis_xform_inv,
        _dart_godot_basis_xform_inv>('godot_basis_xform_inv'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_basis_xform_inv? _godot_basis_xform_inv;

  int godot_basis_get_orthogonal_index(
    ffi.Pointer<godot_basis> p_self,
  ) {
    return (_godot_basis_get_orthogonal_index ??= _dylib.lookupFunction<
            _c_godot_basis_get_orthogonal_index,
            _dart_godot_basis_get_orthogonal_index>(
        'godot_basis_get_orthogonal_index'))(
      p_self,
    );
  }

  _dart_godot_basis_get_orthogonal_index? _godot_basis_get_orthogonal_index;

  void godot_basis_new(
    ffi.Pointer<godot_basis> r_dest,
  ) {
    return (_godot_basis_new ??=
        _dylib.lookupFunction<_c_godot_basis_new, _dart_godot_basis_new>(
            'godot_basis_new'))(
      r_dest,
    );
  }

  _dart_godot_basis_new? _godot_basis_new;

  void godot_basis_get_elements(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_vector3> p_elements,
  ) {
    return (_godot_basis_get_elements ??= _dylib.lookupFunction<
        _c_godot_basis_get_elements,
        _dart_godot_basis_get_elements>('godot_basis_get_elements'))(
      p_self,
      p_elements,
    );
  }

  _dart_godot_basis_get_elements? _godot_basis_get_elements;

  godot_vector3 godot_basis_get_axis(
    ffi.Pointer<godot_basis> p_self,
    int p_axis,
  ) {
    return (_godot_basis_get_axis ??= _dylib.lookupFunction<
        _c_godot_basis_get_axis,
        _dart_godot_basis_get_axis>('godot_basis_get_axis'))(
      p_self,
      p_axis,
    );
  }

  _dart_godot_basis_get_axis? _godot_basis_get_axis;

  void godot_basis_set_axis(
    ffi.Pointer<godot_basis> p_self,
    int p_axis,
    ffi.Pointer<godot_vector3> p_value,
  ) {
    return (_godot_basis_set_axis ??= _dylib.lookupFunction<
        _c_godot_basis_set_axis,
        _dart_godot_basis_set_axis>('godot_basis_set_axis'))(
      p_self,
      p_axis,
      p_value,
    );
  }

  _dart_godot_basis_set_axis? _godot_basis_set_axis;

  godot_vector3 godot_basis_get_row(
    ffi.Pointer<godot_basis> p_self,
    int p_row,
  ) {
    return (_godot_basis_get_row ??= _dylib.lookupFunction<
        _c_godot_basis_get_row,
        _dart_godot_basis_get_row>('godot_basis_get_row'))(
      p_self,
      p_row,
    );
  }

  _dart_godot_basis_get_row? _godot_basis_get_row;

  void godot_basis_set_row(
    ffi.Pointer<godot_basis> p_self,
    int p_row,
    ffi.Pointer<godot_vector3> p_value,
  ) {
    return (_godot_basis_set_row ??= _dylib.lookupFunction<
        _c_godot_basis_set_row,
        _dart_godot_basis_set_row>('godot_basis_set_row'))(
      p_self,
      p_row,
      p_value,
    );
  }

  _dart_godot_basis_set_row? _godot_basis_set_row;

  bool godot_basis_operator_equal(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_basis> p_b,
  ) {
    return (_godot_basis_operator_equal ??= _dylib.lookupFunction<
            _c_godot_basis_operator_equal,
            _dart_godot_basis_operator_equal>('godot_basis_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_basis_operator_equal? _godot_basis_operator_equal;

  godot_basis godot_basis_operator_add(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_basis> p_b,
  ) {
    return (_godot_basis_operator_add ??= _dylib.lookupFunction<
        _c_godot_basis_operator_add,
        _dart_godot_basis_operator_add>('godot_basis_operator_add'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_basis_operator_add? _godot_basis_operator_add;

  godot_basis godot_basis_operator_subtract(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_basis> p_b,
  ) {
    return (_godot_basis_operator_subtract ??= _dylib.lookupFunction<
        _c_godot_basis_operator_subtract,
        _dart_godot_basis_operator_subtract>('godot_basis_operator_subtract'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_basis_operator_subtract? _godot_basis_operator_subtract;

  godot_basis godot_basis_operator_multiply_vector(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_basis> p_b,
  ) {
    return (_godot_basis_operator_multiply_vector ??= _dylib.lookupFunction<
            _c_godot_basis_operator_multiply_vector,
            _dart_godot_basis_operator_multiply_vector>(
        'godot_basis_operator_multiply_vector'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_basis_operator_multiply_vector?
      _godot_basis_operator_multiply_vector;

  godot_basis godot_basis_operator_multiply_scalar(
    ffi.Pointer<godot_basis> p_self,
    double p_b,
  ) {
    return (_godot_basis_operator_multiply_scalar ??= _dylib.lookupFunction<
            _c_godot_basis_operator_multiply_scalar,
            _dart_godot_basis_operator_multiply_scalar>(
        'godot_basis_operator_multiply_scalar'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_basis_operator_multiply_scalar?
      _godot_basis_operator_multiply_scalar;

  godot_basis godot_basis_slerp(
    ffi.Pointer<godot_basis> p_self,
    ffi.Pointer<godot_basis> p_b,
    double p_t,
  ) {
    return (_godot_basis_slerp ??=
        _dylib.lookupFunction<_c_godot_basis_slerp, _dart_godot_basis_slerp>(
            'godot_basis_slerp'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_basis_slerp? _godot_basis_slerp;

  void godot_vector3_new(
    ffi.Pointer<godot_vector3> r_dest,
    double p_x,
    double p_y,
    double p_z,
  ) {
    return (_godot_vector3_new ??=
        _dylib.lookupFunction<_c_godot_vector3_new, _dart_godot_vector3_new>(
            'godot_vector3_new'))(
      r_dest,
      p_x,
      p_y,
      p_z,
    );
  }

  _dart_godot_vector3_new? _godot_vector3_new;

  godot_string godot_vector3_as_string(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_as_string ??= _dylib.lookupFunction<
        _c_godot_vector3_as_string,
        _dart_godot_vector3_as_string>('godot_vector3_as_string'))(
      p_self,
    );
  }

  _dart_godot_vector3_as_string? _godot_vector3_as_string;

  int godot_vector3_min_axis(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_min_axis ??= _dylib.lookupFunction<
        _c_godot_vector3_min_axis,
        _dart_godot_vector3_min_axis>('godot_vector3_min_axis'))(
      p_self,
    );
  }

  _dart_godot_vector3_min_axis? _godot_vector3_min_axis;

  int godot_vector3_max_axis(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_max_axis ??= _dylib.lookupFunction<
        _c_godot_vector3_max_axis,
        _dart_godot_vector3_max_axis>('godot_vector3_max_axis'))(
      p_self,
    );
  }

  _dart_godot_vector3_max_axis? _godot_vector3_max_axis;

  double godot_vector3_length(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_length ??= _dylib.lookupFunction<
        _c_godot_vector3_length,
        _dart_godot_vector3_length>('godot_vector3_length'))(
      p_self,
    );
  }

  _dart_godot_vector3_length? _godot_vector3_length;

  double godot_vector3_length_squared(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_length_squared ??= _dylib.lookupFunction<
        _c_godot_vector3_length_squared,
        _dart_godot_vector3_length_squared>('godot_vector3_length_squared'))(
      p_self,
    );
  }

  _dart_godot_vector3_length_squared? _godot_vector3_length_squared;

  bool godot_vector3_is_normalized(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_is_normalized ??= _dylib.lookupFunction<
            _c_godot_vector3_is_normalized,
            _dart_godot_vector3_is_normalized>('godot_vector3_is_normalized'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_vector3_is_normalized? _godot_vector3_is_normalized;

  godot_vector3 godot_vector3_normalized(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_normalized ??= _dylib.lookupFunction<
        _c_godot_vector3_normalized,
        _dart_godot_vector3_normalized>('godot_vector3_normalized'))(
      p_self,
    );
  }

  _dart_godot_vector3_normalized? _godot_vector3_normalized;

  godot_vector3 godot_vector3_inverse(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_inverse ??= _dylib.lookupFunction<
        _c_godot_vector3_inverse,
        _dart_godot_vector3_inverse>('godot_vector3_inverse'))(
      p_self,
    );
  }

  _dart_godot_vector3_inverse? _godot_vector3_inverse;

  godot_vector3 godot_vector3_snapped(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_by,
  ) {
    return (_godot_vector3_snapped ??= _dylib.lookupFunction<
        _c_godot_vector3_snapped,
        _dart_godot_vector3_snapped>('godot_vector3_snapped'))(
      p_self,
      p_by,
    );
  }

  _dart_godot_vector3_snapped? _godot_vector3_snapped;

  godot_vector3 godot_vector3_rotated(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_axis,
    double p_phi,
  ) {
    return (_godot_vector3_rotated ??= _dylib.lookupFunction<
        _c_godot_vector3_rotated,
        _dart_godot_vector3_rotated>('godot_vector3_rotated'))(
      p_self,
      p_axis,
      p_phi,
    );
  }

  _dart_godot_vector3_rotated? _godot_vector3_rotated;

  godot_vector3 godot_vector3_linear_interpolate(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
    double p_t,
  ) {
    return (_godot_vector3_linear_interpolate ??= _dylib.lookupFunction<
            _c_godot_vector3_linear_interpolate,
            _dart_godot_vector3_linear_interpolate>(
        'godot_vector3_linear_interpolate'))(
      p_self,
      p_b,
      p_t,
    );
  }

  _dart_godot_vector3_linear_interpolate? _godot_vector3_linear_interpolate;

  godot_vector3 godot_vector3_cubic_interpolate(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
    ffi.Pointer<godot_vector3> p_pre_a,
    ffi.Pointer<godot_vector3> p_post_b,
    double p_t,
  ) {
    return (_godot_vector3_cubic_interpolate ??= _dylib.lookupFunction<
            _c_godot_vector3_cubic_interpolate,
            _dart_godot_vector3_cubic_interpolate>(
        'godot_vector3_cubic_interpolate'))(
      p_self,
      p_b,
      p_pre_a,
      p_post_b,
      p_t,
    );
  }

  _dart_godot_vector3_cubic_interpolate? _godot_vector3_cubic_interpolate;

  godot_vector3 godot_vector3_move_toward(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_to,
    double p_delta,
  ) {
    return (_godot_vector3_move_toward ??= _dylib.lookupFunction<
        _c_godot_vector3_move_toward,
        _dart_godot_vector3_move_toward>('godot_vector3_move_toward'))(
      p_self,
      p_to,
      p_delta,
    );
  }

  _dart_godot_vector3_move_toward? _godot_vector3_move_toward;

  double godot_vector3_dot(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_dot ??=
        _dylib.lookupFunction<_c_godot_vector3_dot, _dart_godot_vector3_dot>(
            'godot_vector3_dot'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_dot? _godot_vector3_dot;

  godot_vector3 godot_vector3_cross(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_cross ??= _dylib.lookupFunction<
        _c_godot_vector3_cross,
        _dart_godot_vector3_cross>('godot_vector3_cross'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_cross? _godot_vector3_cross;

  godot_basis godot_vector3_outer(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_outer ??= _dylib.lookupFunction<
        _c_godot_vector3_outer,
        _dart_godot_vector3_outer>('godot_vector3_outer'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_outer? _godot_vector3_outer;

  godot_basis godot_vector3_to_diagonal_matrix(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_to_diagonal_matrix ??= _dylib.lookupFunction<
            _c_godot_vector3_to_diagonal_matrix,
            _dart_godot_vector3_to_diagonal_matrix>(
        'godot_vector3_to_diagonal_matrix'))(
      p_self,
    );
  }

  _dart_godot_vector3_to_diagonal_matrix? _godot_vector3_to_diagonal_matrix;

  godot_vector3 godot_vector3_abs(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_abs ??=
        _dylib.lookupFunction<_c_godot_vector3_abs, _dart_godot_vector3_abs>(
            'godot_vector3_abs'))(
      p_self,
    );
  }

  _dart_godot_vector3_abs? _godot_vector3_abs;

  godot_vector3 godot_vector3_floor(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_floor ??= _dylib.lookupFunction<
        _c_godot_vector3_floor,
        _dart_godot_vector3_floor>('godot_vector3_floor'))(
      p_self,
    );
  }

  _dart_godot_vector3_floor? _godot_vector3_floor;

  godot_vector3 godot_vector3_ceil(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_ceil ??=
        _dylib.lookupFunction<_c_godot_vector3_ceil, _dart_godot_vector3_ceil>(
            'godot_vector3_ceil'))(
      p_self,
    );
  }

  _dart_godot_vector3_ceil? _godot_vector3_ceil;

  godot_vector3 godot_vector3_direction_to(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_direction_to ??= _dylib.lookupFunction<
        _c_godot_vector3_direction_to,
        _dart_godot_vector3_direction_to>('godot_vector3_direction_to'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_direction_to? _godot_vector3_direction_to;

  double godot_vector3_distance_to(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_distance_to ??= _dylib.lookupFunction<
        _c_godot_vector3_distance_to,
        _dart_godot_vector3_distance_to>('godot_vector3_distance_to'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_distance_to? _godot_vector3_distance_to;

  double godot_vector3_distance_squared_to(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_distance_squared_to ??= _dylib.lookupFunction<
            _c_godot_vector3_distance_squared_to,
            _dart_godot_vector3_distance_squared_to>(
        'godot_vector3_distance_squared_to'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_distance_squared_to? _godot_vector3_distance_squared_to;

  double godot_vector3_angle_to(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_to,
  ) {
    return (_godot_vector3_angle_to ??= _dylib.lookupFunction<
        _c_godot_vector3_angle_to,
        _dart_godot_vector3_angle_to>('godot_vector3_angle_to'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_vector3_angle_to? _godot_vector3_angle_to;

  godot_vector3 godot_vector3_slide(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_n,
  ) {
    return (_godot_vector3_slide ??= _dylib.lookupFunction<
        _c_godot_vector3_slide,
        _dart_godot_vector3_slide>('godot_vector3_slide'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector3_slide? _godot_vector3_slide;

  godot_vector3 godot_vector3_bounce(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_n,
  ) {
    return (_godot_vector3_bounce ??= _dylib.lookupFunction<
        _c_godot_vector3_bounce,
        _dart_godot_vector3_bounce>('godot_vector3_bounce'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector3_bounce? _godot_vector3_bounce;

  godot_vector3 godot_vector3_reflect(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_n,
  ) {
    return (_godot_vector3_reflect ??= _dylib.lookupFunction<
        _c_godot_vector3_reflect,
        _dart_godot_vector3_reflect>('godot_vector3_reflect'))(
      p_self,
      p_n,
    );
  }

  _dart_godot_vector3_reflect? _godot_vector3_reflect;

  godot_vector3 godot_vector3_operator_add(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_add ??= _dylib.lookupFunction<
        _c_godot_vector3_operator_add,
        _dart_godot_vector3_operator_add>('godot_vector3_operator_add'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_add? _godot_vector3_operator_add;

  godot_vector3 godot_vector3_operator_subtract(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_subtract ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_subtract,
            _dart_godot_vector3_operator_subtract>(
        'godot_vector3_operator_subtract'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_subtract? _godot_vector3_operator_subtract;

  godot_vector3 godot_vector3_operator_multiply_vector(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_multiply_vector ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_multiply_vector,
            _dart_godot_vector3_operator_multiply_vector>(
        'godot_vector3_operator_multiply_vector'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_multiply_vector?
      _godot_vector3_operator_multiply_vector;

  godot_vector3 godot_vector3_operator_multiply_scalar(
    ffi.Pointer<godot_vector3> p_self,
    double p_b,
  ) {
    return (_godot_vector3_operator_multiply_scalar ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_multiply_scalar,
            _dart_godot_vector3_operator_multiply_scalar>(
        'godot_vector3_operator_multiply_scalar'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_multiply_scalar?
      _godot_vector3_operator_multiply_scalar;

  godot_vector3 godot_vector3_operator_divide_vector(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_divide_vector ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_divide_vector,
            _dart_godot_vector3_operator_divide_vector>(
        'godot_vector3_operator_divide_vector'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_divide_vector?
      _godot_vector3_operator_divide_vector;

  godot_vector3 godot_vector3_operator_divide_scalar(
    ffi.Pointer<godot_vector3> p_self,
    double p_b,
  ) {
    return (_godot_vector3_operator_divide_scalar ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_divide_scalar,
            _dart_godot_vector3_operator_divide_scalar>(
        'godot_vector3_operator_divide_scalar'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_vector3_operator_divide_scalar?
      _godot_vector3_operator_divide_scalar;

  bool godot_vector3_operator_equal(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_equal ??= _dylib.lookupFunction<
                _c_godot_vector3_operator_equal,
                _dart_godot_vector3_operator_equal>(
            'godot_vector3_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_vector3_operator_equal? _godot_vector3_operator_equal;

  bool godot_vector3_operator_less(
    ffi.Pointer<godot_vector3> p_self,
    ffi.Pointer<godot_vector3> p_b,
  ) {
    return (_godot_vector3_operator_less ??= _dylib.lookupFunction<
            _c_godot_vector3_operator_less,
            _dart_godot_vector3_operator_less>('godot_vector3_operator_less'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_vector3_operator_less? _godot_vector3_operator_less;

  godot_vector3 godot_vector3_operator_neg(
    ffi.Pointer<godot_vector3> p_self,
  ) {
    return (_godot_vector3_operator_neg ??= _dylib.lookupFunction<
        _c_godot_vector3_operator_neg,
        _dart_godot_vector3_operator_neg>('godot_vector3_operator_neg'))(
      p_self,
    );
  }

  _dart_godot_vector3_operator_neg? _godot_vector3_operator_neg;

  void godot_vector3_set_axis(
    ffi.Pointer<godot_vector3> p_self,
    int p_axis,
    double p_val,
  ) {
    return (_godot_vector3_set_axis ??= _dylib.lookupFunction<
        _c_godot_vector3_set_axis,
        _dart_godot_vector3_set_axis>('godot_vector3_set_axis'))(
      p_self,
      p_axis,
      p_val,
    );
  }

  _dart_godot_vector3_set_axis? _godot_vector3_set_axis;

  double godot_vector3_get_axis(
    ffi.Pointer<godot_vector3> p_self,
    int p_axis,
  ) {
    return (_godot_vector3_get_axis ??= _dylib.lookupFunction<
        _c_godot_vector3_get_axis,
        _dart_godot_vector3_get_axis>('godot_vector3_get_axis'))(
      p_self,
      p_axis,
    );
  }

  _dart_godot_vector3_get_axis? _godot_vector3_get_axis;

  void godot_pool_byte_array_new(
    ffi.Pointer<godot_pool_byte_array> r_dest,
  ) {
    return (_godot_pool_byte_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_new,
        _dart_godot_pool_byte_array_new>('godot_pool_byte_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_byte_array_new? _godot_pool_byte_array_new;

  void godot_pool_byte_array_new_copy(
    ffi.Pointer<godot_pool_byte_array> r_dest,
    ffi.Pointer<godot_pool_byte_array> p_src,
  ) {
    return (_godot_pool_byte_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_new_copy,
            _dart_godot_pool_byte_array_new_copy>(
        'godot_pool_byte_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_byte_array_new_copy? _godot_pool_byte_array_new_copy;

  void godot_pool_byte_array_new_with_array(
    ffi.Pointer<godot_pool_byte_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_byte_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_new_with_array,
            _dart_godot_pool_byte_array_new_with_array>(
        'godot_pool_byte_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_byte_array_new_with_array?
      _godot_pool_byte_array_new_with_array;

  void godot_pool_byte_array_append(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_data,
  ) {
    return (_godot_pool_byte_array_append ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_append,
        _dart_godot_pool_byte_array_append>('godot_pool_byte_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_byte_array_append? _godot_pool_byte_array_append;

  void godot_pool_byte_array_append_array(
    ffi.Pointer<godot_pool_byte_array> p_self,
    ffi.Pointer<godot_pool_byte_array> p_array,
  ) {
    return (_godot_pool_byte_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_append_array,
            _dart_godot_pool_byte_array_append_array>(
        'godot_pool_byte_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_byte_array_append_array? _godot_pool_byte_array_append_array;

  int godot_pool_byte_array_insert(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_idx,
    int p_data,
  ) {
    return (_godot_pool_byte_array_insert ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_insert,
        _dart_godot_pool_byte_array_insert>('godot_pool_byte_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_byte_array_insert? _godot_pool_byte_array_insert;

  void godot_pool_byte_array_invert(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_invert ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_invert,
        _dart_godot_pool_byte_array_invert>('godot_pool_byte_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_byte_array_invert? _godot_pool_byte_array_invert;

  void godot_pool_byte_array_push_back(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_data,
  ) {
    return (_godot_pool_byte_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_push_back,
            _dart_godot_pool_byte_array_push_back>(
        'godot_pool_byte_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_byte_array_push_back? _godot_pool_byte_array_push_back;

  void godot_pool_byte_array_remove(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_byte_array_remove ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_remove,
        _dart_godot_pool_byte_array_remove>('godot_pool_byte_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_byte_array_remove? _godot_pool_byte_array_remove;

  void godot_pool_byte_array_resize(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_byte_array_resize ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_resize,
        _dart_godot_pool_byte_array_resize>('godot_pool_byte_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_byte_array_resize? _godot_pool_byte_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_byte_array_read(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_read,
        _dart_godot_pool_byte_array_read>('godot_pool_byte_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_byte_array_read? _godot_pool_byte_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_byte_array_write(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_write ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_write,
        _dart_godot_pool_byte_array_write>('godot_pool_byte_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_byte_array_write? _godot_pool_byte_array_write;

  void godot_pool_byte_array_set(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_idx,
    int p_data,
  ) {
    return (_godot_pool_byte_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_set,
        _dart_godot_pool_byte_array_set>('godot_pool_byte_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_byte_array_set? _godot_pool_byte_array_set;

  int godot_pool_byte_array_get(
    ffi.Pointer<godot_pool_byte_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_byte_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_get,
        _dart_godot_pool_byte_array_get>('godot_pool_byte_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_byte_array_get? _godot_pool_byte_array_get;

  int godot_pool_byte_array_size(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_size,
        _dart_godot_pool_byte_array_size>('godot_pool_byte_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_byte_array_size? _godot_pool_byte_array_size;

  bool godot_pool_byte_array_empty(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_empty ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_empty,
            _dart_godot_pool_byte_array_empty>('godot_pool_byte_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_byte_array_empty? _godot_pool_byte_array_empty;

  void godot_pool_byte_array_destroy(
    ffi.Pointer<godot_pool_byte_array> p_self,
  ) {
    return (_godot_pool_byte_array_destroy ??= _dylib.lookupFunction<
        _c_godot_pool_byte_array_destroy,
        _dart_godot_pool_byte_array_destroy>('godot_pool_byte_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_byte_array_destroy? _godot_pool_byte_array_destroy;

  void godot_pool_int_array_new(
    ffi.Pointer<godot_pool_int_array> r_dest,
  ) {
    return (_godot_pool_int_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_new,
        _dart_godot_pool_int_array_new>('godot_pool_int_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_int_array_new? _godot_pool_int_array_new;

  void godot_pool_int_array_new_copy(
    ffi.Pointer<godot_pool_int_array> r_dest,
    ffi.Pointer<godot_pool_int_array> p_src,
  ) {
    return (_godot_pool_int_array_new_copy ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_new_copy,
        _dart_godot_pool_int_array_new_copy>('godot_pool_int_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_int_array_new_copy? _godot_pool_int_array_new_copy;

  void godot_pool_int_array_new_with_array(
    ffi.Pointer<godot_pool_int_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_int_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_new_with_array,
            _dart_godot_pool_int_array_new_with_array>(
        'godot_pool_int_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_int_array_new_with_array?
      _godot_pool_int_array_new_with_array;

  void godot_pool_int_array_append(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_data,
  ) {
    return (_godot_pool_int_array_append ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_append,
        _dart_godot_pool_int_array_append>('godot_pool_int_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_int_array_append? _godot_pool_int_array_append;

  void godot_pool_int_array_append_array(
    ffi.Pointer<godot_pool_int_array> p_self,
    ffi.Pointer<godot_pool_int_array> p_array,
  ) {
    return (_godot_pool_int_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_append_array,
            _dart_godot_pool_int_array_append_array>(
        'godot_pool_int_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_int_array_append_array? _godot_pool_int_array_append_array;

  int godot_pool_int_array_insert(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_idx,
    int p_data,
  ) {
    return (_godot_pool_int_array_insert ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_insert,
        _dart_godot_pool_int_array_insert>('godot_pool_int_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_int_array_insert? _godot_pool_int_array_insert;

  void godot_pool_int_array_invert(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_invert ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_invert,
        _dart_godot_pool_int_array_invert>('godot_pool_int_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_int_array_invert? _godot_pool_int_array_invert;

  void godot_pool_int_array_push_back(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_data,
  ) {
    return (_godot_pool_int_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_push_back,
            _dart_godot_pool_int_array_push_back>(
        'godot_pool_int_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_int_array_push_back? _godot_pool_int_array_push_back;

  void godot_pool_int_array_remove(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_int_array_remove ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_remove,
        _dart_godot_pool_int_array_remove>('godot_pool_int_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_int_array_remove? _godot_pool_int_array_remove;

  void godot_pool_int_array_resize(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_int_array_resize ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_resize,
        _dart_godot_pool_int_array_resize>('godot_pool_int_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_int_array_resize? _godot_pool_int_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_int_array_read(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_read,
        _dart_godot_pool_int_array_read>('godot_pool_int_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_int_array_read? _godot_pool_int_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_int_array_write(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_write ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_write,
        _dart_godot_pool_int_array_write>('godot_pool_int_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_int_array_write? _godot_pool_int_array_write;

  void godot_pool_int_array_set(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_idx,
    int p_data,
  ) {
    return (_godot_pool_int_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_set,
        _dart_godot_pool_int_array_set>('godot_pool_int_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_int_array_set? _godot_pool_int_array_set;

  int godot_pool_int_array_get(
    ffi.Pointer<godot_pool_int_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_int_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_get,
        _dart_godot_pool_int_array_get>('godot_pool_int_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_int_array_get? _godot_pool_int_array_get;

  int godot_pool_int_array_size(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_size,
        _dart_godot_pool_int_array_size>('godot_pool_int_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_int_array_size? _godot_pool_int_array_size;

  bool godot_pool_int_array_empty(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_empty ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_empty,
            _dart_godot_pool_int_array_empty>('godot_pool_int_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_int_array_empty? _godot_pool_int_array_empty;

  void godot_pool_int_array_destroy(
    ffi.Pointer<godot_pool_int_array> p_self,
  ) {
    return (_godot_pool_int_array_destroy ??= _dylib.lookupFunction<
        _c_godot_pool_int_array_destroy,
        _dart_godot_pool_int_array_destroy>('godot_pool_int_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_int_array_destroy? _godot_pool_int_array_destroy;

  void godot_pool_real_array_new(
    ffi.Pointer<godot_pool_real_array> r_dest,
  ) {
    return (_godot_pool_real_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_new,
        _dart_godot_pool_real_array_new>('godot_pool_real_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_real_array_new? _godot_pool_real_array_new;

  void godot_pool_real_array_new_copy(
    ffi.Pointer<godot_pool_real_array> r_dest,
    ffi.Pointer<godot_pool_real_array> p_src,
  ) {
    return (_godot_pool_real_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_new_copy,
            _dart_godot_pool_real_array_new_copy>(
        'godot_pool_real_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_real_array_new_copy? _godot_pool_real_array_new_copy;

  void godot_pool_real_array_new_with_array(
    ffi.Pointer<godot_pool_real_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_real_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_new_with_array,
            _dart_godot_pool_real_array_new_with_array>(
        'godot_pool_real_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_real_array_new_with_array?
      _godot_pool_real_array_new_with_array;

  void godot_pool_real_array_append(
    ffi.Pointer<godot_pool_real_array> p_self,
    double p_data,
  ) {
    return (_godot_pool_real_array_append ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_append,
        _dart_godot_pool_real_array_append>('godot_pool_real_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_real_array_append? _godot_pool_real_array_append;

  void godot_pool_real_array_append_array(
    ffi.Pointer<godot_pool_real_array> p_self,
    ffi.Pointer<godot_pool_real_array> p_array,
  ) {
    return (_godot_pool_real_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_append_array,
            _dart_godot_pool_real_array_append_array>(
        'godot_pool_real_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_real_array_append_array? _godot_pool_real_array_append_array;

  int godot_pool_real_array_insert(
    ffi.Pointer<godot_pool_real_array> p_self,
    int p_idx,
    double p_data,
  ) {
    return (_godot_pool_real_array_insert ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_insert,
        _dart_godot_pool_real_array_insert>('godot_pool_real_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_real_array_insert? _godot_pool_real_array_insert;

  void godot_pool_real_array_invert(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_invert ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_invert,
        _dart_godot_pool_real_array_invert>('godot_pool_real_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_real_array_invert? _godot_pool_real_array_invert;

  void godot_pool_real_array_push_back(
    ffi.Pointer<godot_pool_real_array> p_self,
    double p_data,
  ) {
    return (_godot_pool_real_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_push_back,
            _dart_godot_pool_real_array_push_back>(
        'godot_pool_real_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_real_array_push_back? _godot_pool_real_array_push_back;

  void godot_pool_real_array_remove(
    ffi.Pointer<godot_pool_real_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_real_array_remove ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_remove,
        _dart_godot_pool_real_array_remove>('godot_pool_real_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_real_array_remove? _godot_pool_real_array_remove;

  void godot_pool_real_array_resize(
    ffi.Pointer<godot_pool_real_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_real_array_resize ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_resize,
        _dart_godot_pool_real_array_resize>('godot_pool_real_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_real_array_resize? _godot_pool_real_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_real_array_read(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_read,
        _dart_godot_pool_real_array_read>('godot_pool_real_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_real_array_read? _godot_pool_real_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_real_array_write(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_write ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_write,
        _dart_godot_pool_real_array_write>('godot_pool_real_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_real_array_write? _godot_pool_real_array_write;

  void godot_pool_real_array_set(
    ffi.Pointer<godot_pool_real_array> p_self,
    int p_idx,
    double p_data,
  ) {
    return (_godot_pool_real_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_set,
        _dart_godot_pool_real_array_set>('godot_pool_real_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_real_array_set? _godot_pool_real_array_set;

  double godot_pool_real_array_get(
    ffi.Pointer<godot_pool_real_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_real_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_get,
        _dart_godot_pool_real_array_get>('godot_pool_real_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_real_array_get? _godot_pool_real_array_get;

  int godot_pool_real_array_size(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_size,
        _dart_godot_pool_real_array_size>('godot_pool_real_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_real_array_size? _godot_pool_real_array_size;

  bool godot_pool_real_array_empty(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_empty ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_empty,
            _dart_godot_pool_real_array_empty>('godot_pool_real_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_real_array_empty? _godot_pool_real_array_empty;

  void godot_pool_real_array_destroy(
    ffi.Pointer<godot_pool_real_array> p_self,
  ) {
    return (_godot_pool_real_array_destroy ??= _dylib.lookupFunction<
        _c_godot_pool_real_array_destroy,
        _dart_godot_pool_real_array_destroy>('godot_pool_real_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_real_array_destroy? _godot_pool_real_array_destroy;

  void godot_pool_string_array_new(
    ffi.Pointer<godot_pool_string_array> r_dest,
  ) {
    return (_godot_pool_string_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_new,
        _dart_godot_pool_string_array_new>('godot_pool_string_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_string_array_new? _godot_pool_string_array_new;

  void godot_pool_string_array_new_copy(
    ffi.Pointer<godot_pool_string_array> r_dest,
    ffi.Pointer<godot_pool_string_array> p_src,
  ) {
    return (_godot_pool_string_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_new_copy,
            _dart_godot_pool_string_array_new_copy>(
        'godot_pool_string_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_string_array_new_copy? _godot_pool_string_array_new_copy;

  void godot_pool_string_array_new_with_array(
    ffi.Pointer<godot_pool_string_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_string_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_new_with_array,
            _dart_godot_pool_string_array_new_with_array>(
        'godot_pool_string_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_string_array_new_with_array?
      _godot_pool_string_array_new_with_array;

  void godot_pool_string_array_append(
    ffi.Pointer<godot_pool_string_array> p_self,
    ffi.Pointer<godot_string> p_data,
  ) {
    return (_godot_pool_string_array_append ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_append,
            _dart_godot_pool_string_array_append>(
        'godot_pool_string_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_string_array_append? _godot_pool_string_array_append;

  void godot_pool_string_array_append_array(
    ffi.Pointer<godot_pool_string_array> p_self,
    ffi.Pointer<godot_pool_string_array> p_array,
  ) {
    return (_godot_pool_string_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_append_array,
            _dart_godot_pool_string_array_append_array>(
        'godot_pool_string_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_string_array_append_array?
      _godot_pool_string_array_append_array;

  int godot_pool_string_array_insert(
    ffi.Pointer<godot_pool_string_array> p_self,
    int p_idx,
    ffi.Pointer<godot_string> p_data,
  ) {
    return (_godot_pool_string_array_insert ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_insert,
            _dart_godot_pool_string_array_insert>(
        'godot_pool_string_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_string_array_insert? _godot_pool_string_array_insert;

  void godot_pool_string_array_invert(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_invert ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_invert,
            _dart_godot_pool_string_array_invert>(
        'godot_pool_string_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_string_array_invert? _godot_pool_string_array_invert;

  void godot_pool_string_array_push_back(
    ffi.Pointer<godot_pool_string_array> p_self,
    ffi.Pointer<godot_string> p_data,
  ) {
    return (_godot_pool_string_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_push_back,
            _dart_godot_pool_string_array_push_back>(
        'godot_pool_string_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_string_array_push_back? _godot_pool_string_array_push_back;

  void godot_pool_string_array_remove(
    ffi.Pointer<godot_pool_string_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_string_array_remove ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_remove,
            _dart_godot_pool_string_array_remove>(
        'godot_pool_string_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_string_array_remove? _godot_pool_string_array_remove;

  void godot_pool_string_array_resize(
    ffi.Pointer<godot_pool_string_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_string_array_resize ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_resize,
            _dart_godot_pool_string_array_resize>(
        'godot_pool_string_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_string_array_resize? _godot_pool_string_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_string_array_read(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_read,
        _dart_godot_pool_string_array_read>('godot_pool_string_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_string_array_read? _godot_pool_string_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_string_array_write(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_write ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_write,
        _dart_godot_pool_string_array_write>('godot_pool_string_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_string_array_write? _godot_pool_string_array_write;

  void godot_pool_string_array_set(
    ffi.Pointer<godot_pool_string_array> p_self,
    int p_idx,
    ffi.Pointer<godot_string> p_data,
  ) {
    return (_godot_pool_string_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_set,
        _dart_godot_pool_string_array_set>('godot_pool_string_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_string_array_set? _godot_pool_string_array_set;

  godot_string godot_pool_string_array_get(
    ffi.Pointer<godot_pool_string_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_string_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_get,
        _dart_godot_pool_string_array_get>('godot_pool_string_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_string_array_get? _godot_pool_string_array_get;

  int godot_pool_string_array_size(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_string_array_size,
        _dart_godot_pool_string_array_size>('godot_pool_string_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_string_array_size? _godot_pool_string_array_size;

  bool godot_pool_string_array_empty(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_empty ??= _dylib.lookupFunction<
                _c_godot_pool_string_array_empty,
                _dart_godot_pool_string_array_empty>(
            'godot_pool_string_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_string_array_empty? _godot_pool_string_array_empty;

  void godot_pool_string_array_destroy(
    ffi.Pointer<godot_pool_string_array> p_self,
  ) {
    return (_godot_pool_string_array_destroy ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_destroy,
            _dart_godot_pool_string_array_destroy>(
        'godot_pool_string_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_string_array_destroy? _godot_pool_string_array_destroy;

  void godot_pool_vector2_array_new(
    ffi.Pointer<godot_pool_vector2_array> r_dest,
  ) {
    return (_godot_pool_vector2_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_vector2_array_new,
        _dart_godot_pool_vector2_array_new>('godot_pool_vector2_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_vector2_array_new? _godot_pool_vector2_array_new;

  void godot_pool_vector2_array_new_copy(
    ffi.Pointer<godot_pool_vector2_array> r_dest,
    ffi.Pointer<godot_pool_vector2_array> p_src,
  ) {
    return (_godot_pool_vector2_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_new_copy,
            _dart_godot_pool_vector2_array_new_copy>(
        'godot_pool_vector2_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_vector2_array_new_copy? _godot_pool_vector2_array_new_copy;

  void godot_pool_vector2_array_new_with_array(
    ffi.Pointer<godot_pool_vector2_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_vector2_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_new_with_array,
            _dart_godot_pool_vector2_array_new_with_array>(
        'godot_pool_vector2_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_vector2_array_new_with_array?
      _godot_pool_vector2_array_new_with_array;

  void godot_pool_vector2_array_append(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    ffi.Pointer<godot_vector2> p_data,
  ) {
    return (_godot_pool_vector2_array_append ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_append,
            _dart_godot_pool_vector2_array_append>(
        'godot_pool_vector2_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_vector2_array_append? _godot_pool_vector2_array_append;

  void godot_pool_vector2_array_append_array(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    ffi.Pointer<godot_pool_vector2_array> p_array,
  ) {
    return (_godot_pool_vector2_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_append_array,
            _dart_godot_pool_vector2_array_append_array>(
        'godot_pool_vector2_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_vector2_array_append_array?
      _godot_pool_vector2_array_append_array;

  int godot_pool_vector2_array_insert(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    int p_idx,
    ffi.Pointer<godot_vector2> p_data,
  ) {
    return (_godot_pool_vector2_array_insert ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_insert,
            _dart_godot_pool_vector2_array_insert>(
        'godot_pool_vector2_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_vector2_array_insert? _godot_pool_vector2_array_insert;

  void godot_pool_vector2_array_invert(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_invert ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_invert,
            _dart_godot_pool_vector2_array_invert>(
        'godot_pool_vector2_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_vector2_array_invert? _godot_pool_vector2_array_invert;

  void godot_pool_vector2_array_push_back(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    ffi.Pointer<godot_vector2> p_data,
  ) {
    return (_godot_pool_vector2_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_push_back,
            _dart_godot_pool_vector2_array_push_back>(
        'godot_pool_vector2_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_vector2_array_push_back? _godot_pool_vector2_array_push_back;

  void godot_pool_vector2_array_remove(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_vector2_array_remove ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_remove,
            _dart_godot_pool_vector2_array_remove>(
        'godot_pool_vector2_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_vector2_array_remove? _godot_pool_vector2_array_remove;

  void godot_pool_vector2_array_resize(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_vector2_array_resize ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_resize,
            _dart_godot_pool_vector2_array_resize>(
        'godot_pool_vector2_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_vector2_array_resize? _godot_pool_vector2_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_vector2_array_read(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_vector2_array_read,
        _dart_godot_pool_vector2_array_read>('godot_pool_vector2_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_vector2_array_read? _godot_pool_vector2_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_vector2_array_write(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_write ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_write,
            _dart_godot_pool_vector2_array_write>(
        'godot_pool_vector2_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_vector2_array_write? _godot_pool_vector2_array_write;

  void godot_pool_vector2_array_set(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    int p_idx,
    ffi.Pointer<godot_vector2> p_data,
  ) {
    return (_godot_pool_vector2_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_vector2_array_set,
        _dart_godot_pool_vector2_array_set>('godot_pool_vector2_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_vector2_array_set? _godot_pool_vector2_array_set;

  godot_vector2 godot_pool_vector2_array_get(
    ffi.Pointer<godot_pool_vector2_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_vector2_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_vector2_array_get,
        _dart_godot_pool_vector2_array_get>('godot_pool_vector2_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_vector2_array_get? _godot_pool_vector2_array_get;

  int godot_pool_vector2_array_size(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_vector2_array_size,
        _dart_godot_pool_vector2_array_size>('godot_pool_vector2_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_vector2_array_size? _godot_pool_vector2_array_size;

  bool godot_pool_vector2_array_empty(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_empty ??= _dylib.lookupFunction<
                _c_godot_pool_vector2_array_empty,
                _dart_godot_pool_vector2_array_empty>(
            'godot_pool_vector2_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_vector2_array_empty? _godot_pool_vector2_array_empty;

  void godot_pool_vector2_array_destroy(
    ffi.Pointer<godot_pool_vector2_array> p_self,
  ) {
    return (_godot_pool_vector2_array_destroy ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_destroy,
            _dart_godot_pool_vector2_array_destroy>(
        'godot_pool_vector2_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_vector2_array_destroy? _godot_pool_vector2_array_destroy;

  void godot_pool_vector3_array_new(
    ffi.Pointer<godot_pool_vector3_array> r_dest,
  ) {
    return (_godot_pool_vector3_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_vector3_array_new,
        _dart_godot_pool_vector3_array_new>('godot_pool_vector3_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_vector3_array_new? _godot_pool_vector3_array_new;

  void godot_pool_vector3_array_new_copy(
    ffi.Pointer<godot_pool_vector3_array> r_dest,
    ffi.Pointer<godot_pool_vector3_array> p_src,
  ) {
    return (_godot_pool_vector3_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_new_copy,
            _dart_godot_pool_vector3_array_new_copy>(
        'godot_pool_vector3_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_vector3_array_new_copy? _godot_pool_vector3_array_new_copy;

  void godot_pool_vector3_array_new_with_array(
    ffi.Pointer<godot_pool_vector3_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_vector3_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_new_with_array,
            _dart_godot_pool_vector3_array_new_with_array>(
        'godot_pool_vector3_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_vector3_array_new_with_array?
      _godot_pool_vector3_array_new_with_array;

  void godot_pool_vector3_array_append(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    ffi.Pointer<godot_vector3> p_data,
  ) {
    return (_godot_pool_vector3_array_append ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_append,
            _dart_godot_pool_vector3_array_append>(
        'godot_pool_vector3_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_vector3_array_append? _godot_pool_vector3_array_append;

  void godot_pool_vector3_array_append_array(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    ffi.Pointer<godot_pool_vector3_array> p_array,
  ) {
    return (_godot_pool_vector3_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_append_array,
            _dart_godot_pool_vector3_array_append_array>(
        'godot_pool_vector3_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_vector3_array_append_array?
      _godot_pool_vector3_array_append_array;

  int godot_pool_vector3_array_insert(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    int p_idx,
    ffi.Pointer<godot_vector3> p_data,
  ) {
    return (_godot_pool_vector3_array_insert ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_insert,
            _dart_godot_pool_vector3_array_insert>(
        'godot_pool_vector3_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_vector3_array_insert? _godot_pool_vector3_array_insert;

  void godot_pool_vector3_array_invert(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_invert ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_invert,
            _dart_godot_pool_vector3_array_invert>(
        'godot_pool_vector3_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_vector3_array_invert? _godot_pool_vector3_array_invert;

  void godot_pool_vector3_array_push_back(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    ffi.Pointer<godot_vector3> p_data,
  ) {
    return (_godot_pool_vector3_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_push_back,
            _dart_godot_pool_vector3_array_push_back>(
        'godot_pool_vector3_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_vector3_array_push_back? _godot_pool_vector3_array_push_back;

  void godot_pool_vector3_array_remove(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_vector3_array_remove ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_remove,
            _dart_godot_pool_vector3_array_remove>(
        'godot_pool_vector3_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_vector3_array_remove? _godot_pool_vector3_array_remove;

  void godot_pool_vector3_array_resize(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_vector3_array_resize ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_resize,
            _dart_godot_pool_vector3_array_resize>(
        'godot_pool_vector3_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_vector3_array_resize? _godot_pool_vector3_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_vector3_array_read(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_vector3_array_read,
        _dart_godot_pool_vector3_array_read>('godot_pool_vector3_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_vector3_array_read? _godot_pool_vector3_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_vector3_array_write(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_write ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_write,
            _dart_godot_pool_vector3_array_write>(
        'godot_pool_vector3_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_vector3_array_write? _godot_pool_vector3_array_write;

  void godot_pool_vector3_array_set(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    int p_idx,
    ffi.Pointer<godot_vector3> p_data,
  ) {
    return (_godot_pool_vector3_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_vector3_array_set,
        _dart_godot_pool_vector3_array_set>('godot_pool_vector3_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_vector3_array_set? _godot_pool_vector3_array_set;

  godot_vector3 godot_pool_vector3_array_get(
    ffi.Pointer<godot_pool_vector3_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_vector3_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_vector3_array_get,
        _dart_godot_pool_vector3_array_get>('godot_pool_vector3_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_vector3_array_get? _godot_pool_vector3_array_get;

  int godot_pool_vector3_array_size(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_vector3_array_size,
        _dart_godot_pool_vector3_array_size>('godot_pool_vector3_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_vector3_array_size? _godot_pool_vector3_array_size;

  bool godot_pool_vector3_array_empty(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_empty ??= _dylib.lookupFunction<
                _c_godot_pool_vector3_array_empty,
                _dart_godot_pool_vector3_array_empty>(
            'godot_pool_vector3_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_vector3_array_empty? _godot_pool_vector3_array_empty;

  void godot_pool_vector3_array_destroy(
    ffi.Pointer<godot_pool_vector3_array> p_self,
  ) {
    return (_godot_pool_vector3_array_destroy ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_destroy,
            _dart_godot_pool_vector3_array_destroy>(
        'godot_pool_vector3_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_vector3_array_destroy? _godot_pool_vector3_array_destroy;

  void godot_pool_color_array_new(
    ffi.Pointer<godot_pool_color_array> r_dest,
  ) {
    return (_godot_pool_color_array_new ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_new,
        _dart_godot_pool_color_array_new>('godot_pool_color_array_new'))(
      r_dest,
    );
  }

  _dart_godot_pool_color_array_new? _godot_pool_color_array_new;

  void godot_pool_color_array_new_copy(
    ffi.Pointer<godot_pool_color_array> r_dest,
    ffi.Pointer<godot_pool_color_array> p_src,
  ) {
    return (_godot_pool_color_array_new_copy ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_new_copy,
            _dart_godot_pool_color_array_new_copy>(
        'godot_pool_color_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_pool_color_array_new_copy? _godot_pool_color_array_new_copy;

  void godot_pool_color_array_new_with_array(
    ffi.Pointer<godot_pool_color_array> r_dest,
    ffi.Pointer<godot_array> p_a,
  ) {
    return (_godot_pool_color_array_new_with_array ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_new_with_array,
            _dart_godot_pool_color_array_new_with_array>(
        'godot_pool_color_array_new_with_array'))(
      r_dest,
      p_a,
    );
  }

  _dart_godot_pool_color_array_new_with_array?
      _godot_pool_color_array_new_with_array;

  void godot_pool_color_array_append(
    ffi.Pointer<godot_pool_color_array> p_self,
    ffi.Pointer<godot_color> p_data,
  ) {
    return (_godot_pool_color_array_append ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_append,
        _dart_godot_pool_color_array_append>('godot_pool_color_array_append'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_color_array_append? _godot_pool_color_array_append;

  void godot_pool_color_array_append_array(
    ffi.Pointer<godot_pool_color_array> p_self,
    ffi.Pointer<godot_pool_color_array> p_array,
  ) {
    return (_godot_pool_color_array_append_array ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_append_array,
            _dart_godot_pool_color_array_append_array>(
        'godot_pool_color_array_append_array'))(
      p_self,
      p_array,
    );
  }

  _dart_godot_pool_color_array_append_array?
      _godot_pool_color_array_append_array;

  int godot_pool_color_array_insert(
    ffi.Pointer<godot_pool_color_array> p_self,
    int p_idx,
    ffi.Pointer<godot_color> p_data,
  ) {
    return (_godot_pool_color_array_insert ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_insert,
        _dart_godot_pool_color_array_insert>('godot_pool_color_array_insert'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_color_array_insert? _godot_pool_color_array_insert;

  void godot_pool_color_array_invert(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_invert ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_invert,
        _dart_godot_pool_color_array_invert>('godot_pool_color_array_invert'))(
      p_self,
    );
  }

  _dart_godot_pool_color_array_invert? _godot_pool_color_array_invert;

  void godot_pool_color_array_push_back(
    ffi.Pointer<godot_pool_color_array> p_self,
    ffi.Pointer<godot_color> p_data,
  ) {
    return (_godot_pool_color_array_push_back ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_push_back,
            _dart_godot_pool_color_array_push_back>(
        'godot_pool_color_array_push_back'))(
      p_self,
      p_data,
    );
  }

  _dart_godot_pool_color_array_push_back? _godot_pool_color_array_push_back;

  void godot_pool_color_array_remove(
    ffi.Pointer<godot_pool_color_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_color_array_remove ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_remove,
        _dart_godot_pool_color_array_remove>('godot_pool_color_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_color_array_remove? _godot_pool_color_array_remove;

  void godot_pool_color_array_resize(
    ffi.Pointer<godot_pool_color_array> p_self,
    int p_size,
  ) {
    return (_godot_pool_color_array_resize ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_resize,
        _dart_godot_pool_color_array_resize>('godot_pool_color_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_pool_color_array_resize? _godot_pool_color_array_resize;

  ffi.Pointer<godot_pool_array_read_access> godot_pool_color_array_read(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_read ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_read,
        _dart_godot_pool_color_array_read>('godot_pool_color_array_read'))(
      p_self,
    );
  }

  _dart_godot_pool_color_array_read? _godot_pool_color_array_read;

  ffi.Pointer<godot_pool_array_write_access> godot_pool_color_array_write(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_write ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_write,
        _dart_godot_pool_color_array_write>('godot_pool_color_array_write'))(
      p_self,
    );
  }

  _dart_godot_pool_color_array_write? _godot_pool_color_array_write;

  void godot_pool_color_array_set(
    ffi.Pointer<godot_pool_color_array> p_self,
    int p_idx,
    ffi.Pointer<godot_color> p_data,
  ) {
    return (_godot_pool_color_array_set ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_set,
        _dart_godot_pool_color_array_set>('godot_pool_color_array_set'))(
      p_self,
      p_idx,
      p_data,
    );
  }

  _dart_godot_pool_color_array_set? _godot_pool_color_array_set;

  godot_color godot_pool_color_array_get(
    ffi.Pointer<godot_pool_color_array> p_self,
    int p_idx,
  ) {
    return (_godot_pool_color_array_get ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_get,
        _dart_godot_pool_color_array_get>('godot_pool_color_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_pool_color_array_get? _godot_pool_color_array_get;

  int godot_pool_color_array_size(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_size ??= _dylib.lookupFunction<
        _c_godot_pool_color_array_size,
        _dart_godot_pool_color_array_size>('godot_pool_color_array_size'))(
      p_self,
    );
  }

  _dart_godot_pool_color_array_size? _godot_pool_color_array_size;

  bool godot_pool_color_array_empty(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_empty ??= _dylib.lookupFunction<
                _c_godot_pool_color_array_empty,
                _dart_godot_pool_color_array_empty>(
            'godot_pool_color_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_pool_color_array_empty? _godot_pool_color_array_empty;

  void godot_pool_color_array_destroy(
    ffi.Pointer<godot_pool_color_array> p_self,
  ) {
    return (_godot_pool_color_array_destroy ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_destroy,
            _dart_godot_pool_color_array_destroy>(
        'godot_pool_color_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_pool_color_array_destroy? _godot_pool_color_array_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_byte_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_byte_array_read_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_read_access_copy,
            _dart_godot_pool_byte_array_read_access_copy>(
        'godot_pool_byte_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_byte_array_read_access_copy?
      _godot_pool_byte_array_read_access_copy;

  ffi.Pointer<ffi.Uint8> godot_pool_byte_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_byte_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_read_access_ptr,
            _dart_godot_pool_byte_array_read_access_ptr>(
        'godot_pool_byte_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_byte_array_read_access_ptr?
      _godot_pool_byte_array_read_access_ptr;

  void godot_pool_byte_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_byte_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_byte_array_read_access_operator_assign,
                _dart_godot_pool_byte_array_read_access_operator_assign>(
            'godot_pool_byte_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_byte_array_read_access_operator_assign?
      _godot_pool_byte_array_read_access_operator_assign;

  void godot_pool_byte_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_byte_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_byte_array_read_access_destroy,
                _dart_godot_pool_byte_array_read_access_destroy>(
            'godot_pool_byte_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_byte_array_read_access_destroy?
      _godot_pool_byte_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_int_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_int_array_read_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_read_access_copy,
            _dart_godot_pool_int_array_read_access_copy>(
        'godot_pool_int_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_int_array_read_access_copy?
      _godot_pool_int_array_read_access_copy;

  ffi.Pointer<ffi.Int32> godot_pool_int_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_int_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_read_access_ptr,
            _dart_godot_pool_int_array_read_access_ptr>(
        'godot_pool_int_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_int_array_read_access_ptr?
      _godot_pool_int_array_read_access_ptr;

  void godot_pool_int_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_int_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_int_array_read_access_operator_assign,
                _dart_godot_pool_int_array_read_access_operator_assign>(
            'godot_pool_int_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_int_array_read_access_operator_assign?
      _godot_pool_int_array_read_access_operator_assign;

  void godot_pool_int_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_int_array_read_access_destroy ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_read_access_destroy,
            _dart_godot_pool_int_array_read_access_destroy>(
        'godot_pool_int_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_int_array_read_access_destroy?
      _godot_pool_int_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_real_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_real_array_read_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_read_access_copy,
            _dart_godot_pool_real_array_read_access_copy>(
        'godot_pool_real_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_real_array_read_access_copy?
      _godot_pool_real_array_read_access_copy;

  ffi.Pointer<ffi.Float> godot_pool_real_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_real_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_read_access_ptr,
            _dart_godot_pool_real_array_read_access_ptr>(
        'godot_pool_real_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_real_array_read_access_ptr?
      _godot_pool_real_array_read_access_ptr;

  void godot_pool_real_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_real_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_real_array_read_access_operator_assign,
                _dart_godot_pool_real_array_read_access_operator_assign>(
            'godot_pool_real_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_real_array_read_access_operator_assign?
      _godot_pool_real_array_read_access_operator_assign;

  void godot_pool_real_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_real_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_real_array_read_access_destroy,
                _dart_godot_pool_real_array_read_access_destroy>(
            'godot_pool_real_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_real_array_read_access_destroy?
      _godot_pool_real_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_string_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_string_array_read_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_read_access_copy,
            _dart_godot_pool_string_array_read_access_copy>(
        'godot_pool_string_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_string_array_read_access_copy?
      _godot_pool_string_array_read_access_copy;

  ffi.Pointer<godot_string> godot_pool_string_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_string_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_read_access_ptr,
            _dart_godot_pool_string_array_read_access_ptr>(
        'godot_pool_string_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_string_array_read_access_ptr?
      _godot_pool_string_array_read_access_ptr;

  void godot_pool_string_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_string_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_string_array_read_access_operator_assign,
                _dart_godot_pool_string_array_read_access_operator_assign>(
            'godot_pool_string_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_string_array_read_access_operator_assign?
      _godot_pool_string_array_read_access_operator_assign;

  void godot_pool_string_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_string_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_string_array_read_access_destroy,
                _dart_godot_pool_string_array_read_access_destroy>(
            'godot_pool_string_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_string_array_read_access_destroy?
      _godot_pool_string_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_vector2_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_vector2_array_read_access_copy ??=
        _dylib.lookupFunction<_c_godot_pool_vector2_array_read_access_copy,
                _dart_godot_pool_vector2_array_read_access_copy>(
            'godot_pool_vector2_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_vector2_array_read_access_copy?
      _godot_pool_vector2_array_read_access_copy;

  ffi.Pointer<godot_vector2> godot_pool_vector2_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_vector2_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_vector2_array_read_access_ptr,
            _dart_godot_pool_vector2_array_read_access_ptr>(
        'godot_pool_vector2_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_vector2_array_read_access_ptr?
      _godot_pool_vector2_array_read_access_ptr;

  void godot_pool_vector2_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_vector2_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_vector2_array_read_access_operator_assign,
                _dart_godot_pool_vector2_array_read_access_operator_assign>(
            'godot_pool_vector2_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_vector2_array_read_access_operator_assign?
      _godot_pool_vector2_array_read_access_operator_assign;

  void godot_pool_vector2_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_vector2_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_vector2_array_read_access_destroy,
                _dart_godot_pool_vector2_array_read_access_destroy>(
            'godot_pool_vector2_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_vector2_array_read_access_destroy?
      _godot_pool_vector2_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_vector3_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_vector3_array_read_access_copy ??=
        _dylib.lookupFunction<_c_godot_pool_vector3_array_read_access_copy,
                _dart_godot_pool_vector3_array_read_access_copy>(
            'godot_pool_vector3_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_vector3_array_read_access_copy?
      _godot_pool_vector3_array_read_access_copy;

  ffi.Pointer<godot_vector3> godot_pool_vector3_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_vector3_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_vector3_array_read_access_ptr,
            _dart_godot_pool_vector3_array_read_access_ptr>(
        'godot_pool_vector3_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_vector3_array_read_access_ptr?
      _godot_pool_vector3_array_read_access_ptr;

  void godot_pool_vector3_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_vector3_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_vector3_array_read_access_operator_assign,
                _dart_godot_pool_vector3_array_read_access_operator_assign>(
            'godot_pool_vector3_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_vector3_array_read_access_operator_assign?
      _godot_pool_vector3_array_read_access_operator_assign;

  void godot_pool_vector3_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_vector3_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_vector3_array_read_access_destroy,
                _dart_godot_pool_vector3_array_read_access_destroy>(
            'godot_pool_vector3_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_vector3_array_read_access_destroy?
      _godot_pool_vector3_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_read_access>
      godot_pool_color_array_read_access_copy(
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_color_array_read_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_read_access_copy,
            _dart_godot_pool_color_array_read_access_copy>(
        'godot_pool_color_array_read_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_color_array_read_access_copy?
      _godot_pool_color_array_read_access_copy;

  ffi.Pointer<godot_color> godot_pool_color_array_read_access_ptr(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_color_array_read_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_read_access_ptr,
            _dart_godot_pool_color_array_read_access_ptr>(
        'godot_pool_color_array_read_access_ptr'))(
      p_read,
    );
  }

  _dart_godot_pool_color_array_read_access_ptr?
      _godot_pool_color_array_read_access_ptr;

  void godot_pool_color_array_read_access_operator_assign(
    ffi.Pointer<godot_pool_array_read_access> p_read,
    ffi.Pointer<godot_pool_array_read_access> p_other,
  ) {
    return (_godot_pool_color_array_read_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_color_array_read_access_operator_assign,
                _dart_godot_pool_color_array_read_access_operator_assign>(
            'godot_pool_color_array_read_access_operator_assign'))(
      p_read,
      p_other,
    );
  }

  _dart_godot_pool_color_array_read_access_operator_assign?
      _godot_pool_color_array_read_access_operator_assign;

  void godot_pool_color_array_read_access_destroy(
    ffi.Pointer<godot_pool_array_read_access> p_read,
  ) {
    return (_godot_pool_color_array_read_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_color_array_read_access_destroy,
                _dart_godot_pool_color_array_read_access_destroy>(
            'godot_pool_color_array_read_access_destroy'))(
      p_read,
    );
  }

  _dart_godot_pool_color_array_read_access_destroy?
      _godot_pool_color_array_read_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_byte_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_byte_array_write_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_write_access_copy,
            _dart_godot_pool_byte_array_write_access_copy>(
        'godot_pool_byte_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_byte_array_write_access_copy?
      _godot_pool_byte_array_write_access_copy;

  ffi.Pointer<ffi.Uint8> godot_pool_byte_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_byte_array_write_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_byte_array_write_access_ptr,
            _dart_godot_pool_byte_array_write_access_ptr>(
        'godot_pool_byte_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_byte_array_write_access_ptr?
      _godot_pool_byte_array_write_access_ptr;

  void godot_pool_byte_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_byte_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_byte_array_write_access_operator_assign,
                _dart_godot_pool_byte_array_write_access_operator_assign>(
            'godot_pool_byte_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_byte_array_write_access_operator_assign?
      _godot_pool_byte_array_write_access_operator_assign;

  void godot_pool_byte_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_byte_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_byte_array_write_access_destroy,
                _dart_godot_pool_byte_array_write_access_destroy>(
            'godot_pool_byte_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_byte_array_write_access_destroy?
      _godot_pool_byte_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_int_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_int_array_write_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_write_access_copy,
            _dart_godot_pool_int_array_write_access_copy>(
        'godot_pool_int_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_int_array_write_access_copy?
      _godot_pool_int_array_write_access_copy;

  ffi.Pointer<ffi.Int32> godot_pool_int_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_int_array_write_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_int_array_write_access_ptr,
            _dart_godot_pool_int_array_write_access_ptr>(
        'godot_pool_int_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_int_array_write_access_ptr?
      _godot_pool_int_array_write_access_ptr;

  void godot_pool_int_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_int_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_int_array_write_access_operator_assign,
                _dart_godot_pool_int_array_write_access_operator_assign>(
            'godot_pool_int_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_int_array_write_access_operator_assign?
      _godot_pool_int_array_write_access_operator_assign;

  void godot_pool_int_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_int_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_int_array_write_access_destroy,
                _dart_godot_pool_int_array_write_access_destroy>(
            'godot_pool_int_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_int_array_write_access_destroy?
      _godot_pool_int_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_real_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_real_array_write_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_write_access_copy,
            _dart_godot_pool_real_array_write_access_copy>(
        'godot_pool_real_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_real_array_write_access_copy?
      _godot_pool_real_array_write_access_copy;

  ffi.Pointer<ffi.Float> godot_pool_real_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_real_array_write_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_real_array_write_access_ptr,
            _dart_godot_pool_real_array_write_access_ptr>(
        'godot_pool_real_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_real_array_write_access_ptr?
      _godot_pool_real_array_write_access_ptr;

  void godot_pool_real_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_real_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_real_array_write_access_operator_assign,
                _dart_godot_pool_real_array_write_access_operator_assign>(
            'godot_pool_real_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_real_array_write_access_operator_assign?
      _godot_pool_real_array_write_access_operator_assign;

  void godot_pool_real_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_real_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_real_array_write_access_destroy,
                _dart_godot_pool_real_array_write_access_destroy>(
            'godot_pool_real_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_real_array_write_access_destroy?
      _godot_pool_real_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_string_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_string_array_write_access_copy ??=
        _dylib.lookupFunction<_c_godot_pool_string_array_write_access_copy,
                _dart_godot_pool_string_array_write_access_copy>(
            'godot_pool_string_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_string_array_write_access_copy?
      _godot_pool_string_array_write_access_copy;

  ffi.Pointer<godot_string> godot_pool_string_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_string_array_write_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_string_array_write_access_ptr,
            _dart_godot_pool_string_array_write_access_ptr>(
        'godot_pool_string_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_string_array_write_access_ptr?
      _godot_pool_string_array_write_access_ptr;

  void godot_pool_string_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_string_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_string_array_write_access_operator_assign,
                _dart_godot_pool_string_array_write_access_operator_assign>(
            'godot_pool_string_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_string_array_write_access_operator_assign?
      _godot_pool_string_array_write_access_operator_assign;

  void godot_pool_string_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_string_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_string_array_write_access_destroy,
                _dart_godot_pool_string_array_write_access_destroy>(
            'godot_pool_string_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_string_array_write_access_destroy?
      _godot_pool_string_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_vector2_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_vector2_array_write_access_copy ??=
        _dylib.lookupFunction<_c_godot_pool_vector2_array_write_access_copy,
                _dart_godot_pool_vector2_array_write_access_copy>(
            'godot_pool_vector2_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_vector2_array_write_access_copy?
      _godot_pool_vector2_array_write_access_copy;

  ffi.Pointer<godot_vector2> godot_pool_vector2_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_vector2_array_write_access_ptr ??=
        _dylib.lookupFunction<_c_godot_pool_vector2_array_write_access_ptr,
                _dart_godot_pool_vector2_array_write_access_ptr>(
            'godot_pool_vector2_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_vector2_array_write_access_ptr?
      _godot_pool_vector2_array_write_access_ptr;

  void godot_pool_vector2_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_vector2_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_vector2_array_write_access_operator_assign,
                _dart_godot_pool_vector2_array_write_access_operator_assign>(
            'godot_pool_vector2_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_vector2_array_write_access_operator_assign?
      _godot_pool_vector2_array_write_access_operator_assign;

  void godot_pool_vector2_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_vector2_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_vector2_array_write_access_destroy,
                _dart_godot_pool_vector2_array_write_access_destroy>(
            'godot_pool_vector2_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_vector2_array_write_access_destroy?
      _godot_pool_vector2_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_vector3_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_vector3_array_write_access_copy ??=
        _dylib.lookupFunction<_c_godot_pool_vector3_array_write_access_copy,
                _dart_godot_pool_vector3_array_write_access_copy>(
            'godot_pool_vector3_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_vector3_array_write_access_copy?
      _godot_pool_vector3_array_write_access_copy;

  ffi.Pointer<godot_vector3> godot_pool_vector3_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_vector3_array_write_access_ptr ??=
        _dylib.lookupFunction<_c_godot_pool_vector3_array_write_access_ptr,
                _dart_godot_pool_vector3_array_write_access_ptr>(
            'godot_pool_vector3_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_vector3_array_write_access_ptr?
      _godot_pool_vector3_array_write_access_ptr;

  void godot_pool_vector3_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_vector3_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_vector3_array_write_access_operator_assign,
                _dart_godot_pool_vector3_array_write_access_operator_assign>(
            'godot_pool_vector3_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_vector3_array_write_access_operator_assign?
      _godot_pool_vector3_array_write_access_operator_assign;

  void godot_pool_vector3_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_vector3_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_vector3_array_write_access_destroy,
                _dart_godot_pool_vector3_array_write_access_destroy>(
            'godot_pool_vector3_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_vector3_array_write_access_destroy?
      _godot_pool_vector3_array_write_access_destroy;

  ffi.Pointer<godot_pool_array_write_access>
      godot_pool_color_array_write_access_copy(
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_color_array_write_access_copy ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_write_access_copy,
            _dart_godot_pool_color_array_write_access_copy>(
        'godot_pool_color_array_write_access_copy'))(
      p_other,
    );
  }

  _dart_godot_pool_color_array_write_access_copy?
      _godot_pool_color_array_write_access_copy;

  ffi.Pointer<godot_color> godot_pool_color_array_write_access_ptr(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_color_array_write_access_ptr ??= _dylib.lookupFunction<
            _c_godot_pool_color_array_write_access_ptr,
            _dart_godot_pool_color_array_write_access_ptr>(
        'godot_pool_color_array_write_access_ptr'))(
      p_write,
    );
  }

  _dart_godot_pool_color_array_write_access_ptr?
      _godot_pool_color_array_write_access_ptr;

  void godot_pool_color_array_write_access_operator_assign(
    ffi.Pointer<godot_pool_array_write_access> p_write,
    ffi.Pointer<godot_pool_array_write_access> p_other,
  ) {
    return (_godot_pool_color_array_write_access_operator_assign ??=
        _dylib.lookupFunction<
                _c_godot_pool_color_array_write_access_operator_assign,
                _dart_godot_pool_color_array_write_access_operator_assign>(
            'godot_pool_color_array_write_access_operator_assign'))(
      p_write,
      p_other,
    );
  }

  _dart_godot_pool_color_array_write_access_operator_assign?
      _godot_pool_color_array_write_access_operator_assign;

  void godot_pool_color_array_write_access_destroy(
    ffi.Pointer<godot_pool_array_write_access> p_write,
  ) {
    return (_godot_pool_color_array_write_access_destroy ??=
        _dylib.lookupFunction<_c_godot_pool_color_array_write_access_destroy,
                _dart_godot_pool_color_array_write_access_destroy>(
            'godot_pool_color_array_write_access_destroy'))(
      p_write,
    );
  }

  _dart_godot_pool_color_array_write_access_destroy?
      _godot_pool_color_array_write_access_destroy;

  void godot_plane_new_with_reals(
    ffi.Pointer<godot_plane> r_dest,
    double p_a,
    double p_b,
    double p_c,
    double p_d,
  ) {
    return (_godot_plane_new_with_reals ??= _dylib.lookupFunction<
        _c_godot_plane_new_with_reals,
        _dart_godot_plane_new_with_reals>('godot_plane_new_with_reals'))(
      r_dest,
      p_a,
      p_b,
      p_c,
      p_d,
    );
  }

  _dart_godot_plane_new_with_reals? _godot_plane_new_with_reals;

  void godot_plane_new_with_vectors(
    ffi.Pointer<godot_plane> r_dest,
    ffi.Pointer<godot_vector3> p_v1,
    ffi.Pointer<godot_vector3> p_v2,
    ffi.Pointer<godot_vector3> p_v3,
  ) {
    return (_godot_plane_new_with_vectors ??= _dylib.lookupFunction<
        _c_godot_plane_new_with_vectors,
        _dart_godot_plane_new_with_vectors>('godot_plane_new_with_vectors'))(
      r_dest,
      p_v1,
      p_v2,
      p_v3,
    );
  }

  _dart_godot_plane_new_with_vectors? _godot_plane_new_with_vectors;

  void godot_plane_new_with_normal(
    ffi.Pointer<godot_plane> r_dest,
    ffi.Pointer<godot_vector3> p_normal,
    double p_d,
  ) {
    return (_godot_plane_new_with_normal ??= _dylib.lookupFunction<
        _c_godot_plane_new_with_normal,
        _dart_godot_plane_new_with_normal>('godot_plane_new_with_normal'))(
      r_dest,
      p_normal,
      p_d,
    );
  }

  _dart_godot_plane_new_with_normal? _godot_plane_new_with_normal;

  godot_string godot_plane_as_string(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_as_string ??= _dylib.lookupFunction<
        _c_godot_plane_as_string,
        _dart_godot_plane_as_string>('godot_plane_as_string'))(
      p_self,
    );
  }

  _dart_godot_plane_as_string? _godot_plane_as_string;

  godot_plane godot_plane_normalized(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_normalized ??= _dylib.lookupFunction<
        _c_godot_plane_normalized,
        _dart_godot_plane_normalized>('godot_plane_normalized'))(
      p_self,
    );
  }

  _dart_godot_plane_normalized? _godot_plane_normalized;

  godot_vector3 godot_plane_center(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_center ??=
        _dylib.lookupFunction<_c_godot_plane_center, _dart_godot_plane_center>(
            'godot_plane_center'))(
      p_self,
    );
  }

  _dart_godot_plane_center? _godot_plane_center;

  godot_vector3 godot_plane_get_any_point(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_get_any_point ??= _dylib.lookupFunction<
        _c_godot_plane_get_any_point,
        _dart_godot_plane_get_any_point>('godot_plane_get_any_point'))(
      p_self,
    );
  }

  _dart_godot_plane_get_any_point? _godot_plane_get_any_point;

  bool godot_plane_is_point_over(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> p_point,
  ) {
    return (_godot_plane_is_point_over ??= _dylib.lookupFunction<
            _c_godot_plane_is_point_over,
            _dart_godot_plane_is_point_over>('godot_plane_is_point_over'))(
          p_self,
          p_point,
        ) !=
        0;
  }

  _dart_godot_plane_is_point_over? _godot_plane_is_point_over;

  double godot_plane_distance_to(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> p_point,
  ) {
    return (_godot_plane_distance_to ??= _dylib.lookupFunction<
        _c_godot_plane_distance_to,
        _dart_godot_plane_distance_to>('godot_plane_distance_to'))(
      p_self,
      p_point,
    );
  }

  _dart_godot_plane_distance_to? _godot_plane_distance_to;

  bool godot_plane_has_point(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> p_point,
    double p_epsilon,
  ) {
    return (_godot_plane_has_point ??= _dylib.lookupFunction<
            _c_godot_plane_has_point,
            _dart_godot_plane_has_point>('godot_plane_has_point'))(
          p_self,
          p_point,
          p_epsilon,
        ) !=
        0;
  }

  _dart_godot_plane_has_point? _godot_plane_has_point;

  godot_vector3 godot_plane_project(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> p_point,
  ) {
    return (_godot_plane_project ??= _dylib.lookupFunction<
        _c_godot_plane_project,
        _dart_godot_plane_project>('godot_plane_project'))(
      p_self,
      p_point,
    );
  }

  _dart_godot_plane_project? _godot_plane_project;

  bool godot_plane_intersect_3(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> r_dest,
    ffi.Pointer<godot_plane> p_b,
    ffi.Pointer<godot_plane> p_c,
  ) {
    return (_godot_plane_intersect_3 ??= _dylib.lookupFunction<
            _c_godot_plane_intersect_3,
            _dart_godot_plane_intersect_3>('godot_plane_intersect_3'))(
          p_self,
          r_dest,
          p_b,
          p_c,
        ) !=
        0;
  }

  _dart_godot_plane_intersect_3? _godot_plane_intersect_3;

  bool godot_plane_intersects_ray(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> r_dest,
    ffi.Pointer<godot_vector3> p_from,
    ffi.Pointer<godot_vector3> p_dir,
  ) {
    return (_godot_plane_intersects_ray ??= _dylib.lookupFunction<
            _c_godot_plane_intersects_ray,
            _dart_godot_plane_intersects_ray>('godot_plane_intersects_ray'))(
          p_self,
          r_dest,
          p_from,
          p_dir,
        ) !=
        0;
  }

  _dart_godot_plane_intersects_ray? _godot_plane_intersects_ray;

  bool godot_plane_intersects_segment(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> r_dest,
    ffi.Pointer<godot_vector3> p_begin,
    ffi.Pointer<godot_vector3> p_end,
  ) {
    return (_godot_plane_intersects_segment ??= _dylib.lookupFunction<
                _c_godot_plane_intersects_segment,
                _dart_godot_plane_intersects_segment>(
            'godot_plane_intersects_segment'))(
          p_self,
          r_dest,
          p_begin,
          p_end,
        ) !=
        0;
  }

  _dart_godot_plane_intersects_segment? _godot_plane_intersects_segment;

  godot_plane godot_plane_operator_neg(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_operator_neg ??= _dylib.lookupFunction<
        _c_godot_plane_operator_neg,
        _dart_godot_plane_operator_neg>('godot_plane_operator_neg'))(
      p_self,
    );
  }

  _dart_godot_plane_operator_neg? _godot_plane_operator_neg;

  bool godot_plane_operator_equal(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_plane> p_b,
  ) {
    return (_godot_plane_operator_equal ??= _dylib.lookupFunction<
            _c_godot_plane_operator_equal,
            _dart_godot_plane_operator_equal>('godot_plane_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_plane_operator_equal? _godot_plane_operator_equal;

  void godot_plane_set_normal(
    ffi.Pointer<godot_plane> p_self,
    ffi.Pointer<godot_vector3> p_normal,
  ) {
    return (_godot_plane_set_normal ??= _dylib.lookupFunction<
        _c_godot_plane_set_normal,
        _dart_godot_plane_set_normal>('godot_plane_set_normal'))(
      p_self,
      p_normal,
    );
  }

  _dart_godot_plane_set_normal? _godot_plane_set_normal;

  godot_vector3 godot_plane_get_normal(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_get_normal ??= _dylib.lookupFunction<
        _c_godot_plane_get_normal,
        _dart_godot_plane_get_normal>('godot_plane_get_normal'))(
      p_self,
    );
  }

  _dart_godot_plane_get_normal? _godot_plane_get_normal;

  double godot_plane_get_d(
    ffi.Pointer<godot_plane> p_self,
  ) {
    return (_godot_plane_get_d ??=
        _dylib.lookupFunction<_c_godot_plane_get_d, _dart_godot_plane_get_d>(
            'godot_plane_get_d'))(
      p_self,
    );
  }

  _dart_godot_plane_get_d? _godot_plane_get_d;

  void godot_plane_set_d(
    ffi.Pointer<godot_plane> p_self,
    double p_d,
  ) {
    return (_godot_plane_set_d ??=
        _dylib.lookupFunction<_c_godot_plane_set_d, _dart_godot_plane_set_d>(
            'godot_plane_set_d'))(
      p_self,
      p_d,
    );
  }

  _dart_godot_plane_set_d? _godot_plane_set_d;

  void godot_aabb_new(
    ffi.Pointer<godot_aabb> r_dest,
    ffi.Pointer<godot_vector3> p_pos,
    ffi.Pointer<godot_vector3> p_size,
  ) {
    return (_godot_aabb_new ??=
        _dylib.lookupFunction<_c_godot_aabb_new, _dart_godot_aabb_new>(
            'godot_aabb_new'))(
      r_dest,
      p_pos,
      p_size,
    );
  }

  _dart_godot_aabb_new? _godot_aabb_new;

  godot_vector3 godot_aabb_get_position(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_position ??= _dylib.lookupFunction<
        _c_godot_aabb_get_position,
        _dart_godot_aabb_get_position>('godot_aabb_get_position'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_position? _godot_aabb_get_position;

  void godot_aabb_set_position(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_aabb_set_position ??= _dylib.lookupFunction<
        _c_godot_aabb_set_position,
        _dart_godot_aabb_set_position>('godot_aabb_set_position'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_aabb_set_position? _godot_aabb_set_position;

  godot_vector3 godot_aabb_get_size(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_size ??= _dylib.lookupFunction<
        _c_godot_aabb_get_size,
        _dart_godot_aabb_get_size>('godot_aabb_get_size'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_size? _godot_aabb_get_size;

  void godot_aabb_set_size(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_aabb_set_size ??= _dylib.lookupFunction<
        _c_godot_aabb_set_size,
        _dart_godot_aabb_set_size>('godot_aabb_set_size'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_aabb_set_size? _godot_aabb_set_size;

  godot_string godot_aabb_as_string(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_as_string ??= _dylib.lookupFunction<
        _c_godot_aabb_as_string,
        _dart_godot_aabb_as_string>('godot_aabb_as_string'))(
      p_self,
    );
  }

  _dart_godot_aabb_as_string? _godot_aabb_as_string;

  double godot_aabb_get_area(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_area ??= _dylib.lookupFunction<
        _c_godot_aabb_get_area,
        _dart_godot_aabb_get_area>('godot_aabb_get_area'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_area? _godot_aabb_get_area;

  bool godot_aabb_has_no_area(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_has_no_area ??= _dylib.lookupFunction<
            _c_godot_aabb_has_no_area,
            _dart_godot_aabb_has_no_area>('godot_aabb_has_no_area'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_aabb_has_no_area? _godot_aabb_has_no_area;

  bool godot_aabb_has_no_surface(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_has_no_surface ??= _dylib.lookupFunction<
            _c_godot_aabb_has_no_surface,
            _dart_godot_aabb_has_no_surface>('godot_aabb_has_no_surface'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_aabb_has_no_surface? _godot_aabb_has_no_surface;

  bool godot_aabb_intersects(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_aabb> p_with,
  ) {
    return (_godot_aabb_intersects ??= _dylib.lookupFunction<
            _c_godot_aabb_intersects,
            _dart_godot_aabb_intersects>('godot_aabb_intersects'))(
          p_self,
          p_with,
        ) !=
        0;
  }

  _dart_godot_aabb_intersects? _godot_aabb_intersects;

  bool godot_aabb_encloses(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_aabb> p_with,
  ) {
    return (_godot_aabb_encloses ??= _dylib.lookupFunction<
            _c_godot_aabb_encloses,
            _dart_godot_aabb_encloses>('godot_aabb_encloses'))(
          p_self,
          p_with,
        ) !=
        0;
  }

  _dart_godot_aabb_encloses? _godot_aabb_encloses;

  godot_aabb godot_aabb_merge(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_aabb> p_with,
  ) {
    return (_godot_aabb_merge ??=
        _dylib.lookupFunction<_c_godot_aabb_merge, _dart_godot_aabb_merge>(
            'godot_aabb_merge'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_aabb_merge? _godot_aabb_merge;

  godot_aabb godot_aabb_intersection(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_aabb> p_with,
  ) {
    return (_godot_aabb_intersection ??= _dylib.lookupFunction<
        _c_godot_aabb_intersection,
        _dart_godot_aabb_intersection>('godot_aabb_intersection'))(
      p_self,
      p_with,
    );
  }

  _dart_godot_aabb_intersection? _godot_aabb_intersection;

  bool godot_aabb_intersects_plane(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_plane> p_plane,
  ) {
    return (_godot_aabb_intersects_plane ??= _dylib.lookupFunction<
            _c_godot_aabb_intersects_plane,
            _dart_godot_aabb_intersects_plane>('godot_aabb_intersects_plane'))(
          p_self,
          p_plane,
        ) !=
        0;
  }

  _dart_godot_aabb_intersects_plane? _godot_aabb_intersects_plane;

  bool godot_aabb_intersects_segment(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_from,
    ffi.Pointer<godot_vector3> p_to,
  ) {
    return (_godot_aabb_intersects_segment ??= _dylib.lookupFunction<
                _c_godot_aabb_intersects_segment,
                _dart_godot_aabb_intersects_segment>(
            'godot_aabb_intersects_segment'))(
          p_self,
          p_from,
          p_to,
        ) !=
        0;
  }

  _dart_godot_aabb_intersects_segment? _godot_aabb_intersects_segment;

  bool godot_aabb_has_point(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_point,
  ) {
    return (_godot_aabb_has_point ??= _dylib.lookupFunction<
            _c_godot_aabb_has_point,
            _dart_godot_aabb_has_point>('godot_aabb_has_point'))(
          p_self,
          p_point,
        ) !=
        0;
  }

  _dart_godot_aabb_has_point? _godot_aabb_has_point;

  godot_vector3 godot_aabb_get_support(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_dir,
  ) {
    return (_godot_aabb_get_support ??= _dylib.lookupFunction<
        _c_godot_aabb_get_support,
        _dart_godot_aabb_get_support>('godot_aabb_get_support'))(
      p_self,
      p_dir,
    );
  }

  _dart_godot_aabb_get_support? _godot_aabb_get_support;

  godot_vector3 godot_aabb_get_longest_axis(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_longest_axis ??= _dylib.lookupFunction<
        _c_godot_aabb_get_longest_axis,
        _dart_godot_aabb_get_longest_axis>('godot_aabb_get_longest_axis'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_longest_axis? _godot_aabb_get_longest_axis;

  int godot_aabb_get_longest_axis_index(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_longest_axis_index ??= _dylib.lookupFunction<
            _c_godot_aabb_get_longest_axis_index,
            _dart_godot_aabb_get_longest_axis_index>(
        'godot_aabb_get_longest_axis_index'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_longest_axis_index? _godot_aabb_get_longest_axis_index;

  double godot_aabb_get_longest_axis_size(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_longest_axis_size ??= _dylib.lookupFunction<
            _c_godot_aabb_get_longest_axis_size,
            _dart_godot_aabb_get_longest_axis_size>(
        'godot_aabb_get_longest_axis_size'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_longest_axis_size? _godot_aabb_get_longest_axis_size;

  godot_vector3 godot_aabb_get_shortest_axis(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_shortest_axis ??= _dylib.lookupFunction<
        _c_godot_aabb_get_shortest_axis,
        _dart_godot_aabb_get_shortest_axis>('godot_aabb_get_shortest_axis'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_shortest_axis? _godot_aabb_get_shortest_axis;

  int godot_aabb_get_shortest_axis_index(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_shortest_axis_index ??= _dylib.lookupFunction<
            _c_godot_aabb_get_shortest_axis_index,
            _dart_godot_aabb_get_shortest_axis_index>(
        'godot_aabb_get_shortest_axis_index'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_shortest_axis_index? _godot_aabb_get_shortest_axis_index;

  double godot_aabb_get_shortest_axis_size(
    ffi.Pointer<godot_aabb> p_self,
  ) {
    return (_godot_aabb_get_shortest_axis_size ??= _dylib.lookupFunction<
            _c_godot_aabb_get_shortest_axis_size,
            _dart_godot_aabb_get_shortest_axis_size>(
        'godot_aabb_get_shortest_axis_size'))(
      p_self,
    );
  }

  _dart_godot_aabb_get_shortest_axis_size? _godot_aabb_get_shortest_axis_size;

  godot_aabb godot_aabb_expand(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_vector3> p_to_point,
  ) {
    return (_godot_aabb_expand ??=
        _dylib.lookupFunction<_c_godot_aabb_expand, _dart_godot_aabb_expand>(
            'godot_aabb_expand'))(
      p_self,
      p_to_point,
    );
  }

  _dart_godot_aabb_expand? _godot_aabb_expand;

  godot_aabb godot_aabb_grow(
    ffi.Pointer<godot_aabb> p_self,
    double p_by,
  ) {
    return (_godot_aabb_grow ??=
        _dylib.lookupFunction<_c_godot_aabb_grow, _dart_godot_aabb_grow>(
            'godot_aabb_grow'))(
      p_self,
      p_by,
    );
  }

  _dart_godot_aabb_grow? _godot_aabb_grow;

  godot_vector3 godot_aabb_get_endpoint(
    ffi.Pointer<godot_aabb> p_self,
    int p_idx,
  ) {
    return (_godot_aabb_get_endpoint ??= _dylib.lookupFunction<
        _c_godot_aabb_get_endpoint,
        _dart_godot_aabb_get_endpoint>('godot_aabb_get_endpoint'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_aabb_get_endpoint? _godot_aabb_get_endpoint;

  bool godot_aabb_operator_equal(
    ffi.Pointer<godot_aabb> p_self,
    ffi.Pointer<godot_aabb> p_b,
  ) {
    return (_godot_aabb_operator_equal ??= _dylib.lookupFunction<
            _c_godot_aabb_operator_equal,
            _dart_godot_aabb_operator_equal>('godot_aabb_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_aabb_operator_equal? _godot_aabb_operator_equal;

  void godot_dictionary_new(
    ffi.Pointer<godot_dictionary> r_dest,
  ) {
    return (_godot_dictionary_new ??= _dylib.lookupFunction<
        _c_godot_dictionary_new,
        _dart_godot_dictionary_new>('godot_dictionary_new'))(
      r_dest,
    );
  }

  _dart_godot_dictionary_new? _godot_dictionary_new;

  void godot_dictionary_new_copy(
    ffi.Pointer<godot_dictionary> r_dest,
    ffi.Pointer<godot_dictionary> p_src,
  ) {
    return (_godot_dictionary_new_copy ??= _dylib.lookupFunction<
        _c_godot_dictionary_new_copy,
        _dart_godot_dictionary_new_copy>('godot_dictionary_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_dictionary_new_copy? _godot_dictionary_new_copy;

  void godot_dictionary_destroy(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_destroy ??= _dylib.lookupFunction<
        _c_godot_dictionary_destroy,
        _dart_godot_dictionary_destroy>('godot_dictionary_destroy'))(
      p_self,
    );
  }

  _dart_godot_dictionary_destroy? _godot_dictionary_destroy;

  godot_dictionary godot_dictionary_duplicate(
    ffi.Pointer<godot_dictionary> p_self,
    bool p_deep,
  ) {
    return (_godot_dictionary_duplicate ??= _dylib.lookupFunction<
        _c_godot_dictionary_duplicate,
        _dart_godot_dictionary_duplicate>('godot_dictionary_duplicate'))(
      p_self,
      p_deep ? 1 : 0,
    );
  }

  _dart_godot_dictionary_duplicate? _godot_dictionary_duplicate;

  int godot_dictionary_size(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_size ??= _dylib.lookupFunction<
        _c_godot_dictionary_size,
        _dart_godot_dictionary_size>('godot_dictionary_size'))(
      p_self,
    );
  }

  _dart_godot_dictionary_size? _godot_dictionary_size;

  bool godot_dictionary_empty(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_empty ??= _dylib.lookupFunction<
            _c_godot_dictionary_empty,
            _dart_godot_dictionary_empty>('godot_dictionary_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_dictionary_empty? _godot_dictionary_empty;

  void godot_dictionary_clear(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_clear ??= _dylib.lookupFunction<
        _c_godot_dictionary_clear,
        _dart_godot_dictionary_clear>('godot_dictionary_clear'))(
      p_self,
    );
  }

  _dart_godot_dictionary_clear? _godot_dictionary_clear;

  bool godot_dictionary_has(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_has ??= _dylib.lookupFunction<
            _c_godot_dictionary_has,
            _dart_godot_dictionary_has>('godot_dictionary_has'))(
          p_self,
          p_key,
        ) !=
        0;
  }

  _dart_godot_dictionary_has? _godot_dictionary_has;

  bool godot_dictionary_has_all(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_array> p_keys,
  ) {
    return (_godot_dictionary_has_all ??= _dylib.lookupFunction<
            _c_godot_dictionary_has_all,
            _dart_godot_dictionary_has_all>('godot_dictionary_has_all'))(
          p_self,
          p_keys,
        ) !=
        0;
  }

  _dart_godot_dictionary_has_all? _godot_dictionary_has_all;

  void godot_dictionary_erase(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_erase ??= _dylib.lookupFunction<
        _c_godot_dictionary_erase,
        _dart_godot_dictionary_erase>('godot_dictionary_erase'))(
      p_self,
      p_key,
    );
  }

  _dart_godot_dictionary_erase? _godot_dictionary_erase;

  int godot_dictionary_hash(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_hash ??= _dylib.lookupFunction<
        _c_godot_dictionary_hash,
        _dart_godot_dictionary_hash>('godot_dictionary_hash'))(
      p_self,
    );
  }

  _dart_godot_dictionary_hash? _godot_dictionary_hash;

  godot_array godot_dictionary_keys(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_keys ??= _dylib.lookupFunction<
        _c_godot_dictionary_keys,
        _dart_godot_dictionary_keys>('godot_dictionary_keys'))(
      p_self,
    );
  }

  _dart_godot_dictionary_keys? _godot_dictionary_keys;

  godot_array godot_dictionary_values(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_values ??= _dylib.lookupFunction<
        _c_godot_dictionary_values,
        _dart_godot_dictionary_values>('godot_dictionary_values'))(
      p_self,
    );
  }

  _dart_godot_dictionary_values? _godot_dictionary_values;

  godot_variant godot_dictionary_get(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_get ??= _dylib.lookupFunction<
        _c_godot_dictionary_get,
        _dart_godot_dictionary_get>('godot_dictionary_get'))(
      p_self,
      p_key,
    );
  }

  _dart_godot_dictionary_get? _godot_dictionary_get;

  void godot_dictionary_set(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_dictionary_set ??= _dylib.lookupFunction<
        _c_godot_dictionary_set,
        _dart_godot_dictionary_set>('godot_dictionary_set'))(
      p_self,
      p_key,
      p_value,
    );
  }

  _dart_godot_dictionary_set? _godot_dictionary_set;

  ffi.Pointer<godot_variant> godot_dictionary_operator_index(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_operator_index ??= _dylib.lookupFunction<
            _c_godot_dictionary_operator_index,
            _dart_godot_dictionary_operator_index>(
        'godot_dictionary_operator_index'))(
      p_self,
      p_key,
    );
  }

  _dart_godot_dictionary_operator_index? _godot_dictionary_operator_index;

  ffi.Pointer<godot_variant> godot_dictionary_operator_index_const(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_operator_index_const ??= _dylib.lookupFunction<
            _c_godot_dictionary_operator_index_const,
            _dart_godot_dictionary_operator_index_const>(
        'godot_dictionary_operator_index_const'))(
      p_self,
      p_key,
    );
  }

  _dart_godot_dictionary_operator_index_const?
      _godot_dictionary_operator_index_const;

  ffi.Pointer<godot_variant> godot_dictionary_next(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_next ??= _dylib.lookupFunction<
        _c_godot_dictionary_next,
        _dart_godot_dictionary_next>('godot_dictionary_next'))(
      p_self,
      p_key,
    );
  }

  _dart_godot_dictionary_next? _godot_dictionary_next;

  bool godot_dictionary_operator_equal(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_dictionary> p_b,
  ) {
    return (_godot_dictionary_operator_equal ??= _dylib.lookupFunction<
                _c_godot_dictionary_operator_equal,
                _dart_godot_dictionary_operator_equal>(
            'godot_dictionary_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_dictionary_operator_equal? _godot_dictionary_operator_equal;

  godot_string godot_dictionary_to_json(
    ffi.Pointer<godot_dictionary> p_self,
  ) {
    return (_godot_dictionary_to_json ??= _dylib.lookupFunction<
        _c_godot_dictionary_to_json,
        _dart_godot_dictionary_to_json>('godot_dictionary_to_json'))(
      p_self,
    );
  }

  _dart_godot_dictionary_to_json? _godot_dictionary_to_json;

  bool godot_dictionary_erase_with_return(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
  ) {
    return (_godot_dictionary_erase_with_return ??= _dylib.lookupFunction<
                _c_godot_dictionary_erase_with_return,
                _dart_godot_dictionary_erase_with_return>(
            'godot_dictionary_erase_with_return'))(
          p_self,
          p_key,
        ) !=
        0;
  }

  _dart_godot_dictionary_erase_with_return? _godot_dictionary_erase_with_return;

  godot_variant godot_dictionary_get_with_default(
    ffi.Pointer<godot_dictionary> p_self,
    ffi.Pointer<godot_variant> p_key,
    ffi.Pointer<godot_variant> p_default,
  ) {
    return (_godot_dictionary_get_with_default ??= _dylib.lookupFunction<
            _c_godot_dictionary_get_with_default,
            _dart_godot_dictionary_get_with_default>(
        'godot_dictionary_get_with_default'))(
      p_self,
      p_key,
      p_default,
    );
  }

  _dart_godot_dictionary_get_with_default? _godot_dictionary_get_with_default;

  void godot_node_path_new(
    ffi.Pointer<godot_node_path> r_dest,
    ffi.Pointer<godot_string> p_from,
  ) {
    return (_godot_node_path_new ??= _dylib.lookupFunction<
        _c_godot_node_path_new,
        _dart_godot_node_path_new>('godot_node_path_new'))(
      r_dest,
      p_from,
    );
  }

  _dart_godot_node_path_new? _godot_node_path_new;

  void godot_node_path_new_copy(
    ffi.Pointer<godot_node_path> r_dest,
    ffi.Pointer<godot_node_path> p_src,
  ) {
    return (_godot_node_path_new_copy ??= _dylib.lookupFunction<
        _c_godot_node_path_new_copy,
        _dart_godot_node_path_new_copy>('godot_node_path_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_node_path_new_copy? _godot_node_path_new_copy;

  void godot_node_path_destroy(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_destroy ??= _dylib.lookupFunction<
        _c_godot_node_path_destroy,
        _dart_godot_node_path_destroy>('godot_node_path_destroy'))(
      p_self,
    );
  }

  _dart_godot_node_path_destroy? _godot_node_path_destroy;

  godot_string godot_node_path_as_string(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_as_string ??= _dylib.lookupFunction<
        _c_godot_node_path_as_string,
        _dart_godot_node_path_as_string>('godot_node_path_as_string'))(
      p_self,
    );
  }

  _dart_godot_node_path_as_string? _godot_node_path_as_string;

  bool godot_node_path_is_absolute(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_is_absolute ??= _dylib.lookupFunction<
            _c_godot_node_path_is_absolute,
            _dart_godot_node_path_is_absolute>('godot_node_path_is_absolute'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_node_path_is_absolute? _godot_node_path_is_absolute;

  int godot_node_path_get_name_count(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_get_name_count ??= _dylib.lookupFunction<
            _c_godot_node_path_get_name_count,
            _dart_godot_node_path_get_name_count>(
        'godot_node_path_get_name_count'))(
      p_self,
    );
  }

  _dart_godot_node_path_get_name_count? _godot_node_path_get_name_count;

  godot_string godot_node_path_get_name(
    ffi.Pointer<godot_node_path> p_self,
    int p_idx,
  ) {
    return (_godot_node_path_get_name ??= _dylib.lookupFunction<
        _c_godot_node_path_get_name,
        _dart_godot_node_path_get_name>('godot_node_path_get_name'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_node_path_get_name? _godot_node_path_get_name;

  int godot_node_path_get_subname_count(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_get_subname_count ??= _dylib.lookupFunction<
            _c_godot_node_path_get_subname_count,
            _dart_godot_node_path_get_subname_count>(
        'godot_node_path_get_subname_count'))(
      p_self,
    );
  }

  _dart_godot_node_path_get_subname_count? _godot_node_path_get_subname_count;

  godot_string godot_node_path_get_subname(
    ffi.Pointer<godot_node_path> p_self,
    int p_idx,
  ) {
    return (_godot_node_path_get_subname ??= _dylib.lookupFunction<
        _c_godot_node_path_get_subname,
        _dart_godot_node_path_get_subname>('godot_node_path_get_subname'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_node_path_get_subname? _godot_node_path_get_subname;

  godot_string godot_node_path_get_concatenated_subnames(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_get_concatenated_subnames ??=
        _dylib.lookupFunction<_c_godot_node_path_get_concatenated_subnames,
                _dart_godot_node_path_get_concatenated_subnames>(
            'godot_node_path_get_concatenated_subnames'))(
      p_self,
    );
  }

  _dart_godot_node_path_get_concatenated_subnames?
      _godot_node_path_get_concatenated_subnames;

  bool godot_node_path_is_empty(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_is_empty ??= _dylib.lookupFunction<
            _c_godot_node_path_is_empty,
            _dart_godot_node_path_is_empty>('godot_node_path_is_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_node_path_is_empty? _godot_node_path_is_empty;

  bool godot_node_path_operator_equal(
    ffi.Pointer<godot_node_path> p_self,
    ffi.Pointer<godot_node_path> p_b,
  ) {
    return (_godot_node_path_operator_equal ??= _dylib.lookupFunction<
                _c_godot_node_path_operator_equal,
                _dart_godot_node_path_operator_equal>(
            'godot_node_path_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_node_path_operator_equal? _godot_node_path_operator_equal;

  godot_node_path godot_node_path_get_as_property_path(
    ffi.Pointer<godot_node_path> p_self,
  ) {
    return (_godot_node_path_get_as_property_path ??= _dylib.lookupFunction<
            _c_godot_node_path_get_as_property_path,
            _dart_godot_node_path_get_as_property_path>(
        'godot_node_path_get_as_property_path'))(
      p_self,
    );
  }

  _dart_godot_node_path_get_as_property_path?
      _godot_node_path_get_as_property_path;

  void godot_rect2_new_with_position_and_size(
    ffi.Pointer<godot_rect2> r_dest,
    ffi.Pointer<godot_vector2> p_pos,
    ffi.Pointer<godot_vector2> p_size,
  ) {
    return (_godot_rect2_new_with_position_and_size ??= _dylib.lookupFunction<
            _c_godot_rect2_new_with_position_and_size,
            _dart_godot_rect2_new_with_position_and_size>(
        'godot_rect2_new_with_position_and_size'))(
      r_dest,
      p_pos,
      p_size,
    );
  }

  _dart_godot_rect2_new_with_position_and_size?
      _godot_rect2_new_with_position_and_size;

  void godot_rect2_new(
    ffi.Pointer<godot_rect2> r_dest,
    double p_x,
    double p_y,
    double p_width,
    double p_height,
  ) {
    return (_godot_rect2_new ??=
        _dylib.lookupFunction<_c_godot_rect2_new, _dart_godot_rect2_new>(
            'godot_rect2_new'))(
      r_dest,
      p_x,
      p_y,
      p_width,
      p_height,
    );
  }

  _dart_godot_rect2_new? _godot_rect2_new;

  godot_string godot_rect2_as_string(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_as_string ??= _dylib.lookupFunction<
        _c_godot_rect2_as_string,
        _dart_godot_rect2_as_string>('godot_rect2_as_string'))(
      p_self,
    );
  }

  _dart_godot_rect2_as_string? _godot_rect2_as_string;

  double godot_rect2_get_area(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_get_area ??= _dylib.lookupFunction<
        _c_godot_rect2_get_area,
        _dart_godot_rect2_get_area>('godot_rect2_get_area'))(
      p_self,
    );
  }

  _dart_godot_rect2_get_area? _godot_rect2_get_area;

  bool godot_rect2_intersects(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_rect2> p_b,
  ) {
    return (_godot_rect2_intersects ??= _dylib.lookupFunction<
            _c_godot_rect2_intersects,
            _dart_godot_rect2_intersects>('godot_rect2_intersects'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_rect2_intersects? _godot_rect2_intersects;

  bool godot_rect2_encloses(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_rect2> p_b,
  ) {
    return (_godot_rect2_encloses ??= _dylib.lookupFunction<
            _c_godot_rect2_encloses,
            _dart_godot_rect2_encloses>('godot_rect2_encloses'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_rect2_encloses? _godot_rect2_encloses;

  bool godot_rect2_has_no_area(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_has_no_area ??= _dylib.lookupFunction<
            _c_godot_rect2_has_no_area,
            _dart_godot_rect2_has_no_area>('godot_rect2_has_no_area'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_rect2_has_no_area? _godot_rect2_has_no_area;

  godot_rect2 godot_rect2_clip(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_rect2> p_b,
  ) {
    return (_godot_rect2_clip ??=
        _dylib.lookupFunction<_c_godot_rect2_clip, _dart_godot_rect2_clip>(
            'godot_rect2_clip'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_rect2_clip? _godot_rect2_clip;

  godot_rect2 godot_rect2_merge(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_rect2> p_b,
  ) {
    return (_godot_rect2_merge ??=
        _dylib.lookupFunction<_c_godot_rect2_merge, _dart_godot_rect2_merge>(
            'godot_rect2_merge'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_rect2_merge? _godot_rect2_merge;

  bool godot_rect2_has_point(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_vector2> p_point,
  ) {
    return (_godot_rect2_has_point ??= _dylib.lookupFunction<
            _c_godot_rect2_has_point,
            _dart_godot_rect2_has_point>('godot_rect2_has_point'))(
          p_self,
          p_point,
        ) !=
        0;
  }

  _dart_godot_rect2_has_point? _godot_rect2_has_point;

  godot_rect2 godot_rect2_grow(
    ffi.Pointer<godot_rect2> p_self,
    double p_by,
  ) {
    return (_godot_rect2_grow ??=
        _dylib.lookupFunction<_c_godot_rect2_grow, _dart_godot_rect2_grow>(
            'godot_rect2_grow'))(
      p_self,
      p_by,
    );
  }

  _dart_godot_rect2_grow? _godot_rect2_grow;

  godot_rect2 godot_rect2_grow_individual(
    ffi.Pointer<godot_rect2> p_self,
    double p_left,
    double p_top,
    double p_right,
    double p_bottom,
  ) {
    return (_godot_rect2_grow_individual ??= _dylib.lookupFunction<
        _c_godot_rect2_grow_individual,
        _dart_godot_rect2_grow_individual>('godot_rect2_grow_individual'))(
      p_self,
      p_left,
      p_top,
      p_right,
      p_bottom,
    );
  }

  _dart_godot_rect2_grow_individual? _godot_rect2_grow_individual;

  godot_rect2 godot_rect2_grow_margin(
    ffi.Pointer<godot_rect2> p_self,
    int p_margin,
    double p_by,
  ) {
    return (_godot_rect2_grow_margin ??= _dylib.lookupFunction<
        _c_godot_rect2_grow_margin,
        _dart_godot_rect2_grow_margin>('godot_rect2_grow_margin'))(
      p_self,
      p_margin,
      p_by,
    );
  }

  _dart_godot_rect2_grow_margin? _godot_rect2_grow_margin;

  godot_rect2 godot_rect2_abs(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_abs ??=
        _dylib.lookupFunction<_c_godot_rect2_abs, _dart_godot_rect2_abs>(
            'godot_rect2_abs'))(
      p_self,
    );
  }

  _dart_godot_rect2_abs? _godot_rect2_abs;

  godot_rect2 godot_rect2_expand(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_vector2> p_to,
  ) {
    return (_godot_rect2_expand ??=
        _dylib.lookupFunction<_c_godot_rect2_expand, _dart_godot_rect2_expand>(
            'godot_rect2_expand'))(
      p_self,
      p_to,
    );
  }

  _dart_godot_rect2_expand? _godot_rect2_expand;

  bool godot_rect2_operator_equal(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_rect2> p_b,
  ) {
    return (_godot_rect2_operator_equal ??= _dylib.lookupFunction<
            _c_godot_rect2_operator_equal,
            _dart_godot_rect2_operator_equal>('godot_rect2_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_rect2_operator_equal? _godot_rect2_operator_equal;

  godot_vector2 godot_rect2_get_position(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_get_position ??= _dylib.lookupFunction<
        _c_godot_rect2_get_position,
        _dart_godot_rect2_get_position>('godot_rect2_get_position'))(
      p_self,
    );
  }

  _dart_godot_rect2_get_position? _godot_rect2_get_position;

  godot_vector2 godot_rect2_get_size(
    ffi.Pointer<godot_rect2> p_self,
  ) {
    return (_godot_rect2_get_size ??= _dylib.lookupFunction<
        _c_godot_rect2_get_size,
        _dart_godot_rect2_get_size>('godot_rect2_get_size'))(
      p_self,
    );
  }

  _dart_godot_rect2_get_size? _godot_rect2_get_size;

  void godot_rect2_set_position(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_vector2> p_pos,
  ) {
    return (_godot_rect2_set_position ??= _dylib.lookupFunction<
        _c_godot_rect2_set_position,
        _dart_godot_rect2_set_position>('godot_rect2_set_position'))(
      p_self,
      p_pos,
    );
  }

  _dart_godot_rect2_set_position? _godot_rect2_set_position;

  void godot_rect2_set_size(
    ffi.Pointer<godot_rect2> p_self,
    ffi.Pointer<godot_vector2> p_size,
  ) {
    return (_godot_rect2_set_size ??= _dylib.lookupFunction<
        _c_godot_rect2_set_size,
        _dart_godot_rect2_set_size>('godot_rect2_set_size'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_rect2_set_size? _godot_rect2_set_size;

  void godot_rid_new(
    ffi.Pointer<godot_rid> r_dest,
  ) {
    return (_godot_rid_new ??=
        _dylib.lookupFunction<_c_godot_rid_new, _dart_godot_rid_new>(
            'godot_rid_new'))(
      r_dest,
    );
  }

  _dart_godot_rid_new? _godot_rid_new;

  int godot_rid_get_id(
    ffi.Pointer<godot_rid> p_self,
  ) {
    return (_godot_rid_get_id ??=
        _dylib.lookupFunction<_c_godot_rid_get_id, _dart_godot_rid_get_id>(
            'godot_rid_get_id'))(
      p_self,
    );
  }

  _dart_godot_rid_get_id? _godot_rid_get_id;

  void godot_rid_new_with_resource(
    ffi.Pointer<godot_rid> r_dest,
    ffi.Pointer<ffi.Void> p_from,
  ) {
    return (_godot_rid_new_with_resource ??= _dylib.lookupFunction<
        _c_godot_rid_new_with_resource,
        _dart_godot_rid_new_with_resource>('godot_rid_new_with_resource'))(
      r_dest,
      p_from,
    );
  }

  _dart_godot_rid_new_with_resource? _godot_rid_new_with_resource;

  bool godot_rid_operator_equal(
    ffi.Pointer<godot_rid> p_self,
    ffi.Pointer<godot_rid> p_b,
  ) {
    return (_godot_rid_operator_equal ??= _dylib.lookupFunction<
            _c_godot_rid_operator_equal,
            _dart_godot_rid_operator_equal>('godot_rid_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_rid_operator_equal? _godot_rid_operator_equal;

  bool godot_rid_operator_less(
    ffi.Pointer<godot_rid> p_self,
    ffi.Pointer<godot_rid> p_b,
  ) {
    return (_godot_rid_operator_less ??= _dylib.lookupFunction<
            _c_godot_rid_operator_less,
            _dart_godot_rid_operator_less>('godot_rid_operator_less'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_rid_operator_less? _godot_rid_operator_less;

  void godot_transform_new_with_axis_origin(
    ffi.Pointer<godot_transform> r_dest,
    ffi.Pointer<godot_vector3> p_x_axis,
    ffi.Pointer<godot_vector3> p_y_axis,
    ffi.Pointer<godot_vector3> p_z_axis,
    ffi.Pointer<godot_vector3> p_origin,
  ) {
    return (_godot_transform_new_with_axis_origin ??= _dylib.lookupFunction<
            _c_godot_transform_new_with_axis_origin,
            _dart_godot_transform_new_with_axis_origin>(
        'godot_transform_new_with_axis_origin'))(
      r_dest,
      p_x_axis,
      p_y_axis,
      p_z_axis,
      p_origin,
    );
  }

  _dart_godot_transform_new_with_axis_origin?
      _godot_transform_new_with_axis_origin;

  void godot_transform_new(
    ffi.Pointer<godot_transform> r_dest,
    ffi.Pointer<godot_basis> p_basis,
    ffi.Pointer<godot_vector3> p_origin,
  ) {
    return (_godot_transform_new ??= _dylib.lookupFunction<
        _c_godot_transform_new,
        _dart_godot_transform_new>('godot_transform_new'))(
      r_dest,
      p_basis,
      p_origin,
    );
  }

  _dart_godot_transform_new? _godot_transform_new;

  void godot_transform_new_with_quat(
    ffi.Pointer<godot_transform> r_dest,
    ffi.Pointer<godot_quat> p_quat,
  ) {
    return (_godot_transform_new_with_quat ??= _dylib.lookupFunction<
        _c_godot_transform_new_with_quat,
        _dart_godot_transform_new_with_quat>('godot_transform_new_with_quat'))(
      r_dest,
      p_quat,
    );
  }

  _dart_godot_transform_new_with_quat? _godot_transform_new_with_quat;

  godot_basis godot_transform_get_basis(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_get_basis ??= _dylib.lookupFunction<
        _c_godot_transform_get_basis,
        _dart_godot_transform_get_basis>('godot_transform_get_basis'))(
      p_self,
    );
  }

  _dart_godot_transform_get_basis? _godot_transform_get_basis;

  void godot_transform_set_basis(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_basis> p_v,
  ) {
    return (_godot_transform_set_basis ??= _dylib.lookupFunction<
        _c_godot_transform_set_basis,
        _dart_godot_transform_set_basis>('godot_transform_set_basis'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_set_basis? _godot_transform_set_basis;

  godot_vector3 godot_transform_get_origin(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_get_origin ??= _dylib.lookupFunction<
        _c_godot_transform_get_origin,
        _dart_godot_transform_get_origin>('godot_transform_get_origin'))(
      p_self,
    );
  }

  _dart_godot_transform_get_origin? _godot_transform_get_origin;

  void godot_transform_set_origin(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_transform_set_origin ??= _dylib.lookupFunction<
        _c_godot_transform_set_origin,
        _dart_godot_transform_set_origin>('godot_transform_set_origin'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_set_origin? _godot_transform_set_origin;

  godot_string godot_transform_as_string(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_as_string ??= _dylib.lookupFunction<
        _c_godot_transform_as_string,
        _dart_godot_transform_as_string>('godot_transform_as_string'))(
      p_self,
    );
  }

  _dart_godot_transform_as_string? _godot_transform_as_string;

  godot_transform godot_transform_inverse(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_inverse ??= _dylib.lookupFunction<
        _c_godot_transform_inverse,
        _dart_godot_transform_inverse>('godot_transform_inverse'))(
      p_self,
    );
  }

  _dart_godot_transform_inverse? _godot_transform_inverse;

  godot_transform godot_transform_affine_inverse(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_affine_inverse ??= _dylib.lookupFunction<
            _c_godot_transform_affine_inverse,
            _dart_godot_transform_affine_inverse>(
        'godot_transform_affine_inverse'))(
      p_self,
    );
  }

  _dart_godot_transform_affine_inverse? _godot_transform_affine_inverse;

  godot_transform godot_transform_orthonormalized(
    ffi.Pointer<godot_transform> p_self,
  ) {
    return (_godot_transform_orthonormalized ??= _dylib.lookupFunction<
            _c_godot_transform_orthonormalized,
            _dart_godot_transform_orthonormalized>(
        'godot_transform_orthonormalized'))(
      p_self,
    );
  }

  _dart_godot_transform_orthonormalized? _godot_transform_orthonormalized;

  godot_transform godot_transform_rotated(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_axis,
    double p_phi,
  ) {
    return (_godot_transform_rotated ??= _dylib.lookupFunction<
        _c_godot_transform_rotated,
        _dart_godot_transform_rotated>('godot_transform_rotated'))(
      p_self,
      p_axis,
      p_phi,
    );
  }

  _dart_godot_transform_rotated? _godot_transform_rotated;

  godot_transform godot_transform_scaled(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_scale,
  ) {
    return (_godot_transform_scaled ??= _dylib.lookupFunction<
        _c_godot_transform_scaled,
        _dart_godot_transform_scaled>('godot_transform_scaled'))(
      p_self,
      p_scale,
    );
  }

  _dart_godot_transform_scaled? _godot_transform_scaled;

  godot_transform godot_transform_translated(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_ofs,
  ) {
    return (_godot_transform_translated ??= _dylib.lookupFunction<
        _c_godot_transform_translated,
        _dart_godot_transform_translated>('godot_transform_translated'))(
      p_self,
      p_ofs,
    );
  }

  _dart_godot_transform_translated? _godot_transform_translated;

  godot_transform godot_transform_looking_at(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_target,
    ffi.Pointer<godot_vector3> p_up,
  ) {
    return (_godot_transform_looking_at ??= _dylib.lookupFunction<
        _c_godot_transform_looking_at,
        _dart_godot_transform_looking_at>('godot_transform_looking_at'))(
      p_self,
      p_target,
      p_up,
    );
  }

  _dart_godot_transform_looking_at? _godot_transform_looking_at;

  godot_plane godot_transform_xform_plane(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_plane> p_v,
  ) {
    return (_godot_transform_xform_plane ??= _dylib.lookupFunction<
        _c_godot_transform_xform_plane,
        _dart_godot_transform_xform_plane>('godot_transform_xform_plane'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_plane? _godot_transform_xform_plane;

  godot_plane godot_transform_xform_inv_plane(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_plane> p_v,
  ) {
    return (_godot_transform_xform_inv_plane ??= _dylib.lookupFunction<
            _c_godot_transform_xform_inv_plane,
            _dart_godot_transform_xform_inv_plane>(
        'godot_transform_xform_inv_plane'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_inv_plane? _godot_transform_xform_inv_plane;

  void godot_transform_new_identity(
    ffi.Pointer<godot_transform> r_dest,
  ) {
    return (_godot_transform_new_identity ??= _dylib.lookupFunction<
        _c_godot_transform_new_identity,
        _dart_godot_transform_new_identity>('godot_transform_new_identity'))(
      r_dest,
    );
  }

  _dart_godot_transform_new_identity? _godot_transform_new_identity;

  bool godot_transform_operator_equal(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_transform> p_b,
  ) {
    return (_godot_transform_operator_equal ??= _dylib.lookupFunction<
                _c_godot_transform_operator_equal,
                _dart_godot_transform_operator_equal>(
            'godot_transform_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_transform_operator_equal? _godot_transform_operator_equal;

  godot_transform godot_transform_operator_multiply(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_transform> p_b,
  ) {
    return (_godot_transform_operator_multiply ??= _dylib.lookupFunction<
            _c_godot_transform_operator_multiply,
            _dart_godot_transform_operator_multiply>(
        'godot_transform_operator_multiply'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_transform_operator_multiply? _godot_transform_operator_multiply;

  godot_vector3 godot_transform_xform_vector3(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_transform_xform_vector3 ??= _dylib.lookupFunction<
        _c_godot_transform_xform_vector3,
        _dart_godot_transform_xform_vector3>('godot_transform_xform_vector3'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_vector3? _godot_transform_xform_vector3;

  godot_vector3 godot_transform_xform_inv_vector3(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_vector3> p_v,
  ) {
    return (_godot_transform_xform_inv_vector3 ??= _dylib.lookupFunction<
            _c_godot_transform_xform_inv_vector3,
            _dart_godot_transform_xform_inv_vector3>(
        'godot_transform_xform_inv_vector3'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_inv_vector3? _godot_transform_xform_inv_vector3;

  godot_aabb godot_transform_xform_aabb(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_aabb> p_v,
  ) {
    return (_godot_transform_xform_aabb ??= _dylib.lookupFunction<
        _c_godot_transform_xform_aabb,
        _dart_godot_transform_xform_aabb>('godot_transform_xform_aabb'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_aabb? _godot_transform_xform_aabb;

  godot_aabb godot_transform_xform_inv_aabb(
    ffi.Pointer<godot_transform> p_self,
    ffi.Pointer<godot_aabb> p_v,
  ) {
    return (_godot_transform_xform_inv_aabb ??= _dylib.lookupFunction<
            _c_godot_transform_xform_inv_aabb,
            _dart_godot_transform_xform_inv_aabb>(
        'godot_transform_xform_inv_aabb'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform_xform_inv_aabb? _godot_transform_xform_inv_aabb;

  void godot_transform2d_new(
    ffi.Pointer<godot_transform2d> r_dest,
    double p_rot,
    ffi.Pointer<godot_vector2> p_pos,
  ) {
    return (_godot_transform2d_new ??= _dylib.lookupFunction<
        _c_godot_transform2d_new,
        _dart_godot_transform2d_new>('godot_transform2d_new'))(
      r_dest,
      p_rot,
      p_pos,
    );
  }

  _dart_godot_transform2d_new? _godot_transform2d_new;

  void godot_transform2d_new_axis_origin(
    ffi.Pointer<godot_transform2d> r_dest,
    ffi.Pointer<godot_vector2> p_x_axis,
    ffi.Pointer<godot_vector2> p_y_axis,
    ffi.Pointer<godot_vector2> p_origin,
  ) {
    return (_godot_transform2d_new_axis_origin ??= _dylib.lookupFunction<
            _c_godot_transform2d_new_axis_origin,
            _dart_godot_transform2d_new_axis_origin>(
        'godot_transform2d_new_axis_origin'))(
      r_dest,
      p_x_axis,
      p_y_axis,
      p_origin,
    );
  }

  _dart_godot_transform2d_new_axis_origin? _godot_transform2d_new_axis_origin;

  godot_string godot_transform2d_as_string(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_as_string ??= _dylib.lookupFunction<
        _c_godot_transform2d_as_string,
        _dart_godot_transform2d_as_string>('godot_transform2d_as_string'))(
      p_self,
    );
  }

  _dart_godot_transform2d_as_string? _godot_transform2d_as_string;

  godot_transform2d godot_transform2d_inverse(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_inverse ??= _dylib.lookupFunction<
        _c_godot_transform2d_inverse,
        _dart_godot_transform2d_inverse>('godot_transform2d_inverse'))(
      p_self,
    );
  }

  _dart_godot_transform2d_inverse? _godot_transform2d_inverse;

  godot_transform2d godot_transform2d_affine_inverse(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_affine_inverse ??= _dylib.lookupFunction<
            _c_godot_transform2d_affine_inverse,
            _dart_godot_transform2d_affine_inverse>(
        'godot_transform2d_affine_inverse'))(
      p_self,
    );
  }

  _dart_godot_transform2d_affine_inverse? _godot_transform2d_affine_inverse;

  double godot_transform2d_get_rotation(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_get_rotation ??= _dylib.lookupFunction<
            _c_godot_transform2d_get_rotation,
            _dart_godot_transform2d_get_rotation>(
        'godot_transform2d_get_rotation'))(
      p_self,
    );
  }

  _dart_godot_transform2d_get_rotation? _godot_transform2d_get_rotation;

  godot_vector2 godot_transform2d_get_origin(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_get_origin ??= _dylib.lookupFunction<
        _c_godot_transform2d_get_origin,
        _dart_godot_transform2d_get_origin>('godot_transform2d_get_origin'))(
      p_self,
    );
  }

  _dart_godot_transform2d_get_origin? _godot_transform2d_get_origin;

  godot_vector2 godot_transform2d_get_scale(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_get_scale ??= _dylib.lookupFunction<
        _c_godot_transform2d_get_scale,
        _dart_godot_transform2d_get_scale>('godot_transform2d_get_scale'))(
      p_self,
    );
  }

  _dart_godot_transform2d_get_scale? _godot_transform2d_get_scale;

  godot_transform2d godot_transform2d_orthonormalized(
    ffi.Pointer<godot_transform2d> p_self,
  ) {
    return (_godot_transform2d_orthonormalized ??= _dylib.lookupFunction<
            _c_godot_transform2d_orthonormalized,
            _dart_godot_transform2d_orthonormalized>(
        'godot_transform2d_orthonormalized'))(
      p_self,
    );
  }

  _dart_godot_transform2d_orthonormalized? _godot_transform2d_orthonormalized;

  godot_transform2d godot_transform2d_rotated(
    ffi.Pointer<godot_transform2d> p_self,
    double p_phi,
  ) {
    return (_godot_transform2d_rotated ??= _dylib.lookupFunction<
        _c_godot_transform2d_rotated,
        _dart_godot_transform2d_rotated>('godot_transform2d_rotated'))(
      p_self,
      p_phi,
    );
  }

  _dart_godot_transform2d_rotated? _godot_transform2d_rotated;

  godot_transform2d godot_transform2d_scaled(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_scale,
  ) {
    return (_godot_transform2d_scaled ??= _dylib.lookupFunction<
        _c_godot_transform2d_scaled,
        _dart_godot_transform2d_scaled>('godot_transform2d_scaled'))(
      p_self,
      p_scale,
    );
  }

  _dart_godot_transform2d_scaled? _godot_transform2d_scaled;

  godot_transform2d godot_transform2d_translated(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_offset,
  ) {
    return (_godot_transform2d_translated ??= _dylib.lookupFunction<
        _c_godot_transform2d_translated,
        _dart_godot_transform2d_translated>('godot_transform2d_translated'))(
      p_self,
      p_offset,
    );
  }

  _dart_godot_transform2d_translated? _godot_transform2d_translated;

  godot_vector2 godot_transform2d_xform_vector2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_v,
  ) {
    return (_godot_transform2d_xform_vector2 ??= _dylib.lookupFunction<
            _c_godot_transform2d_xform_vector2,
            _dart_godot_transform2d_xform_vector2>(
        'godot_transform2d_xform_vector2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_xform_vector2? _godot_transform2d_xform_vector2;

  godot_vector2 godot_transform2d_xform_inv_vector2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_v,
  ) {
    return (_godot_transform2d_xform_inv_vector2 ??= _dylib.lookupFunction<
            _c_godot_transform2d_xform_inv_vector2,
            _dart_godot_transform2d_xform_inv_vector2>(
        'godot_transform2d_xform_inv_vector2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_xform_inv_vector2?
      _godot_transform2d_xform_inv_vector2;

  godot_vector2 godot_transform2d_basis_xform_vector2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_v,
  ) {
    return (_godot_transform2d_basis_xform_vector2 ??= _dylib.lookupFunction<
            _c_godot_transform2d_basis_xform_vector2,
            _dart_godot_transform2d_basis_xform_vector2>(
        'godot_transform2d_basis_xform_vector2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_basis_xform_vector2?
      _godot_transform2d_basis_xform_vector2;

  godot_vector2 godot_transform2d_basis_xform_inv_vector2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_vector2> p_v,
  ) {
    return (_godot_transform2d_basis_xform_inv_vector2 ??=
        _dylib.lookupFunction<_c_godot_transform2d_basis_xform_inv_vector2,
                _dart_godot_transform2d_basis_xform_inv_vector2>(
            'godot_transform2d_basis_xform_inv_vector2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_basis_xform_inv_vector2?
      _godot_transform2d_basis_xform_inv_vector2;

  godot_transform2d godot_transform2d_interpolate_with(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_transform2d> p_m,
    double p_c,
  ) {
    return (_godot_transform2d_interpolate_with ??= _dylib.lookupFunction<
            _c_godot_transform2d_interpolate_with,
            _dart_godot_transform2d_interpolate_with>(
        'godot_transform2d_interpolate_with'))(
      p_self,
      p_m,
      p_c,
    );
  }

  _dart_godot_transform2d_interpolate_with? _godot_transform2d_interpolate_with;

  bool godot_transform2d_operator_equal(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_transform2d> p_b,
  ) {
    return (_godot_transform2d_operator_equal ??= _dylib.lookupFunction<
                _c_godot_transform2d_operator_equal,
                _dart_godot_transform2d_operator_equal>(
            'godot_transform2d_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_transform2d_operator_equal? _godot_transform2d_operator_equal;

  godot_transform2d godot_transform2d_operator_multiply(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_transform2d> p_b,
  ) {
    return (_godot_transform2d_operator_multiply ??= _dylib.lookupFunction<
            _c_godot_transform2d_operator_multiply,
            _dart_godot_transform2d_operator_multiply>(
        'godot_transform2d_operator_multiply'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_transform2d_operator_multiply?
      _godot_transform2d_operator_multiply;

  void godot_transform2d_new_identity(
    ffi.Pointer<godot_transform2d> r_dest,
  ) {
    return (_godot_transform2d_new_identity ??= _dylib.lookupFunction<
            _c_godot_transform2d_new_identity,
            _dart_godot_transform2d_new_identity>(
        'godot_transform2d_new_identity'))(
      r_dest,
    );
  }

  _dart_godot_transform2d_new_identity? _godot_transform2d_new_identity;

  godot_rect2 godot_transform2d_xform_rect2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_rect2> p_v,
  ) {
    return (_godot_transform2d_xform_rect2 ??= _dylib.lookupFunction<
        _c_godot_transform2d_xform_rect2,
        _dart_godot_transform2d_xform_rect2>('godot_transform2d_xform_rect2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_xform_rect2? _godot_transform2d_xform_rect2;

  godot_rect2 godot_transform2d_xform_inv_rect2(
    ffi.Pointer<godot_transform2d> p_self,
    ffi.Pointer<godot_rect2> p_v,
  ) {
    return (_godot_transform2d_xform_inv_rect2 ??= _dylib.lookupFunction<
            _c_godot_transform2d_xform_inv_rect2,
            _dart_godot_transform2d_xform_inv_rect2>(
        'godot_transform2d_xform_inv_rect2'))(
      p_self,
      p_v,
    );
  }

  _dart_godot_transform2d_xform_inv_rect2? _godot_transform2d_xform_inv_rect2;

  int godot_variant_get_type(
    ffi.Pointer<godot_variant> p_v,
  ) {
    return (_godot_variant_get_type ??= _dylib.lookupFunction<
        _c_godot_variant_get_type,
        _dart_godot_variant_get_type>('godot_variant_get_type'))(
      p_v,
    );
  }

  _dart_godot_variant_get_type? _godot_variant_get_type;

  void godot_variant_new_copy(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_variant> p_src,
  ) {
    return (_godot_variant_new_copy ??= _dylib.lookupFunction<
        _c_godot_variant_new_copy,
        _dart_godot_variant_new_copy>('godot_variant_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_variant_new_copy? _godot_variant_new_copy;

  void godot_variant_new_nil(
    ffi.Pointer<godot_variant> r_dest,
  ) {
    return (_godot_variant_new_nil ??= _dylib.lookupFunction<
        _c_godot_variant_new_nil,
        _dart_godot_variant_new_nil>('godot_variant_new_nil'))(
      r_dest,
    );
  }

  _dart_godot_variant_new_nil? _godot_variant_new_nil;

  void godot_variant_new_bool(
    ffi.Pointer<godot_variant> r_dest,
    bool p_b,
  ) {
    return (_godot_variant_new_bool ??= _dylib.lookupFunction<
        _c_godot_variant_new_bool,
        _dart_godot_variant_new_bool>('godot_variant_new_bool'))(
      r_dest,
      p_b ? 1 : 0,
    );
  }

  _dart_godot_variant_new_bool? _godot_variant_new_bool;

  void godot_variant_new_uint(
    ffi.Pointer<godot_variant> r_dest,
    int p_i,
  ) {
    return (_godot_variant_new_uint ??= _dylib.lookupFunction<
        _c_godot_variant_new_uint,
        _dart_godot_variant_new_uint>('godot_variant_new_uint'))(
      r_dest,
      p_i,
    );
  }

  _dart_godot_variant_new_uint? _godot_variant_new_uint;

  void godot_variant_new_int(
    ffi.Pointer<godot_variant> r_dest,
    int p_i,
  ) {
    return (_godot_variant_new_int ??= _dylib.lookupFunction<
        _c_godot_variant_new_int,
        _dart_godot_variant_new_int>('godot_variant_new_int'))(
      r_dest,
      p_i,
    );
  }

  _dart_godot_variant_new_int? _godot_variant_new_int;

  void godot_variant_new_real(
    ffi.Pointer<godot_variant> r_dest,
    double p_r,
  ) {
    return (_godot_variant_new_real ??= _dylib.lookupFunction<
        _c_godot_variant_new_real,
        _dart_godot_variant_new_real>('godot_variant_new_real'))(
      r_dest,
      p_r,
    );
  }

  _dart_godot_variant_new_real? _godot_variant_new_real;

  void godot_variant_new_string(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_string> p_s,
  ) {
    return (_godot_variant_new_string ??= _dylib.lookupFunction<
        _c_godot_variant_new_string,
        _dart_godot_variant_new_string>('godot_variant_new_string'))(
      r_dest,
      p_s,
    );
  }

  _dart_godot_variant_new_string? _godot_variant_new_string;

  void godot_variant_new_vector2(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_vector2> p_v2,
  ) {
    return (_godot_variant_new_vector2 ??= _dylib.lookupFunction<
        _c_godot_variant_new_vector2,
        _dart_godot_variant_new_vector2>('godot_variant_new_vector2'))(
      r_dest,
      p_v2,
    );
  }

  _dart_godot_variant_new_vector2? _godot_variant_new_vector2;

  void godot_variant_new_rect2(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_rect2> p_rect2,
  ) {
    return (_godot_variant_new_rect2 ??= _dylib.lookupFunction<
        _c_godot_variant_new_rect2,
        _dart_godot_variant_new_rect2>('godot_variant_new_rect2'))(
      r_dest,
      p_rect2,
    );
  }

  _dart_godot_variant_new_rect2? _godot_variant_new_rect2;

  void godot_variant_new_vector3(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_vector3> p_v3,
  ) {
    return (_godot_variant_new_vector3 ??= _dylib.lookupFunction<
        _c_godot_variant_new_vector3,
        _dart_godot_variant_new_vector3>('godot_variant_new_vector3'))(
      r_dest,
      p_v3,
    );
  }

  _dart_godot_variant_new_vector3? _godot_variant_new_vector3;

  void godot_variant_new_transform2d(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_transform2d> p_t2d,
  ) {
    return (_godot_variant_new_transform2d ??= _dylib.lookupFunction<
        _c_godot_variant_new_transform2d,
        _dart_godot_variant_new_transform2d>('godot_variant_new_transform2d'))(
      r_dest,
      p_t2d,
    );
  }

  _dart_godot_variant_new_transform2d? _godot_variant_new_transform2d;

  void godot_variant_new_plane(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_plane> p_plane,
  ) {
    return (_godot_variant_new_plane ??= _dylib.lookupFunction<
        _c_godot_variant_new_plane,
        _dart_godot_variant_new_plane>('godot_variant_new_plane'))(
      r_dest,
      p_plane,
    );
  }

  _dart_godot_variant_new_plane? _godot_variant_new_plane;

  void godot_variant_new_quat(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_quat> p_quat,
  ) {
    return (_godot_variant_new_quat ??= _dylib.lookupFunction<
        _c_godot_variant_new_quat,
        _dart_godot_variant_new_quat>('godot_variant_new_quat'))(
      r_dest,
      p_quat,
    );
  }

  _dart_godot_variant_new_quat? _godot_variant_new_quat;

  void godot_variant_new_aabb(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_aabb> p_aabb,
  ) {
    return (_godot_variant_new_aabb ??= _dylib.lookupFunction<
        _c_godot_variant_new_aabb,
        _dart_godot_variant_new_aabb>('godot_variant_new_aabb'))(
      r_dest,
      p_aabb,
    );
  }

  _dart_godot_variant_new_aabb? _godot_variant_new_aabb;

  void godot_variant_new_basis(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_basis> p_basis,
  ) {
    return (_godot_variant_new_basis ??= _dylib.lookupFunction<
        _c_godot_variant_new_basis,
        _dart_godot_variant_new_basis>('godot_variant_new_basis'))(
      r_dest,
      p_basis,
    );
  }

  _dart_godot_variant_new_basis? _godot_variant_new_basis;

  void godot_variant_new_transform(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_transform> p_trans,
  ) {
    return (_godot_variant_new_transform ??= _dylib.lookupFunction<
        _c_godot_variant_new_transform,
        _dart_godot_variant_new_transform>('godot_variant_new_transform'))(
      r_dest,
      p_trans,
    );
  }

  _dart_godot_variant_new_transform? _godot_variant_new_transform;

  void godot_variant_new_color(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_color> p_color,
  ) {
    return (_godot_variant_new_color ??= _dylib.lookupFunction<
        _c_godot_variant_new_color,
        _dart_godot_variant_new_color>('godot_variant_new_color'))(
      r_dest,
      p_color,
    );
  }

  _dart_godot_variant_new_color? _godot_variant_new_color;

  void godot_variant_new_node_path(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_node_path> p_np,
  ) {
    return (_godot_variant_new_node_path ??= _dylib.lookupFunction<
        _c_godot_variant_new_node_path,
        _dart_godot_variant_new_node_path>('godot_variant_new_node_path'))(
      r_dest,
      p_np,
    );
  }

  _dart_godot_variant_new_node_path? _godot_variant_new_node_path;

  void godot_variant_new_rid(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_rid> p_rid,
  ) {
    return (_godot_variant_new_rid ??= _dylib.lookupFunction<
        _c_godot_variant_new_rid,
        _dart_godot_variant_new_rid>('godot_variant_new_rid'))(
      r_dest,
      p_rid,
    );
  }

  _dart_godot_variant_new_rid? _godot_variant_new_rid;

  void godot_variant_new_object(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<ffi.Void> p_obj,
  ) {
    return (_godot_variant_new_object ??= _dylib.lookupFunction<
        _c_godot_variant_new_object,
        _dart_godot_variant_new_object>('godot_variant_new_object'))(
      r_dest,
      p_obj,
    );
  }

  _dart_godot_variant_new_object? _godot_variant_new_object;

  void godot_variant_new_dictionary(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_dictionary> p_dict,
  ) {
    return (_godot_variant_new_dictionary ??= _dylib.lookupFunction<
        _c_godot_variant_new_dictionary,
        _dart_godot_variant_new_dictionary>('godot_variant_new_dictionary'))(
      r_dest,
      p_dict,
    );
  }

  _dart_godot_variant_new_dictionary? _godot_variant_new_dictionary;

  void godot_variant_new_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_array> p_arr,
  ) {
    return (_godot_variant_new_array ??= _dylib.lookupFunction<
        _c_godot_variant_new_array,
        _dart_godot_variant_new_array>('godot_variant_new_array'))(
      r_dest,
      p_arr,
    );
  }

  _dart_godot_variant_new_array? _godot_variant_new_array;

  void godot_variant_new_pool_byte_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_byte_array> p_pba,
  ) {
    return (_godot_variant_new_pool_byte_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_byte_array,
            _dart_godot_variant_new_pool_byte_array>(
        'godot_variant_new_pool_byte_array'))(
      r_dest,
      p_pba,
    );
  }

  _dart_godot_variant_new_pool_byte_array? _godot_variant_new_pool_byte_array;

  void godot_variant_new_pool_int_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_int_array> p_pia,
  ) {
    return (_godot_variant_new_pool_int_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_int_array,
            _dart_godot_variant_new_pool_int_array>(
        'godot_variant_new_pool_int_array'))(
      r_dest,
      p_pia,
    );
  }

  _dart_godot_variant_new_pool_int_array? _godot_variant_new_pool_int_array;

  void godot_variant_new_pool_real_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_real_array> p_pra,
  ) {
    return (_godot_variant_new_pool_real_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_real_array,
            _dart_godot_variant_new_pool_real_array>(
        'godot_variant_new_pool_real_array'))(
      r_dest,
      p_pra,
    );
  }

  _dart_godot_variant_new_pool_real_array? _godot_variant_new_pool_real_array;

  void godot_variant_new_pool_string_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_string_array> p_psa,
  ) {
    return (_godot_variant_new_pool_string_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_string_array,
            _dart_godot_variant_new_pool_string_array>(
        'godot_variant_new_pool_string_array'))(
      r_dest,
      p_psa,
    );
  }

  _dart_godot_variant_new_pool_string_array?
      _godot_variant_new_pool_string_array;

  void godot_variant_new_pool_vector2_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_vector2_array> p_pv2a,
  ) {
    return (_godot_variant_new_pool_vector2_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_vector2_array,
            _dart_godot_variant_new_pool_vector2_array>(
        'godot_variant_new_pool_vector2_array'))(
      r_dest,
      p_pv2a,
    );
  }

  _dart_godot_variant_new_pool_vector2_array?
      _godot_variant_new_pool_vector2_array;

  void godot_variant_new_pool_vector3_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_vector3_array> p_pv3a,
  ) {
    return (_godot_variant_new_pool_vector3_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_vector3_array,
            _dart_godot_variant_new_pool_vector3_array>(
        'godot_variant_new_pool_vector3_array'))(
      r_dest,
      p_pv3a,
    );
  }

  _dart_godot_variant_new_pool_vector3_array?
      _godot_variant_new_pool_vector3_array;

  void godot_variant_new_pool_color_array(
    ffi.Pointer<godot_variant> r_dest,
    ffi.Pointer<godot_pool_color_array> p_pca,
  ) {
    return (_godot_variant_new_pool_color_array ??= _dylib.lookupFunction<
            _c_godot_variant_new_pool_color_array,
            _dart_godot_variant_new_pool_color_array>(
        'godot_variant_new_pool_color_array'))(
      r_dest,
      p_pca,
    );
  }

  _dart_godot_variant_new_pool_color_array? _godot_variant_new_pool_color_array;

  bool godot_variant_as_bool(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_bool ??= _dylib.lookupFunction<
            _c_godot_variant_as_bool,
            _dart_godot_variant_as_bool>('godot_variant_as_bool'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_variant_as_bool? _godot_variant_as_bool;

  int godot_variant_as_uint(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_uint ??= _dylib.lookupFunction<
        _c_godot_variant_as_uint,
        _dart_godot_variant_as_uint>('godot_variant_as_uint'))(
      p_self,
    );
  }

  _dart_godot_variant_as_uint? _godot_variant_as_uint;

  int godot_variant_as_int(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_int ??= _dylib.lookupFunction<
        _c_godot_variant_as_int,
        _dart_godot_variant_as_int>('godot_variant_as_int'))(
      p_self,
    );
  }

  _dart_godot_variant_as_int? _godot_variant_as_int;

  double godot_variant_as_real(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_real ??= _dylib.lookupFunction<
        _c_godot_variant_as_real,
        _dart_godot_variant_as_real>('godot_variant_as_real'))(
      p_self,
    );
  }

  _dart_godot_variant_as_real? _godot_variant_as_real;

  godot_string godot_variant_as_string(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_string ??= _dylib.lookupFunction<
        _c_godot_variant_as_string,
        _dart_godot_variant_as_string>('godot_variant_as_string'))(
      p_self,
    );
  }

  _dart_godot_variant_as_string? _godot_variant_as_string;

  godot_vector2 godot_variant_as_vector2(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_vector2 ??= _dylib.lookupFunction<
        _c_godot_variant_as_vector2,
        _dart_godot_variant_as_vector2>('godot_variant_as_vector2'))(
      p_self,
    );
  }

  _dart_godot_variant_as_vector2? _godot_variant_as_vector2;

  godot_rect2 godot_variant_as_rect2(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_rect2 ??= _dylib.lookupFunction<
        _c_godot_variant_as_rect2,
        _dart_godot_variant_as_rect2>('godot_variant_as_rect2'))(
      p_self,
    );
  }

  _dart_godot_variant_as_rect2? _godot_variant_as_rect2;

  godot_vector3 godot_variant_as_vector3(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_vector3 ??= _dylib.lookupFunction<
        _c_godot_variant_as_vector3,
        _dart_godot_variant_as_vector3>('godot_variant_as_vector3'))(
      p_self,
    );
  }

  _dart_godot_variant_as_vector3? _godot_variant_as_vector3;

  godot_transform2d godot_variant_as_transform2d(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_transform2d ??= _dylib.lookupFunction<
        _c_godot_variant_as_transform2d,
        _dart_godot_variant_as_transform2d>('godot_variant_as_transform2d'))(
      p_self,
    );
  }

  _dart_godot_variant_as_transform2d? _godot_variant_as_transform2d;

  godot_plane godot_variant_as_plane(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_plane ??= _dylib.lookupFunction<
        _c_godot_variant_as_plane,
        _dart_godot_variant_as_plane>('godot_variant_as_plane'))(
      p_self,
    );
  }

  _dart_godot_variant_as_plane? _godot_variant_as_plane;

  godot_quat godot_variant_as_quat(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_quat ??= _dylib.lookupFunction<
        _c_godot_variant_as_quat,
        _dart_godot_variant_as_quat>('godot_variant_as_quat'))(
      p_self,
    );
  }

  _dart_godot_variant_as_quat? _godot_variant_as_quat;

  godot_aabb godot_variant_as_aabb(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_aabb ??= _dylib.lookupFunction<
        _c_godot_variant_as_aabb,
        _dart_godot_variant_as_aabb>('godot_variant_as_aabb'))(
      p_self,
    );
  }

  _dart_godot_variant_as_aabb? _godot_variant_as_aabb;

  godot_basis godot_variant_as_basis(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_basis ??= _dylib.lookupFunction<
        _c_godot_variant_as_basis,
        _dart_godot_variant_as_basis>('godot_variant_as_basis'))(
      p_self,
    );
  }

  _dart_godot_variant_as_basis? _godot_variant_as_basis;

  godot_transform godot_variant_as_transform(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_transform ??= _dylib.lookupFunction<
        _c_godot_variant_as_transform,
        _dart_godot_variant_as_transform>('godot_variant_as_transform'))(
      p_self,
    );
  }

  _dart_godot_variant_as_transform? _godot_variant_as_transform;

  godot_color godot_variant_as_color(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_color ??= _dylib.lookupFunction<
        _c_godot_variant_as_color,
        _dart_godot_variant_as_color>('godot_variant_as_color'))(
      p_self,
    );
  }

  _dart_godot_variant_as_color? _godot_variant_as_color;

  godot_node_path godot_variant_as_node_path(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_node_path ??= _dylib.lookupFunction<
        _c_godot_variant_as_node_path,
        _dart_godot_variant_as_node_path>('godot_variant_as_node_path'))(
      p_self,
    );
  }

  _dart_godot_variant_as_node_path? _godot_variant_as_node_path;

  godot_rid godot_variant_as_rid(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_rid ??= _dylib.lookupFunction<
        _c_godot_variant_as_rid,
        _dart_godot_variant_as_rid>('godot_variant_as_rid'))(
      p_self,
    );
  }

  _dart_godot_variant_as_rid? _godot_variant_as_rid;

  ffi.Pointer<ffi.Void> godot_variant_as_object(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_object ??= _dylib.lookupFunction<
        _c_godot_variant_as_object,
        _dart_godot_variant_as_object>('godot_variant_as_object'))(
      p_self,
    );
  }

  _dart_godot_variant_as_object? _godot_variant_as_object;

  godot_dictionary godot_variant_as_dictionary(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_dictionary ??= _dylib.lookupFunction<
        _c_godot_variant_as_dictionary,
        _dart_godot_variant_as_dictionary>('godot_variant_as_dictionary'))(
      p_self,
    );
  }

  _dart_godot_variant_as_dictionary? _godot_variant_as_dictionary;

  godot_array godot_variant_as_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_array ??= _dylib.lookupFunction<
        _c_godot_variant_as_array,
        _dart_godot_variant_as_array>('godot_variant_as_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_array? _godot_variant_as_array;

  godot_pool_byte_array godot_variant_as_pool_byte_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_byte_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_byte_array,
            _dart_godot_variant_as_pool_byte_array>(
        'godot_variant_as_pool_byte_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_byte_array? _godot_variant_as_pool_byte_array;

  godot_pool_int_array godot_variant_as_pool_int_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_int_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_int_array,
            _dart_godot_variant_as_pool_int_array>(
        'godot_variant_as_pool_int_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_int_array? _godot_variant_as_pool_int_array;

  godot_pool_real_array godot_variant_as_pool_real_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_real_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_real_array,
            _dart_godot_variant_as_pool_real_array>(
        'godot_variant_as_pool_real_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_real_array? _godot_variant_as_pool_real_array;

  godot_pool_string_array godot_variant_as_pool_string_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_string_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_string_array,
            _dart_godot_variant_as_pool_string_array>(
        'godot_variant_as_pool_string_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_string_array? _godot_variant_as_pool_string_array;

  godot_pool_vector2_array godot_variant_as_pool_vector2_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_vector2_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_vector2_array,
            _dart_godot_variant_as_pool_vector2_array>(
        'godot_variant_as_pool_vector2_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_vector2_array?
      _godot_variant_as_pool_vector2_array;

  godot_pool_vector3_array godot_variant_as_pool_vector3_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_vector3_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_vector3_array,
            _dart_godot_variant_as_pool_vector3_array>(
        'godot_variant_as_pool_vector3_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_vector3_array?
      _godot_variant_as_pool_vector3_array;

  godot_pool_color_array godot_variant_as_pool_color_array(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_as_pool_color_array ??= _dylib.lookupFunction<
            _c_godot_variant_as_pool_color_array,
            _dart_godot_variant_as_pool_color_array>(
        'godot_variant_as_pool_color_array'))(
      p_self,
    );
  }

  _dart_godot_variant_as_pool_color_array? _godot_variant_as_pool_color_array;

  godot_variant godot_variant_call(
    ffi.Pointer<godot_variant> p_self,
    ffi.Pointer<godot_string> p_method,
    ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
    int p_argcount,
    ffi.Pointer<godot_variant_call_error> r_error,
  ) {
    return (_godot_variant_call ??=
        _dylib.lookupFunction<_c_godot_variant_call, _dart_godot_variant_call>(
            'godot_variant_call'))(
      p_self,
      p_method,
      p_args,
      p_argcount,
      r_error,
    );
  }

  _dart_godot_variant_call? _godot_variant_call;

  bool godot_variant_has_method(
    ffi.Pointer<godot_variant> p_self,
    ffi.Pointer<godot_string> p_method,
  ) {
    return (_godot_variant_has_method ??= _dylib.lookupFunction<
            _c_godot_variant_has_method,
            _dart_godot_variant_has_method>('godot_variant_has_method'))(
          p_self,
          p_method,
        ) !=
        0;
  }

  _dart_godot_variant_has_method? _godot_variant_has_method;

  bool godot_variant_operator_equal(
    ffi.Pointer<godot_variant> p_self,
    ffi.Pointer<godot_variant> p_other,
  ) {
    return (_godot_variant_operator_equal ??= _dylib.lookupFunction<
                _c_godot_variant_operator_equal,
                _dart_godot_variant_operator_equal>(
            'godot_variant_operator_equal'))(
          p_self,
          p_other,
        ) !=
        0;
  }

  _dart_godot_variant_operator_equal? _godot_variant_operator_equal;

  bool godot_variant_operator_less(
    ffi.Pointer<godot_variant> p_self,
    ffi.Pointer<godot_variant> p_other,
  ) {
    return (_godot_variant_operator_less ??= _dylib.lookupFunction<
            _c_godot_variant_operator_less,
            _dart_godot_variant_operator_less>('godot_variant_operator_less'))(
          p_self,
          p_other,
        ) !=
        0;
  }

  _dart_godot_variant_operator_less? _godot_variant_operator_less;

  bool godot_variant_hash_compare(
    ffi.Pointer<godot_variant> p_self,
    ffi.Pointer<godot_variant> p_other,
  ) {
    return (_godot_variant_hash_compare ??= _dylib.lookupFunction<
            _c_godot_variant_hash_compare,
            _dart_godot_variant_hash_compare>('godot_variant_hash_compare'))(
          p_self,
          p_other,
        ) !=
        0;
  }

  _dart_godot_variant_hash_compare? _godot_variant_hash_compare;

  bool godot_variant_booleanize(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_booleanize ??= _dylib.lookupFunction<
            _c_godot_variant_booleanize,
            _dart_godot_variant_booleanize>('godot_variant_booleanize'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_variant_booleanize? _godot_variant_booleanize;

  void godot_variant_destroy(
    ffi.Pointer<godot_variant> p_self,
  ) {
    return (_godot_variant_destroy ??= _dylib.lookupFunction<
        _c_godot_variant_destroy,
        _dart_godot_variant_destroy>('godot_variant_destroy'))(
      p_self,
    );
  }

  _dart_godot_variant_destroy? _godot_variant_destroy;

  godot_string godot_variant_get_operator_name(
    int p_op,
  ) {
    return (_godot_variant_get_operator_name ??= _dylib.lookupFunction<
            _c_godot_variant_get_operator_name,
            _dart_godot_variant_get_operator_name>(
        'godot_variant_get_operator_name'))(
      p_op,
    );
  }

  _dart_godot_variant_get_operator_name? _godot_variant_get_operator_name;

  void godot_variant_evaluate(
    int p_op,
    ffi.Pointer<godot_variant> p_a,
    ffi.Pointer<godot_variant> p_b,
    ffi.Pointer<godot_variant> r_ret,
    ffi.Pointer<ffi.Uint8> r_valid,
  ) {
    return (_godot_variant_evaluate ??= _dylib.lookupFunction<
        _c_godot_variant_evaluate,
        _dart_godot_variant_evaluate>('godot_variant_evaluate'))(
      p_op,
      p_a,
      p_b,
      r_ret,
      r_valid,
    );
  }

  _dart_godot_variant_evaluate? _godot_variant_evaluate;

  void godot_array_new(
    ffi.Pointer<godot_array> r_dest,
  ) {
    return (_godot_array_new ??=
        _dylib.lookupFunction<_c_godot_array_new, _dart_godot_array_new>(
            'godot_array_new'))(
      r_dest,
    );
  }

  _dart_godot_array_new? _godot_array_new;

  void godot_array_new_copy(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_array> p_src,
  ) {
    return (_godot_array_new_copy ??= _dylib.lookupFunction<
        _c_godot_array_new_copy,
        _dart_godot_array_new_copy>('godot_array_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_array_new_copy? _godot_array_new_copy;

  void godot_array_new_pool_color_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_color_array> p_pca,
  ) {
    return (_godot_array_new_pool_color_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_color_array,
            _dart_godot_array_new_pool_color_array>(
        'godot_array_new_pool_color_array'))(
      r_dest,
      p_pca,
    );
  }

  _dart_godot_array_new_pool_color_array? _godot_array_new_pool_color_array;

  void godot_array_new_pool_vector3_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_vector3_array> p_pv3a,
  ) {
    return (_godot_array_new_pool_vector3_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_vector3_array,
            _dart_godot_array_new_pool_vector3_array>(
        'godot_array_new_pool_vector3_array'))(
      r_dest,
      p_pv3a,
    );
  }

  _dart_godot_array_new_pool_vector3_array? _godot_array_new_pool_vector3_array;

  void godot_array_new_pool_vector2_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_vector2_array> p_pv2a,
  ) {
    return (_godot_array_new_pool_vector2_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_vector2_array,
            _dart_godot_array_new_pool_vector2_array>(
        'godot_array_new_pool_vector2_array'))(
      r_dest,
      p_pv2a,
    );
  }

  _dart_godot_array_new_pool_vector2_array? _godot_array_new_pool_vector2_array;

  void godot_array_new_pool_string_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_string_array> p_psa,
  ) {
    return (_godot_array_new_pool_string_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_string_array,
            _dart_godot_array_new_pool_string_array>(
        'godot_array_new_pool_string_array'))(
      r_dest,
      p_psa,
    );
  }

  _dart_godot_array_new_pool_string_array? _godot_array_new_pool_string_array;

  void godot_array_new_pool_real_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_real_array> p_pra,
  ) {
    return (_godot_array_new_pool_real_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_real_array,
            _dart_godot_array_new_pool_real_array>(
        'godot_array_new_pool_real_array'))(
      r_dest,
      p_pra,
    );
  }

  _dart_godot_array_new_pool_real_array? _godot_array_new_pool_real_array;

  void godot_array_new_pool_int_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_int_array> p_pia,
  ) {
    return (_godot_array_new_pool_int_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_int_array,
            _dart_godot_array_new_pool_int_array>(
        'godot_array_new_pool_int_array'))(
      r_dest,
      p_pia,
    );
  }

  _dart_godot_array_new_pool_int_array? _godot_array_new_pool_int_array;

  void godot_array_new_pool_byte_array(
    ffi.Pointer<godot_array> r_dest,
    ffi.Pointer<godot_pool_byte_array> p_pba,
  ) {
    return (_godot_array_new_pool_byte_array ??= _dylib.lookupFunction<
            _c_godot_array_new_pool_byte_array,
            _dart_godot_array_new_pool_byte_array>(
        'godot_array_new_pool_byte_array'))(
      r_dest,
      p_pba,
    );
  }

  _dart_godot_array_new_pool_byte_array? _godot_array_new_pool_byte_array;

  void godot_array_set(
    ffi.Pointer<godot_array> p_self,
    int p_idx,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_set ??=
        _dylib.lookupFunction<_c_godot_array_set, _dart_godot_array_set>(
            'godot_array_set'))(
      p_self,
      p_idx,
      p_value,
    );
  }

  _dart_godot_array_set? _godot_array_set;

  godot_variant godot_array_get(
    ffi.Pointer<godot_array> p_self,
    int p_idx,
  ) {
    return (_godot_array_get ??=
        _dylib.lookupFunction<_c_godot_array_get, _dart_godot_array_get>(
            'godot_array_get'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_array_get? _godot_array_get;

  ffi.Pointer<godot_variant> godot_array_operator_index(
    ffi.Pointer<godot_array> p_self,
    int p_idx,
  ) {
    return (_godot_array_operator_index ??= _dylib.lookupFunction<
        _c_godot_array_operator_index,
        _dart_godot_array_operator_index>('godot_array_operator_index'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_array_operator_index? _godot_array_operator_index;

  ffi.Pointer<godot_variant> godot_array_operator_index_const(
    ffi.Pointer<godot_array> p_self,
    int p_idx,
  ) {
    return (_godot_array_operator_index_const ??= _dylib.lookupFunction<
            _c_godot_array_operator_index_const,
            _dart_godot_array_operator_index_const>(
        'godot_array_operator_index_const'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_array_operator_index_const? _godot_array_operator_index_const;

  void godot_array_append(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_append ??=
        _dylib.lookupFunction<_c_godot_array_append, _dart_godot_array_append>(
            'godot_array_append'))(
      p_self,
      p_value,
    );
  }

  _dart_godot_array_append? _godot_array_append;

  void godot_array_clear(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_clear ??=
        _dylib.lookupFunction<_c_godot_array_clear, _dart_godot_array_clear>(
            'godot_array_clear'))(
      p_self,
    );
  }

  _dart_godot_array_clear? _godot_array_clear;

  int godot_array_count(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_count ??=
        _dylib.lookupFunction<_c_godot_array_count, _dart_godot_array_count>(
            'godot_array_count'))(
      p_self,
      p_value,
    );
  }

  _dart_godot_array_count? _godot_array_count;

  bool godot_array_empty(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_empty ??= _dylib.lookupFunction<_c_godot_array_empty,
            _dart_godot_array_empty>('godot_array_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_array_empty? _godot_array_empty;

  void godot_array_erase(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_erase ??=
        _dylib.lookupFunction<_c_godot_array_erase, _dart_godot_array_erase>(
            'godot_array_erase'))(
      p_self,
      p_value,
    );
  }

  _dart_godot_array_erase? _godot_array_erase;

  godot_variant godot_array_front(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_front ??=
        _dylib.lookupFunction<_c_godot_array_front, _dart_godot_array_front>(
            'godot_array_front'))(
      p_self,
    );
  }

  _dart_godot_array_front? _godot_array_front;

  godot_variant godot_array_back(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_back ??=
        _dylib.lookupFunction<_c_godot_array_back, _dart_godot_array_back>(
            'godot_array_back'))(
      p_self,
    );
  }

  _dart_godot_array_back? _godot_array_back;

  int godot_array_find(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_what,
    int p_from,
  ) {
    return (_godot_array_find ??=
        _dylib.lookupFunction<_c_godot_array_find, _dart_godot_array_find>(
            'godot_array_find'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_array_find? _godot_array_find;

  int godot_array_find_last(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_what,
  ) {
    return (_godot_array_find_last ??= _dylib.lookupFunction<
        _c_godot_array_find_last,
        _dart_godot_array_find_last>('godot_array_find_last'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_array_find_last? _godot_array_find_last;

  bool godot_array_has(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_has ??=
            _dylib.lookupFunction<_c_godot_array_has, _dart_godot_array_has>(
                'godot_array_has'))(
          p_self,
          p_value,
        ) !=
        0;
  }

  _dart_godot_array_has? _godot_array_has;

  int godot_array_hash(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_hash ??=
        _dylib.lookupFunction<_c_godot_array_hash, _dart_godot_array_hash>(
            'godot_array_hash'))(
      p_self,
    );
  }

  _dart_godot_array_hash? _godot_array_hash;

  void godot_array_insert(
    ffi.Pointer<godot_array> p_self,
    int p_pos,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_insert ??=
        _dylib.lookupFunction<_c_godot_array_insert, _dart_godot_array_insert>(
            'godot_array_insert'))(
      p_self,
      p_pos,
      p_value,
    );
  }

  _dart_godot_array_insert? _godot_array_insert;

  void godot_array_invert(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_invert ??=
        _dylib.lookupFunction<_c_godot_array_invert, _dart_godot_array_invert>(
            'godot_array_invert'))(
      p_self,
    );
  }

  _dart_godot_array_invert? _godot_array_invert;

  godot_variant godot_array_pop_back(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_pop_back ??= _dylib.lookupFunction<
        _c_godot_array_pop_back,
        _dart_godot_array_pop_back>('godot_array_pop_back'))(
      p_self,
    );
  }

  _dart_godot_array_pop_back? _godot_array_pop_back;

  godot_variant godot_array_pop_front(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_pop_front ??= _dylib.lookupFunction<
        _c_godot_array_pop_front,
        _dart_godot_array_pop_front>('godot_array_pop_front'))(
      p_self,
    );
  }

  _dart_godot_array_pop_front? _godot_array_pop_front;

  void godot_array_push_back(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_push_back ??= _dylib.lookupFunction<
        _c_godot_array_push_back,
        _dart_godot_array_push_back>('godot_array_push_back'))(
      p_self,
      p_value,
    );
  }

  _dart_godot_array_push_back? _godot_array_push_back;

  void godot_array_push_front(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
  ) {
    return (_godot_array_push_front ??= _dylib.lookupFunction<
        _c_godot_array_push_front,
        _dart_godot_array_push_front>('godot_array_push_front'))(
      p_self,
      p_value,
    );
  }

  _dart_godot_array_push_front? _godot_array_push_front;

  void godot_array_remove(
    ffi.Pointer<godot_array> p_self,
    int p_idx,
  ) {
    return (_godot_array_remove ??=
        _dylib.lookupFunction<_c_godot_array_remove, _dart_godot_array_remove>(
            'godot_array_remove'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_array_remove? _godot_array_remove;

  void godot_array_resize(
    ffi.Pointer<godot_array> p_self,
    int p_size,
  ) {
    return (_godot_array_resize ??=
        _dylib.lookupFunction<_c_godot_array_resize, _dart_godot_array_resize>(
            'godot_array_resize'))(
      p_self,
      p_size,
    );
  }

  _dart_godot_array_resize? _godot_array_resize;

  int godot_array_rfind(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_what,
    int p_from,
  ) {
    return (_godot_array_rfind ??=
        _dylib.lookupFunction<_c_godot_array_rfind, _dart_godot_array_rfind>(
            'godot_array_rfind'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_array_rfind? _godot_array_rfind;

  int godot_array_size(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_size ??=
        _dylib.lookupFunction<_c_godot_array_size, _dart_godot_array_size>(
            'godot_array_size'))(
      p_self,
    );
  }

  _dart_godot_array_size? _godot_array_size;

  void godot_array_sort(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_sort ??=
        _dylib.lookupFunction<_c_godot_array_sort, _dart_godot_array_sort>(
            'godot_array_sort'))(
      p_self,
    );
  }

  _dart_godot_array_sort? _godot_array_sort;

  void godot_array_sort_custom(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<ffi.Void> p_obj,
    ffi.Pointer<godot_string> p_func,
  ) {
    return (_godot_array_sort_custom ??= _dylib.lookupFunction<
        _c_godot_array_sort_custom,
        _dart_godot_array_sort_custom>('godot_array_sort_custom'))(
      p_self,
      p_obj,
      p_func,
    );
  }

  _dart_godot_array_sort_custom? _godot_array_sort_custom;

  int godot_array_bsearch(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
    bool p_before,
  ) {
    return (_godot_array_bsearch ??= _dylib.lookupFunction<
        _c_godot_array_bsearch,
        _dart_godot_array_bsearch>('godot_array_bsearch'))(
      p_self,
      p_value,
      p_before ? 1 : 0,
    );
  }

  _dart_godot_array_bsearch? _godot_array_bsearch;

  int godot_array_bsearch_custom(
    ffi.Pointer<godot_array> p_self,
    ffi.Pointer<godot_variant> p_value,
    ffi.Pointer<ffi.Void> p_obj,
    ffi.Pointer<godot_string> p_func,
    bool p_before,
  ) {
    return (_godot_array_bsearch_custom ??= _dylib.lookupFunction<
        _c_godot_array_bsearch_custom,
        _dart_godot_array_bsearch_custom>('godot_array_bsearch_custom'))(
      p_self,
      p_value,
      p_obj,
      p_func,
      p_before ? 1 : 0,
    );
  }

  _dart_godot_array_bsearch_custom? _godot_array_bsearch_custom;

  void godot_array_destroy(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_destroy ??= _dylib.lookupFunction<
        _c_godot_array_destroy,
        _dart_godot_array_destroy>('godot_array_destroy'))(
      p_self,
    );
  }

  _dart_godot_array_destroy? _godot_array_destroy;

  godot_array godot_array_duplicate(
    ffi.Pointer<godot_array> p_self,
    bool p_deep,
  ) {
    return (_godot_array_duplicate ??= _dylib.lookupFunction<
        _c_godot_array_duplicate,
        _dart_godot_array_duplicate>('godot_array_duplicate'))(
      p_self,
      p_deep ? 1 : 0,
    );
  }

  _dart_godot_array_duplicate? _godot_array_duplicate;

  godot_array godot_array_slice(
    ffi.Pointer<godot_array> p_self,
    int p_begin,
    int p_end,
    int p_step,
    bool p_deep,
  ) {
    return (_godot_array_slice ??=
        _dylib.lookupFunction<_c_godot_array_slice, _dart_godot_array_slice>(
            'godot_array_slice'))(
      p_self,
      p_begin,
      p_end,
      p_step,
      p_deep ? 1 : 0,
    );
  }

  _dart_godot_array_slice? _godot_array_slice;

  godot_variant godot_array_max(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_max ??=
        _dylib.lookupFunction<_c_godot_array_max, _dart_godot_array_max>(
            'godot_array_max'))(
      p_self,
    );
  }

  _dart_godot_array_max? _godot_array_max;

  godot_variant godot_array_min(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_min ??=
        _dylib.lookupFunction<_c_godot_array_min, _dart_godot_array_min>(
            'godot_array_min'))(
      p_self,
    );
  }

  _dart_godot_array_min? _godot_array_min;

  void godot_array_shuffle(
    ffi.Pointer<godot_array> p_self,
  ) {
    return (_godot_array_shuffle ??= _dylib.lookupFunction<
        _c_godot_array_shuffle,
        _dart_godot_array_shuffle>('godot_array_shuffle'))(
      p_self,
    );
  }

  _dart_godot_array_shuffle? _godot_array_shuffle;

  int godot_char_string_length(
    ffi.Pointer<godot_char_string> p_cs,
  ) {
    return (_godot_char_string_length ??= _dylib.lookupFunction<
        _c_godot_char_string_length,
        _dart_godot_char_string_length>('godot_char_string_length'))(
      p_cs,
    );
  }

  _dart_godot_char_string_length? _godot_char_string_length;

  ffi.Pointer<ffi.Int8> godot_char_string_get_data(
    ffi.Pointer<godot_char_string> p_cs,
  ) {
    return (_godot_char_string_get_data ??= _dylib.lookupFunction<
        _c_godot_char_string_get_data,
        _dart_godot_char_string_get_data>('godot_char_string_get_data'))(
      p_cs,
    );
  }

  _dart_godot_char_string_get_data? _godot_char_string_get_data;

  void godot_char_string_destroy(
    ffi.Pointer<godot_char_string> p_cs,
  ) {
    return (_godot_char_string_destroy ??= _dylib.lookupFunction<
        _c_godot_char_string_destroy,
        _dart_godot_char_string_destroy>('godot_char_string_destroy'))(
      p_cs,
    );
  }

  _dart_godot_char_string_destroy? _godot_char_string_destroy;

  void godot_string_new(
    ffi.Pointer<godot_string> r_dest,
  ) {
    return (_godot_string_new ??=
        _dylib.lookupFunction<_c_godot_string_new, _dart_godot_string_new>(
            'godot_string_new'))(
      r_dest,
    );
  }

  _dart_godot_string_new? _godot_string_new;

  void godot_string_new_copy(
    ffi.Pointer<godot_string> r_dest,
    ffi.Pointer<godot_string> p_src,
  ) {
    return (_godot_string_new_copy ??= _dylib.lookupFunction<
        _c_godot_string_new_copy,
        _dart_godot_string_new_copy>('godot_string_new_copy'))(
      r_dest,
      p_src,
    );
  }

  _dart_godot_string_new_copy? _godot_string_new_copy;

  void godot_string_new_with_wide_string(
    ffi.Pointer<godot_string> r_dest,
    ffi.Pointer<ffi.Int32> p_contents,
    int p_size,
  ) {
    return (_godot_string_new_with_wide_string ??= _dylib.lookupFunction<
            _c_godot_string_new_with_wide_string,
            _dart_godot_string_new_with_wide_string>(
        'godot_string_new_with_wide_string'))(
      r_dest,
      p_contents,
      p_size,
    );
  }

  _dart_godot_string_new_with_wide_string? _godot_string_new_with_wide_string;

  ffi.Pointer<ffi.Int32> godot_string_operator_index(
    ffi.Pointer<godot_string> p_self,
    int p_idx,
  ) {
    return (_godot_string_operator_index ??= _dylib.lookupFunction<
        _c_godot_string_operator_index,
        _dart_godot_string_operator_index>('godot_string_operator_index'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_string_operator_index? _godot_string_operator_index;

  int godot_string_operator_index_const(
    ffi.Pointer<godot_string> p_self,
    int p_idx,
  ) {
    return (_godot_string_operator_index_const ??= _dylib.lookupFunction<
            _c_godot_string_operator_index_const,
            _dart_godot_string_operator_index_const>(
        'godot_string_operator_index_const'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_string_operator_index_const? _godot_string_operator_index_const;

  ffi.Pointer<ffi.Int32> godot_string_wide_str(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_wide_str ??= _dylib.lookupFunction<
        _c_godot_string_wide_str,
        _dart_godot_string_wide_str>('godot_string_wide_str'))(
      p_self,
    );
  }

  _dart_godot_string_wide_str? _godot_string_wide_str;

  bool godot_string_operator_equal(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_b,
  ) {
    return (_godot_string_operator_equal ??= _dylib.lookupFunction<
            _c_godot_string_operator_equal,
            _dart_godot_string_operator_equal>('godot_string_operator_equal'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_string_operator_equal? _godot_string_operator_equal;

  bool godot_string_operator_less(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_b,
  ) {
    return (_godot_string_operator_less ??= _dylib.lookupFunction<
            _c_godot_string_operator_less,
            _dart_godot_string_operator_less>('godot_string_operator_less'))(
          p_self,
          p_b,
        ) !=
        0;
  }

  _dart_godot_string_operator_less? _godot_string_operator_less;

  godot_string godot_string_operator_plus(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_b,
  ) {
    return (_godot_string_operator_plus ??= _dylib.lookupFunction<
        _c_godot_string_operator_plus,
        _dart_godot_string_operator_plus>('godot_string_operator_plus'))(
      p_self,
      p_b,
    );
  }

  _dart_godot_string_operator_plus? _godot_string_operator_plus;

  int godot_string_length(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_length ??= _dylib.lookupFunction<
        _c_godot_string_length,
        _dart_godot_string_length>('godot_string_length'))(
      p_self,
    );
  }

  _dart_godot_string_length? _godot_string_length;

  int godot_string_casecmp_to(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_str,
  ) {
    return (_godot_string_casecmp_to ??= _dylib.lookupFunction<
        _c_godot_string_casecmp_to,
        _dart_godot_string_casecmp_to>('godot_string_casecmp_to'))(
      p_self,
      p_str,
    );
  }

  _dart_godot_string_casecmp_to? _godot_string_casecmp_to;

  int godot_string_nocasecmp_to(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_str,
  ) {
    return (_godot_string_nocasecmp_to ??= _dylib.lookupFunction<
        _c_godot_string_nocasecmp_to,
        _dart_godot_string_nocasecmp_to>('godot_string_nocasecmp_to'))(
      p_self,
      p_str,
    );
  }

  _dart_godot_string_nocasecmp_to? _godot_string_nocasecmp_to;

  int godot_string_naturalnocasecmp_to(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_str,
  ) {
    return (_godot_string_naturalnocasecmp_to ??= _dylib.lookupFunction<
            _c_godot_string_naturalnocasecmp_to,
            _dart_godot_string_naturalnocasecmp_to>(
        'godot_string_naturalnocasecmp_to'))(
      p_self,
      p_str,
    );
  }

  _dart_godot_string_naturalnocasecmp_to? _godot_string_naturalnocasecmp_to;

  bool godot_string_begins_with(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_string,
  ) {
    return (_godot_string_begins_with ??= _dylib.lookupFunction<
            _c_godot_string_begins_with,
            _dart_godot_string_begins_with>('godot_string_begins_with'))(
          p_self,
          p_string,
        ) !=
        0;
  }

  _dart_godot_string_begins_with? _godot_string_begins_with;

  bool godot_string_begins_with_char_array(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<ffi.Int8> p_char_array,
  ) {
    return (_godot_string_begins_with_char_array ??= _dylib.lookupFunction<
                _c_godot_string_begins_with_char_array,
                _dart_godot_string_begins_with_char_array>(
            'godot_string_begins_with_char_array'))(
          p_self,
          p_char_array,
        ) !=
        0;
  }

  _dart_godot_string_begins_with_char_array?
      _godot_string_begins_with_char_array;

  godot_array godot_string_bigrams(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_bigrams ??= _dylib.lookupFunction<
        _c_godot_string_bigrams,
        _dart_godot_string_bigrams>('godot_string_bigrams'))(
      p_self,
    );
  }

  _dart_godot_string_bigrams? _godot_string_bigrams;

  godot_string godot_string_chr(
    int p_character,
  ) {
    return (_godot_string_chr ??=
        _dylib.lookupFunction<_c_godot_string_chr, _dart_godot_string_chr>(
            'godot_string_chr'))(
      p_character,
    );
  }

  _dart_godot_string_chr? _godot_string_chr;

  bool godot_string_ends_with(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_string,
  ) {
    return (_godot_string_ends_with ??= _dylib.lookupFunction<
            _c_godot_string_ends_with,
            _dart_godot_string_ends_with>('godot_string_ends_with'))(
          p_self,
          p_string,
        ) !=
        0;
  }

  _dart_godot_string_ends_with? _godot_string_ends_with;

  int godot_string_count(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
    int p_to,
  ) {
    return (_godot_string_count ??=
        _dylib.lookupFunction<_c_godot_string_count, _dart_godot_string_count>(
            'godot_string_count'))(
      p_self,
      p_what,
      p_from,
      p_to,
    );
  }

  _dart_godot_string_count? _godot_string_count;

  int godot_string_countn(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
    int p_to,
  ) {
    return (_godot_string_countn ??= _dylib.lookupFunction<
        _c_godot_string_countn,
        _dart_godot_string_countn>('godot_string_countn'))(
      p_self,
      p_what,
      p_from,
      p_to,
    );
  }

  _dart_godot_string_countn? _godot_string_countn;

  int godot_string_find(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
  ) {
    return (_godot_string_find ??=
        _dylib.lookupFunction<_c_godot_string_find, _dart_godot_string_find>(
            'godot_string_find'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_string_find? _godot_string_find;

  int godot_string_find_from(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
  ) {
    return (_godot_string_find_from ??= _dylib.lookupFunction<
        _c_godot_string_find_from,
        _dart_godot_string_find_from>('godot_string_find_from'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_string_find_from? _godot_string_find_from;

  int godot_string_findmk(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_keys,
  ) {
    return (_godot_string_findmk ??= _dylib.lookupFunction<
        _c_godot_string_findmk,
        _dart_godot_string_findmk>('godot_string_findmk'))(
      p_self,
      p_keys,
    );
  }

  _dart_godot_string_findmk? _godot_string_findmk;

  int godot_string_findmk_from(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_keys,
    int p_from,
  ) {
    return (_godot_string_findmk_from ??= _dylib.lookupFunction<
        _c_godot_string_findmk_from,
        _dart_godot_string_findmk_from>('godot_string_findmk_from'))(
      p_self,
      p_keys,
      p_from,
    );
  }

  _dart_godot_string_findmk_from? _godot_string_findmk_from;

  int godot_string_findmk_from_in_place(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_keys,
    int p_from,
    ffi.Pointer<ffi.Int32> r_key,
  ) {
    return (_godot_string_findmk_from_in_place ??= _dylib.lookupFunction<
            _c_godot_string_findmk_from_in_place,
            _dart_godot_string_findmk_from_in_place>(
        'godot_string_findmk_from_in_place'))(
      p_self,
      p_keys,
      p_from,
      r_key,
    );
  }

  _dart_godot_string_findmk_from_in_place? _godot_string_findmk_from_in_place;

  int godot_string_findn(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
  ) {
    return (_godot_string_findn ??=
        _dylib.lookupFunction<_c_godot_string_findn, _dart_godot_string_findn>(
            'godot_string_findn'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_string_findn? _godot_string_findn;

  int godot_string_findn_from(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
  ) {
    return (_godot_string_findn_from ??= _dylib.lookupFunction<
        _c_godot_string_findn_from,
        _dart_godot_string_findn_from>('godot_string_findn_from'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_string_findn_from? _godot_string_findn_from;

  int godot_string_find_last(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
  ) {
    return (_godot_string_find_last ??= _dylib.lookupFunction<
        _c_godot_string_find_last,
        _dart_godot_string_find_last>('godot_string_find_last'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_string_find_last? _godot_string_find_last;

  godot_string godot_string_format(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_variant> p_values,
  ) {
    return (_godot_string_format ??= _dylib.lookupFunction<
        _c_godot_string_format,
        _dart_godot_string_format>('godot_string_format'))(
      p_self,
      p_values,
    );
  }

  _dart_godot_string_format? _godot_string_format;

  godot_string godot_string_format_with_custom_placeholder(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_variant> p_values,
    ffi.Pointer<ffi.Int8> p_placeholder,
  ) {
    return (_godot_string_format_with_custom_placeholder ??=
        _dylib.lookupFunction<_c_godot_string_format_with_custom_placeholder,
                _dart_godot_string_format_with_custom_placeholder>(
            'godot_string_format_with_custom_placeholder'))(
      p_self,
      p_values,
      p_placeholder,
    );
  }

  _dart_godot_string_format_with_custom_placeholder?
      _godot_string_format_with_custom_placeholder;

  godot_string godot_string_hex_encode_buffer(
    ffi.Pointer<ffi.Uint8> p_buffer,
    int p_len,
  ) {
    return (_godot_string_hex_encode_buffer ??= _dylib.lookupFunction<
            _c_godot_string_hex_encode_buffer,
            _dart_godot_string_hex_encode_buffer>(
        'godot_string_hex_encode_buffer'))(
      p_buffer,
      p_len,
    );
  }

  _dart_godot_string_hex_encode_buffer? _godot_string_hex_encode_buffer;

  int godot_string_hex_to_int(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hex_to_int ??= _dylib.lookupFunction<
        _c_godot_string_hex_to_int,
        _dart_godot_string_hex_to_int>('godot_string_hex_to_int'))(
      p_self,
    );
  }

  _dart_godot_string_hex_to_int? _godot_string_hex_to_int;

  int godot_string_hex_to_int_without_prefix(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hex_to_int_without_prefix ??= _dylib.lookupFunction<
            _c_godot_string_hex_to_int_without_prefix,
            _dart_godot_string_hex_to_int_without_prefix>(
        'godot_string_hex_to_int_without_prefix'))(
      p_self,
    );
  }

  _dart_godot_string_hex_to_int_without_prefix?
      _godot_string_hex_to_int_without_prefix;

  godot_string godot_string_insert(
    ffi.Pointer<godot_string> p_self,
    int p_at_pos,
    godot_string p_string,
  ) {
    return (_godot_string_insert ??= _dylib.lookupFunction<
        _c_godot_string_insert,
        _dart_godot_string_insert>('godot_string_insert'))(
      p_self,
      p_at_pos,
      p_string,
    );
  }

  _dart_godot_string_insert? _godot_string_insert;

  bool godot_string_is_numeric(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_numeric ??= _dylib.lookupFunction<
            _c_godot_string_is_numeric,
            _dart_godot_string_is_numeric>('godot_string_is_numeric'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_numeric? _godot_string_is_numeric;

  bool godot_string_is_subsequence_of(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_string,
  ) {
    return (_godot_string_is_subsequence_of ??= _dylib.lookupFunction<
                _c_godot_string_is_subsequence_of,
                _dart_godot_string_is_subsequence_of>(
            'godot_string_is_subsequence_of'))(
          p_self,
          p_string,
        ) !=
        0;
  }

  _dart_godot_string_is_subsequence_of? _godot_string_is_subsequence_of;

  bool godot_string_is_subsequence_ofi(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_string,
  ) {
    return (_godot_string_is_subsequence_ofi ??= _dylib.lookupFunction<
                _c_godot_string_is_subsequence_ofi,
                _dart_godot_string_is_subsequence_ofi>(
            'godot_string_is_subsequence_ofi'))(
          p_self,
          p_string,
        ) !=
        0;
  }

  _dart_godot_string_is_subsequence_ofi? _godot_string_is_subsequence_ofi;

  godot_string godot_string_lpad(
    ffi.Pointer<godot_string> p_self,
    int p_min_length,
  ) {
    return (_godot_string_lpad ??=
        _dylib.lookupFunction<_c_godot_string_lpad, _dart_godot_string_lpad>(
            'godot_string_lpad'))(
      p_self,
      p_min_length,
    );
  }

  _dart_godot_string_lpad? _godot_string_lpad;

  godot_string godot_string_lpad_with_custom_character(
    ffi.Pointer<godot_string> p_self,
    int p_min_length,
    ffi.Pointer<godot_string> p_character,
  ) {
    return (_godot_string_lpad_with_custom_character ??= _dylib.lookupFunction<
            _c_godot_string_lpad_with_custom_character,
            _dart_godot_string_lpad_with_custom_character>(
        'godot_string_lpad_with_custom_character'))(
      p_self,
      p_min_length,
      p_character,
    );
  }

  _dart_godot_string_lpad_with_custom_character?
      _godot_string_lpad_with_custom_character;

  bool godot_string_match(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_wildcard,
  ) {
    return (_godot_string_match ??= _dylib.lookupFunction<_c_godot_string_match,
            _dart_godot_string_match>('godot_string_match'))(
          p_self,
          p_wildcard,
        ) !=
        0;
  }

  _dart_godot_string_match? _godot_string_match;

  bool godot_string_matchn(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_wildcard,
  ) {
    return (_godot_string_matchn ??= _dylib.lookupFunction<
            _c_godot_string_matchn,
            _dart_godot_string_matchn>('godot_string_matchn'))(
          p_self,
          p_wildcard,
        ) !=
        0;
  }

  _dart_godot_string_matchn? _godot_string_matchn;

  godot_string godot_string_md5(
    ffi.Pointer<ffi.Uint8> p_md5,
  ) {
    return (_godot_string_md5 ??=
        _dylib.lookupFunction<_c_godot_string_md5, _dart_godot_string_md5>(
            'godot_string_md5'))(
      p_md5,
    );
  }

  _dart_godot_string_md5? _godot_string_md5;

  godot_string godot_string_num(
    double p_num,
  ) {
    return (_godot_string_num ??=
        _dylib.lookupFunction<_c_godot_string_num, _dart_godot_string_num>(
            'godot_string_num'))(
      p_num,
    );
  }

  _dart_godot_string_num? _godot_string_num;

  godot_string godot_string_num_int64(
    int p_num,
    int p_base,
  ) {
    return (_godot_string_num_int64 ??= _dylib.lookupFunction<
        _c_godot_string_num_int64,
        _dart_godot_string_num_int64>('godot_string_num_int64'))(
      p_num,
      p_base,
    );
  }

  _dart_godot_string_num_int64? _godot_string_num_int64;

  godot_string godot_string_num_int64_capitalized(
    int p_num,
    int p_base,
    bool p_capitalize_hex,
  ) {
    return (_godot_string_num_int64_capitalized ??= _dylib.lookupFunction<
            _c_godot_string_num_int64_capitalized,
            _dart_godot_string_num_int64_capitalized>(
        'godot_string_num_int64_capitalized'))(
      p_num,
      p_base,
      p_capitalize_hex ? 1 : 0,
    );
  }

  _dart_godot_string_num_int64_capitalized? _godot_string_num_int64_capitalized;

  godot_string godot_string_num_real(
    double p_num,
  ) {
    return (_godot_string_num_real ??= _dylib.lookupFunction<
        _c_godot_string_num_real,
        _dart_godot_string_num_real>('godot_string_num_real'))(
      p_num,
    );
  }

  _dart_godot_string_num_real? _godot_string_num_real;

  godot_string godot_string_num_scientific(
    double p_num,
  ) {
    return (_godot_string_num_scientific ??= _dylib.lookupFunction<
        _c_godot_string_num_scientific,
        _dart_godot_string_num_scientific>('godot_string_num_scientific'))(
      p_num,
    );
  }

  _dart_godot_string_num_scientific? _godot_string_num_scientific;

  godot_string godot_string_num_with_decimals(
    double p_num,
    int p_decimals,
  ) {
    return (_godot_string_num_with_decimals ??= _dylib.lookupFunction<
            _c_godot_string_num_with_decimals,
            _dart_godot_string_num_with_decimals>(
        'godot_string_num_with_decimals'))(
      p_num,
      p_decimals,
    );
  }

  _dart_godot_string_num_with_decimals? _godot_string_num_with_decimals;

  godot_string godot_string_pad_decimals(
    ffi.Pointer<godot_string> p_self,
    int p_digits,
  ) {
    return (_godot_string_pad_decimals ??= _dylib.lookupFunction<
        _c_godot_string_pad_decimals,
        _dart_godot_string_pad_decimals>('godot_string_pad_decimals'))(
      p_self,
      p_digits,
    );
  }

  _dart_godot_string_pad_decimals? _godot_string_pad_decimals;

  godot_string godot_string_pad_zeros(
    ffi.Pointer<godot_string> p_self,
    int p_digits,
  ) {
    return (_godot_string_pad_zeros ??= _dylib.lookupFunction<
        _c_godot_string_pad_zeros,
        _dart_godot_string_pad_zeros>('godot_string_pad_zeros'))(
      p_self,
      p_digits,
    );
  }

  _dart_godot_string_pad_zeros? _godot_string_pad_zeros;

  godot_string godot_string_replace_first(
    ffi.Pointer<godot_string> p_self,
    godot_string p_key,
    godot_string p_with,
  ) {
    return (_godot_string_replace_first ??= _dylib.lookupFunction<
        _c_godot_string_replace_first,
        _dart_godot_string_replace_first>('godot_string_replace_first'))(
      p_self,
      p_key,
      p_with,
    );
  }

  _dart_godot_string_replace_first? _godot_string_replace_first;

  godot_string godot_string_replace(
    ffi.Pointer<godot_string> p_self,
    godot_string p_key,
    godot_string p_with,
  ) {
    return (_godot_string_replace ??= _dylib.lookupFunction<
        _c_godot_string_replace,
        _dart_godot_string_replace>('godot_string_replace'))(
      p_self,
      p_key,
      p_with,
    );
  }

  _dart_godot_string_replace? _godot_string_replace;

  godot_string godot_string_replacen(
    ffi.Pointer<godot_string> p_self,
    godot_string p_key,
    godot_string p_with,
  ) {
    return (_godot_string_replacen ??= _dylib.lookupFunction<
        _c_godot_string_replacen,
        _dart_godot_string_replacen>('godot_string_replacen'))(
      p_self,
      p_key,
      p_with,
    );
  }

  _dart_godot_string_replacen? _godot_string_replacen;

  int godot_string_rfind(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
  ) {
    return (_godot_string_rfind ??=
        _dylib.lookupFunction<_c_godot_string_rfind, _dart_godot_string_rfind>(
            'godot_string_rfind'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_string_rfind? _godot_string_rfind;

  int godot_string_rfindn(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
  ) {
    return (_godot_string_rfindn ??= _dylib.lookupFunction<
        _c_godot_string_rfindn,
        _dart_godot_string_rfindn>('godot_string_rfindn'))(
      p_self,
      p_what,
    );
  }

  _dart_godot_string_rfindn? _godot_string_rfindn;

  int godot_string_rfind_from(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
  ) {
    return (_godot_string_rfind_from ??= _dylib.lookupFunction<
        _c_godot_string_rfind_from,
        _dart_godot_string_rfind_from>('godot_string_rfind_from'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_string_rfind_from? _godot_string_rfind_from;

  int godot_string_rfindn_from(
    ffi.Pointer<godot_string> p_self,
    godot_string p_what,
    int p_from,
  ) {
    return (_godot_string_rfindn_from ??= _dylib.lookupFunction<
        _c_godot_string_rfindn_from,
        _dart_godot_string_rfindn_from>('godot_string_rfindn_from'))(
      p_self,
      p_what,
      p_from,
    );
  }

  _dart_godot_string_rfindn_from? _godot_string_rfindn_from;

  godot_string godot_string_rpad(
    ffi.Pointer<godot_string> p_self,
    int p_min_length,
  ) {
    return (_godot_string_rpad ??=
        _dylib.lookupFunction<_c_godot_string_rpad, _dart_godot_string_rpad>(
            'godot_string_rpad'))(
      p_self,
      p_min_length,
    );
  }

  _dart_godot_string_rpad? _godot_string_rpad;

  godot_string godot_string_rpad_with_custom_character(
    ffi.Pointer<godot_string> p_self,
    int p_min_length,
    ffi.Pointer<godot_string> p_character,
  ) {
    return (_godot_string_rpad_with_custom_character ??= _dylib.lookupFunction<
            _c_godot_string_rpad_with_custom_character,
            _dart_godot_string_rpad_with_custom_character>(
        'godot_string_rpad_with_custom_character'))(
      p_self,
      p_min_length,
      p_character,
    );
  }

  _dart_godot_string_rpad_with_custom_character?
      _godot_string_rpad_with_custom_character;

  double godot_string_similarity(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_string,
  ) {
    return (_godot_string_similarity ??= _dylib.lookupFunction<
        _c_godot_string_similarity,
        _dart_godot_string_similarity>('godot_string_similarity'))(
      p_self,
      p_string,
    );
  }

  _dart_godot_string_similarity? _godot_string_similarity;

  godot_string godot_string_sprintf(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_values,
    ffi.Pointer<ffi.Uint8> p_error,
  ) {
    return (_godot_string_sprintf ??= _dylib.lookupFunction<
        _c_godot_string_sprintf,
        _dart_godot_string_sprintf>('godot_string_sprintf'))(
      p_self,
      p_values,
      p_error,
    );
  }

  _dart_godot_string_sprintf? _godot_string_sprintf;

  godot_string godot_string_substr(
    ffi.Pointer<godot_string> p_self,
    int p_from,
    int p_chars,
  ) {
    return (_godot_string_substr ??= _dylib.lookupFunction<
        _c_godot_string_substr,
        _dart_godot_string_substr>('godot_string_substr'))(
      p_self,
      p_from,
      p_chars,
    );
  }

  _dart_godot_string_substr? _godot_string_substr;

  double godot_string_to_double(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_double ??= _dylib.lookupFunction<
        _c_godot_string_to_double,
        _dart_godot_string_to_double>('godot_string_to_double'))(
      p_self,
    );
  }

  _dart_godot_string_to_double? _godot_string_to_double;

  double godot_string_to_float(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_float ??= _dylib.lookupFunction<
        _c_godot_string_to_float,
        _dart_godot_string_to_float>('godot_string_to_float'))(
      p_self,
    );
  }

  _dart_godot_string_to_float? _godot_string_to_float;

  int godot_string_to_int(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_int ??= _dylib.lookupFunction<
        _c_godot_string_to_int,
        _dart_godot_string_to_int>('godot_string_to_int'))(
      p_self,
    );
  }

  _dart_godot_string_to_int? _godot_string_to_int;

  godot_string godot_string_camelcase_to_underscore(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_camelcase_to_underscore ??= _dylib.lookupFunction<
            _c_godot_string_camelcase_to_underscore,
            _dart_godot_string_camelcase_to_underscore>(
        'godot_string_camelcase_to_underscore'))(
      p_self,
    );
  }

  _dart_godot_string_camelcase_to_underscore?
      _godot_string_camelcase_to_underscore;

  godot_string godot_string_camelcase_to_underscore_lowercased(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_camelcase_to_underscore_lowercased ??=
        _dylib.lookupFunction<
                _c_godot_string_camelcase_to_underscore_lowercased,
                _dart_godot_string_camelcase_to_underscore_lowercased>(
            'godot_string_camelcase_to_underscore_lowercased'))(
      p_self,
    );
  }

  _dart_godot_string_camelcase_to_underscore_lowercased?
      _godot_string_camelcase_to_underscore_lowercased;

  godot_string godot_string_capitalize(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_capitalize ??= _dylib.lookupFunction<
        _c_godot_string_capitalize,
        _dart_godot_string_capitalize>('godot_string_capitalize'))(
      p_self,
    );
  }

  _dart_godot_string_capitalize? _godot_string_capitalize;

  double godot_string_char_to_double(
    ffi.Pointer<ffi.Int8> p_what,
  ) {
    return (_godot_string_char_to_double ??= _dylib.lookupFunction<
        _c_godot_string_char_to_double,
        _dart_godot_string_char_to_double>('godot_string_char_to_double'))(
      p_what,
    );
  }

  _dart_godot_string_char_to_double? _godot_string_char_to_double;

  int godot_string_char_to_int(
    ffi.Pointer<ffi.Int8> p_what,
  ) {
    return (_godot_string_char_to_int ??= _dylib.lookupFunction<
        _c_godot_string_char_to_int,
        _dart_godot_string_char_to_int>('godot_string_char_to_int'))(
      p_what,
    );
  }

  _dart_godot_string_char_to_int? _godot_string_char_to_int;

  int godot_string_wchar_to_int(
    ffi.Pointer<ffi.Int32> p_str,
  ) {
    return (_godot_string_wchar_to_int ??= _dylib.lookupFunction<
        _c_godot_string_wchar_to_int,
        _dart_godot_string_wchar_to_int>('godot_string_wchar_to_int'))(
      p_str,
    );
  }

  _dart_godot_string_wchar_to_int? _godot_string_wchar_to_int;

  int godot_string_char_to_int_with_len(
    ffi.Pointer<ffi.Int8> p_what,
    int p_len,
  ) {
    return (_godot_string_char_to_int_with_len ??= _dylib.lookupFunction<
            _c_godot_string_char_to_int_with_len,
            _dart_godot_string_char_to_int_with_len>(
        'godot_string_char_to_int_with_len'))(
      p_what,
      p_len,
    );
  }

  _dart_godot_string_char_to_int_with_len? _godot_string_char_to_int_with_len;

  int godot_string_char_to_int64_with_len(
    ffi.Pointer<ffi.Int32> p_str,
    int p_len,
  ) {
    return (_godot_string_char_to_int64_with_len ??= _dylib.lookupFunction<
            _c_godot_string_char_to_int64_with_len,
            _dart_godot_string_char_to_int64_with_len>(
        'godot_string_char_to_int64_with_len'))(
      p_str,
      p_len,
    );
  }

  _dart_godot_string_char_to_int64_with_len?
      _godot_string_char_to_int64_with_len;

  int godot_string_hex_to_int64(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hex_to_int64 ??= _dylib.lookupFunction<
        _c_godot_string_hex_to_int64,
        _dart_godot_string_hex_to_int64>('godot_string_hex_to_int64'))(
      p_self,
    );
  }

  _dart_godot_string_hex_to_int64? _godot_string_hex_to_int64;

  int godot_string_hex_to_int64_with_prefix(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hex_to_int64_with_prefix ??= _dylib.lookupFunction<
            _c_godot_string_hex_to_int64_with_prefix,
            _dart_godot_string_hex_to_int64_with_prefix>(
        'godot_string_hex_to_int64_with_prefix'))(
      p_self,
    );
  }

  _dart_godot_string_hex_to_int64_with_prefix?
      _godot_string_hex_to_int64_with_prefix;

  int godot_string_to_int64(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_int64 ??= _dylib.lookupFunction<
        _c_godot_string_to_int64,
        _dart_godot_string_to_int64>('godot_string_to_int64'))(
      p_self,
    );
  }

  _dart_godot_string_to_int64? _godot_string_to_int64;

  double godot_string_unicode_char_to_double(
    ffi.Pointer<ffi.Int32> p_str,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> r_end,
  ) {
    return (_godot_string_unicode_char_to_double ??= _dylib.lookupFunction<
            _c_godot_string_unicode_char_to_double,
            _dart_godot_string_unicode_char_to_double>(
        'godot_string_unicode_char_to_double'))(
      p_str,
      r_end,
    );
  }

  _dart_godot_string_unicode_char_to_double?
      _godot_string_unicode_char_to_double;

  int godot_string_get_slice_count(
    ffi.Pointer<godot_string> p_self,
    godot_string p_splitter,
  ) {
    return (_godot_string_get_slice_count ??= _dylib.lookupFunction<
        _c_godot_string_get_slice_count,
        _dart_godot_string_get_slice_count>('godot_string_get_slice_count'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_get_slice_count? _godot_string_get_slice_count;

  godot_string godot_string_get_slice(
    ffi.Pointer<godot_string> p_self,
    godot_string p_splitter,
    int p_slice,
  ) {
    return (_godot_string_get_slice ??= _dylib.lookupFunction<
        _c_godot_string_get_slice,
        _dart_godot_string_get_slice>('godot_string_get_slice'))(
      p_self,
      p_splitter,
      p_slice,
    );
  }

  _dart_godot_string_get_slice? _godot_string_get_slice;

  godot_string godot_string_get_slicec(
    ffi.Pointer<godot_string> p_self,
    int p_splitter,
    int p_slice,
  ) {
    return (_godot_string_get_slicec ??= _dylib.lookupFunction<
        _c_godot_string_get_slicec,
        _dart_godot_string_get_slicec>('godot_string_get_slicec'))(
      p_self,
      p_splitter,
      p_slice,
    );
  }

  _dart_godot_string_get_slicec? _godot_string_get_slicec;

  godot_array godot_string_split(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split ??=
        _dylib.lookupFunction<_c_godot_string_split, _dart_godot_string_split>(
            'godot_string_split'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split? _godot_string_split;

  godot_array godot_string_split_allow_empty(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split_allow_empty ??= _dylib.lookupFunction<
            _c_godot_string_split_allow_empty,
            _dart_godot_string_split_allow_empty>(
        'godot_string_split_allow_empty'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split_allow_empty? _godot_string_split_allow_empty;

  godot_array godot_string_split_floats(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split_floats ??= _dylib.lookupFunction<
        _c_godot_string_split_floats,
        _dart_godot_string_split_floats>('godot_string_split_floats'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split_floats? _godot_string_split_floats;

  godot_array godot_string_split_floats_allows_empty(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split_floats_allows_empty ??= _dylib.lookupFunction<
            _c_godot_string_split_floats_allows_empty,
            _dart_godot_string_split_floats_allows_empty>(
        'godot_string_split_floats_allows_empty'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split_floats_allows_empty?
      _godot_string_split_floats_allows_empty;

  godot_array godot_string_split_floats_mk(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_splitters,
  ) {
    return (_godot_string_split_floats_mk ??= _dylib.lookupFunction<
        _c_godot_string_split_floats_mk,
        _dart_godot_string_split_floats_mk>('godot_string_split_floats_mk'))(
      p_self,
      p_splitters,
    );
  }

  _dart_godot_string_split_floats_mk? _godot_string_split_floats_mk;

  godot_array godot_string_split_floats_mk_allows_empty(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_splitters,
  ) {
    return (_godot_string_split_floats_mk_allows_empty ??=
        _dylib.lookupFunction<_c_godot_string_split_floats_mk_allows_empty,
                _dart_godot_string_split_floats_mk_allows_empty>(
            'godot_string_split_floats_mk_allows_empty'))(
      p_self,
      p_splitters,
    );
  }

  _dart_godot_string_split_floats_mk_allows_empty?
      _godot_string_split_floats_mk_allows_empty;

  godot_array godot_string_split_ints(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split_ints ??= _dylib.lookupFunction<
        _c_godot_string_split_ints,
        _dart_godot_string_split_ints>('godot_string_split_ints'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split_ints? _godot_string_split_ints;

  godot_array godot_string_split_ints_allows_empty(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_splitter,
  ) {
    return (_godot_string_split_ints_allows_empty ??= _dylib.lookupFunction<
            _c_godot_string_split_ints_allows_empty,
            _dart_godot_string_split_ints_allows_empty>(
        'godot_string_split_ints_allows_empty'))(
      p_self,
      p_splitter,
    );
  }

  _dart_godot_string_split_ints_allows_empty?
      _godot_string_split_ints_allows_empty;

  godot_array godot_string_split_ints_mk(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_splitters,
  ) {
    return (_godot_string_split_ints_mk ??= _dylib.lookupFunction<
        _c_godot_string_split_ints_mk,
        _dart_godot_string_split_ints_mk>('godot_string_split_ints_mk'))(
      p_self,
      p_splitters,
    );
  }

  _dart_godot_string_split_ints_mk? _godot_string_split_ints_mk;

  godot_array godot_string_split_ints_mk_allows_empty(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_array> p_splitters,
  ) {
    return (_godot_string_split_ints_mk_allows_empty ??= _dylib.lookupFunction<
            _c_godot_string_split_ints_mk_allows_empty,
            _dart_godot_string_split_ints_mk_allows_empty>(
        'godot_string_split_ints_mk_allows_empty'))(
      p_self,
      p_splitters,
    );
  }

  _dart_godot_string_split_ints_mk_allows_empty?
      _godot_string_split_ints_mk_allows_empty;

  godot_array godot_string_split_spaces(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_split_spaces ??= _dylib.lookupFunction<
        _c_godot_string_split_spaces,
        _dart_godot_string_split_spaces>('godot_string_split_spaces'))(
      p_self,
    );
  }

  _dart_godot_string_split_spaces? _godot_string_split_spaces;

  int godot_string_char_lowercase(
    int p_char,
  ) {
    return (_godot_string_char_lowercase ??= _dylib.lookupFunction<
        _c_godot_string_char_lowercase,
        _dart_godot_string_char_lowercase>('godot_string_char_lowercase'))(
      p_char,
    );
  }

  _dart_godot_string_char_lowercase? _godot_string_char_lowercase;

  int godot_string_char_uppercase(
    int p_char,
  ) {
    return (_godot_string_char_uppercase ??= _dylib.lookupFunction<
        _c_godot_string_char_uppercase,
        _dart_godot_string_char_uppercase>('godot_string_char_uppercase'))(
      p_char,
    );
  }

  _dart_godot_string_char_uppercase? _godot_string_char_uppercase;

  godot_string godot_string_to_lower(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_lower ??= _dylib.lookupFunction<
        _c_godot_string_to_lower,
        _dart_godot_string_to_lower>('godot_string_to_lower'))(
      p_self,
    );
  }

  _dart_godot_string_to_lower? _godot_string_to_lower;

  godot_string godot_string_to_upper(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_to_upper ??= _dylib.lookupFunction<
        _c_godot_string_to_upper,
        _dart_godot_string_to_upper>('godot_string_to_upper'))(
      p_self,
    );
  }

  _dart_godot_string_to_upper? _godot_string_to_upper;

  godot_string godot_string_get_basename(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_get_basename ??= _dylib.lookupFunction<
        _c_godot_string_get_basename,
        _dart_godot_string_get_basename>('godot_string_get_basename'))(
      p_self,
    );
  }

  _dart_godot_string_get_basename? _godot_string_get_basename;

  godot_string godot_string_get_extension(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_get_extension ??= _dylib.lookupFunction<
        _c_godot_string_get_extension,
        _dart_godot_string_get_extension>('godot_string_get_extension'))(
      p_self,
    );
  }

  _dart_godot_string_get_extension? _godot_string_get_extension;

  godot_string godot_string_left(
    ffi.Pointer<godot_string> p_self,
    int p_pos,
  ) {
    return (_godot_string_left ??=
        _dylib.lookupFunction<_c_godot_string_left, _dart_godot_string_left>(
            'godot_string_left'))(
      p_self,
      p_pos,
    );
  }

  _dart_godot_string_left? _godot_string_left;

  int godot_string_ord_at(
    ffi.Pointer<godot_string> p_self,
    int p_idx,
  ) {
    return (_godot_string_ord_at ??= _dylib.lookupFunction<
        _c_godot_string_ord_at,
        _dart_godot_string_ord_at>('godot_string_ord_at'))(
      p_self,
      p_idx,
    );
  }

  _dart_godot_string_ord_at? _godot_string_ord_at;

  godot_string godot_string_plus_file(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_file,
  ) {
    return (_godot_string_plus_file ??= _dylib.lookupFunction<
        _c_godot_string_plus_file,
        _dart_godot_string_plus_file>('godot_string_plus_file'))(
      p_self,
      p_file,
    );
  }

  _dart_godot_string_plus_file? _godot_string_plus_file;

  godot_string godot_string_right(
    ffi.Pointer<godot_string> p_self,
    int p_pos,
  ) {
    return (_godot_string_right ??=
        _dylib.lookupFunction<_c_godot_string_right, _dart_godot_string_right>(
            'godot_string_right'))(
      p_self,
      p_pos,
    );
  }

  _dart_godot_string_right? _godot_string_right;

  godot_string godot_string_strip_edges(
    ffi.Pointer<godot_string> p_self,
    bool p_left,
    bool p_right,
  ) {
    return (_godot_string_strip_edges ??= _dylib.lookupFunction<
        _c_godot_string_strip_edges,
        _dart_godot_string_strip_edges>('godot_string_strip_edges'))(
      p_self,
      p_left ? 1 : 0,
      p_right ? 1 : 0,
    );
  }

  _dart_godot_string_strip_edges? _godot_string_strip_edges;

  godot_string godot_string_strip_escapes(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_strip_escapes ??= _dylib.lookupFunction<
        _c_godot_string_strip_escapes,
        _dart_godot_string_strip_escapes>('godot_string_strip_escapes'))(
      p_self,
    );
  }

  _dart_godot_string_strip_escapes? _godot_string_strip_escapes;

  void godot_string_erase(
    ffi.Pointer<godot_string> p_self,
    int p_pos,
    int p_chars,
  ) {
    return (_godot_string_erase ??=
        _dylib.lookupFunction<_c_godot_string_erase, _dart_godot_string_erase>(
            'godot_string_erase'))(
      p_self,
      p_pos,
      p_chars,
    );
  }

  _dart_godot_string_erase? _godot_string_erase;

  godot_char_string godot_string_ascii(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_ascii ??=
        _dylib.lookupFunction<_c_godot_string_ascii, _dart_godot_string_ascii>(
            'godot_string_ascii'))(
      p_self,
    );
  }

  _dart_godot_string_ascii? _godot_string_ascii;

  godot_char_string godot_string_ascii_extended(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_ascii_extended ??= _dylib.lookupFunction<
        _c_godot_string_ascii_extended,
        _dart_godot_string_ascii_extended>('godot_string_ascii_extended'))(
      p_self,
    );
  }

  _dart_godot_string_ascii_extended? _godot_string_ascii_extended;

  godot_char_string godot_string_utf8(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_utf8 ??=
        _dylib.lookupFunction<_c_godot_string_utf8, _dart_godot_string_utf8>(
            'godot_string_utf8'))(
      p_self,
    );
  }

  _dart_godot_string_utf8? _godot_string_utf8;

  bool godot_string_parse_utf8(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<ffi.Int8> p_utf8,
  ) {
    return (_godot_string_parse_utf8 ??= _dylib.lookupFunction<
            _c_godot_string_parse_utf8,
            _dart_godot_string_parse_utf8>('godot_string_parse_utf8'))(
          p_self,
          p_utf8,
        ) !=
        0;
  }

  _dart_godot_string_parse_utf8? _godot_string_parse_utf8;

  bool godot_string_parse_utf8_with_len(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<ffi.Int8> p_utf8,
    int p_len,
  ) {
    return (_godot_string_parse_utf8_with_len ??= _dylib.lookupFunction<
                _c_godot_string_parse_utf8_with_len,
                _dart_godot_string_parse_utf8_with_len>(
            'godot_string_parse_utf8_with_len'))(
          p_self,
          p_utf8,
          p_len,
        ) !=
        0;
  }

  _dart_godot_string_parse_utf8_with_len? _godot_string_parse_utf8_with_len;

  godot_string godot_string_chars_to_utf8(
    ffi.Pointer<ffi.Int8> p_utf8,
  ) {
    return (_godot_string_chars_to_utf8 ??= _dylib.lookupFunction<
        _c_godot_string_chars_to_utf8,
        _dart_godot_string_chars_to_utf8>('godot_string_chars_to_utf8'))(
      p_utf8,
    );
  }

  _dart_godot_string_chars_to_utf8? _godot_string_chars_to_utf8;

  godot_string godot_string_chars_to_utf8_with_len(
    ffi.Pointer<ffi.Int8> p_utf8,
    int p_len,
  ) {
    return (_godot_string_chars_to_utf8_with_len ??= _dylib.lookupFunction<
            _c_godot_string_chars_to_utf8_with_len,
            _dart_godot_string_chars_to_utf8_with_len>(
        'godot_string_chars_to_utf8_with_len'))(
      p_utf8,
      p_len,
    );
  }

  _dart_godot_string_chars_to_utf8_with_len?
      _godot_string_chars_to_utf8_with_len;

  int godot_string_hash(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hash ??=
        _dylib.lookupFunction<_c_godot_string_hash, _dart_godot_string_hash>(
            'godot_string_hash'))(
      p_self,
    );
  }

  _dart_godot_string_hash? _godot_string_hash;

  int godot_string_hash64(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_hash64 ??= _dylib.lookupFunction<
        _c_godot_string_hash64,
        _dart_godot_string_hash64>('godot_string_hash64'))(
      p_self,
    );
  }

  _dart_godot_string_hash64? _godot_string_hash64;

  int godot_string_hash_chars(
    ffi.Pointer<ffi.Int8> p_cstr,
  ) {
    return (_godot_string_hash_chars ??= _dylib.lookupFunction<
        _c_godot_string_hash_chars,
        _dart_godot_string_hash_chars>('godot_string_hash_chars'))(
      p_cstr,
    );
  }

  _dart_godot_string_hash_chars? _godot_string_hash_chars;

  int godot_string_hash_chars_with_len(
    ffi.Pointer<ffi.Int8> p_cstr,
    int p_len,
  ) {
    return (_godot_string_hash_chars_with_len ??= _dylib.lookupFunction<
            _c_godot_string_hash_chars_with_len,
            _dart_godot_string_hash_chars_with_len>(
        'godot_string_hash_chars_with_len'))(
      p_cstr,
      p_len,
    );
  }

  _dart_godot_string_hash_chars_with_len? _godot_string_hash_chars_with_len;

  int godot_string_hash_utf8_chars(
    ffi.Pointer<ffi.Int32> p_str,
  ) {
    return (_godot_string_hash_utf8_chars ??= _dylib.lookupFunction<
        _c_godot_string_hash_utf8_chars,
        _dart_godot_string_hash_utf8_chars>('godot_string_hash_utf8_chars'))(
      p_str,
    );
  }

  _dart_godot_string_hash_utf8_chars? _godot_string_hash_utf8_chars;

  int godot_string_hash_utf8_chars_with_len(
    ffi.Pointer<ffi.Int32> p_str,
    int p_len,
  ) {
    return (_godot_string_hash_utf8_chars_with_len ??= _dylib.lookupFunction<
            _c_godot_string_hash_utf8_chars_with_len,
            _dart_godot_string_hash_utf8_chars_with_len>(
        'godot_string_hash_utf8_chars_with_len'))(
      p_str,
      p_len,
    );
  }

  _dart_godot_string_hash_utf8_chars_with_len?
      _godot_string_hash_utf8_chars_with_len;

  godot_pool_byte_array godot_string_md5_buffer(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_md5_buffer ??= _dylib.lookupFunction<
        _c_godot_string_md5_buffer,
        _dart_godot_string_md5_buffer>('godot_string_md5_buffer'))(
      p_self,
    );
  }

  _dart_godot_string_md5_buffer? _godot_string_md5_buffer;

  godot_string godot_string_md5_text(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_md5_text ??= _dylib.lookupFunction<
        _c_godot_string_md5_text,
        _dart_godot_string_md5_text>('godot_string_md5_text'))(
      p_self,
    );
  }

  _dart_godot_string_md5_text? _godot_string_md5_text;

  godot_pool_byte_array godot_string_sha256_buffer(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_sha256_buffer ??= _dylib.lookupFunction<
        _c_godot_string_sha256_buffer,
        _dart_godot_string_sha256_buffer>('godot_string_sha256_buffer'))(
      p_self,
    );
  }

  _dart_godot_string_sha256_buffer? _godot_string_sha256_buffer;

  godot_string godot_string_sha256_text(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_sha256_text ??= _dylib.lookupFunction<
        _c_godot_string_sha256_text,
        _dart_godot_string_sha256_text>('godot_string_sha256_text'))(
      p_self,
    );
  }

  _dart_godot_string_sha256_text? _godot_string_sha256_text;

  bool godot_string_empty(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_empty ??= _dylib.lookupFunction<_c_godot_string_empty,
            _dart_godot_string_empty>('godot_string_empty'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_empty? _godot_string_empty;

  godot_string godot_string_get_base_dir(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_get_base_dir ??= _dylib.lookupFunction<
        _c_godot_string_get_base_dir,
        _dart_godot_string_get_base_dir>('godot_string_get_base_dir'))(
      p_self,
    );
  }

  _dart_godot_string_get_base_dir? _godot_string_get_base_dir;

  godot_string godot_string_get_file(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_get_file ??= _dylib.lookupFunction<
        _c_godot_string_get_file,
        _dart_godot_string_get_file>('godot_string_get_file'))(
      p_self,
    );
  }

  _dart_godot_string_get_file? _godot_string_get_file;

  godot_string godot_string_humanize_size(
    int p_size,
  ) {
    return (_godot_string_humanize_size ??= _dylib.lookupFunction<
        _c_godot_string_humanize_size,
        _dart_godot_string_humanize_size>('godot_string_humanize_size'))(
      p_size,
    );
  }

  _dart_godot_string_humanize_size? _godot_string_humanize_size;

  bool godot_string_is_abs_path(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_abs_path ??= _dylib.lookupFunction<
            _c_godot_string_is_abs_path,
            _dart_godot_string_is_abs_path>('godot_string_is_abs_path'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_abs_path? _godot_string_is_abs_path;

  bool godot_string_is_rel_path(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_rel_path ??= _dylib.lookupFunction<
            _c_godot_string_is_rel_path,
            _dart_godot_string_is_rel_path>('godot_string_is_rel_path'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_rel_path? _godot_string_is_rel_path;

  bool godot_string_is_resource_file(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_resource_file ??= _dylib.lookupFunction<
                _c_godot_string_is_resource_file,
                _dart_godot_string_is_resource_file>(
            'godot_string_is_resource_file'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_resource_file? _godot_string_is_resource_file;

  godot_string godot_string_path_to(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_path,
  ) {
    return (_godot_string_path_to ??= _dylib.lookupFunction<
        _c_godot_string_path_to,
        _dart_godot_string_path_to>('godot_string_path_to'))(
      p_self,
      p_path,
    );
  }

  _dart_godot_string_path_to? _godot_string_path_to;

  godot_string godot_string_path_to_file(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_path,
  ) {
    return (_godot_string_path_to_file ??= _dylib.lookupFunction<
        _c_godot_string_path_to_file,
        _dart_godot_string_path_to_file>('godot_string_path_to_file'))(
      p_self,
      p_path,
    );
  }

  _dart_godot_string_path_to_file? _godot_string_path_to_file;

  godot_string godot_string_simplify_path(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_simplify_path ??= _dylib.lookupFunction<
        _c_godot_string_simplify_path,
        _dart_godot_string_simplify_path>('godot_string_simplify_path'))(
      p_self,
    );
  }

  _dart_godot_string_simplify_path? _godot_string_simplify_path;

  godot_string godot_string_c_escape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_c_escape ??= _dylib.lookupFunction<
        _c_godot_string_c_escape,
        _dart_godot_string_c_escape>('godot_string_c_escape'))(
      p_self,
    );
  }

  _dart_godot_string_c_escape? _godot_string_c_escape;

  godot_string godot_string_c_escape_multiline(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_c_escape_multiline ??= _dylib.lookupFunction<
            _c_godot_string_c_escape_multiline,
            _dart_godot_string_c_escape_multiline>(
        'godot_string_c_escape_multiline'))(
      p_self,
    );
  }

  _dart_godot_string_c_escape_multiline? _godot_string_c_escape_multiline;

  godot_string godot_string_c_unescape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_c_unescape ??= _dylib.lookupFunction<
        _c_godot_string_c_unescape,
        _dart_godot_string_c_unescape>('godot_string_c_unescape'))(
      p_self,
    );
  }

  _dart_godot_string_c_unescape? _godot_string_c_unescape;

  godot_string godot_string_http_escape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_http_escape ??= _dylib.lookupFunction<
        _c_godot_string_http_escape,
        _dart_godot_string_http_escape>('godot_string_http_escape'))(
      p_self,
    );
  }

  _dart_godot_string_http_escape? _godot_string_http_escape;

  godot_string godot_string_http_unescape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_http_unescape ??= _dylib.lookupFunction<
        _c_godot_string_http_unescape,
        _dart_godot_string_http_unescape>('godot_string_http_unescape'))(
      p_self,
    );
  }

  _dart_godot_string_http_unescape? _godot_string_http_unescape;

  godot_string godot_string_json_escape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_json_escape ??= _dylib.lookupFunction<
        _c_godot_string_json_escape,
        _dart_godot_string_json_escape>('godot_string_json_escape'))(
      p_self,
    );
  }

  _dart_godot_string_json_escape? _godot_string_json_escape;

  godot_string godot_string_word_wrap(
    ffi.Pointer<godot_string> p_self,
    int p_chars_per_line,
  ) {
    return (_godot_string_word_wrap ??= _dylib.lookupFunction<
        _c_godot_string_word_wrap,
        _dart_godot_string_word_wrap>('godot_string_word_wrap'))(
      p_self,
      p_chars_per_line,
    );
  }

  _dart_godot_string_word_wrap? _godot_string_word_wrap;

  godot_string godot_string_xml_escape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_xml_escape ??= _dylib.lookupFunction<
        _c_godot_string_xml_escape,
        _dart_godot_string_xml_escape>('godot_string_xml_escape'))(
      p_self,
    );
  }

  _dart_godot_string_xml_escape? _godot_string_xml_escape;

  godot_string godot_string_xml_escape_with_quotes(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_xml_escape_with_quotes ??= _dylib.lookupFunction<
            _c_godot_string_xml_escape_with_quotes,
            _dart_godot_string_xml_escape_with_quotes>(
        'godot_string_xml_escape_with_quotes'))(
      p_self,
    );
  }

  _dart_godot_string_xml_escape_with_quotes?
      _godot_string_xml_escape_with_quotes;

  godot_string godot_string_xml_unescape(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_xml_unescape ??= _dylib.lookupFunction<
        _c_godot_string_xml_unescape,
        _dart_godot_string_xml_unescape>('godot_string_xml_unescape'))(
      p_self,
    );
  }

  _dart_godot_string_xml_unescape? _godot_string_xml_unescape;

  godot_string godot_string_percent_decode(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_percent_decode ??= _dylib.lookupFunction<
        _c_godot_string_percent_decode,
        _dart_godot_string_percent_decode>('godot_string_percent_decode'))(
      p_self,
    );
  }

  _dart_godot_string_percent_decode? _godot_string_percent_decode;

  godot_string godot_string_percent_encode(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_percent_encode ??= _dylib.lookupFunction<
        _c_godot_string_percent_encode,
        _dart_godot_string_percent_encode>('godot_string_percent_encode'))(
      p_self,
    );
  }

  _dart_godot_string_percent_encode? _godot_string_percent_encode;

  bool godot_string_is_valid_float(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_valid_float ??= _dylib.lookupFunction<
            _c_godot_string_is_valid_float,
            _dart_godot_string_is_valid_float>('godot_string_is_valid_float'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_float? _godot_string_is_valid_float;

  bool godot_string_is_valid_hex_number(
    ffi.Pointer<godot_string> p_self,
    bool p_with_prefix,
  ) {
    return (_godot_string_is_valid_hex_number ??= _dylib.lookupFunction<
                _c_godot_string_is_valid_hex_number,
                _dart_godot_string_is_valid_hex_number>(
            'godot_string_is_valid_hex_number'))(
          p_self,
          p_with_prefix ? 1 : 0,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_hex_number? _godot_string_is_valid_hex_number;

  bool godot_string_is_valid_html_color(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_valid_html_color ??= _dylib.lookupFunction<
                _c_godot_string_is_valid_html_color,
                _dart_godot_string_is_valid_html_color>(
            'godot_string_is_valid_html_color'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_html_color? _godot_string_is_valid_html_color;

  bool godot_string_is_valid_identifier(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_valid_identifier ??= _dylib.lookupFunction<
                _c_godot_string_is_valid_identifier,
                _dart_godot_string_is_valid_identifier>(
            'godot_string_is_valid_identifier'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_identifier? _godot_string_is_valid_identifier;

  bool godot_string_is_valid_integer(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_valid_integer ??= _dylib.lookupFunction<
                _c_godot_string_is_valid_integer,
                _dart_godot_string_is_valid_integer>(
            'godot_string_is_valid_integer'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_integer? _godot_string_is_valid_integer;

  bool godot_string_is_valid_ip_address(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_is_valid_ip_address ??= _dylib.lookupFunction<
                _c_godot_string_is_valid_ip_address,
                _dart_godot_string_is_valid_ip_address>(
            'godot_string_is_valid_ip_address'))(
          p_self,
        ) !=
        0;
  }

  _dart_godot_string_is_valid_ip_address? _godot_string_is_valid_ip_address;

  godot_string godot_string_dedent(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_dedent ??= _dylib.lookupFunction<
        _c_godot_string_dedent,
        _dart_godot_string_dedent>('godot_string_dedent'))(
      p_self,
    );
  }

  _dart_godot_string_dedent? _godot_string_dedent;

  godot_string godot_string_trim_prefix(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_prefix,
  ) {
    return (_godot_string_trim_prefix ??= _dylib.lookupFunction<
        _c_godot_string_trim_prefix,
        _dart_godot_string_trim_prefix>('godot_string_trim_prefix'))(
      p_self,
      p_prefix,
    );
  }

  _dart_godot_string_trim_prefix? _godot_string_trim_prefix;

  godot_string godot_string_trim_suffix(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_suffix,
  ) {
    return (_godot_string_trim_suffix ??= _dylib.lookupFunction<
        _c_godot_string_trim_suffix,
        _dart_godot_string_trim_suffix>('godot_string_trim_suffix'))(
      p_self,
      p_suffix,
    );
  }

  _dart_godot_string_trim_suffix? _godot_string_trim_suffix;

  godot_string godot_string_rstrip(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_chars,
  ) {
    return (_godot_string_rstrip ??= _dylib.lookupFunction<
        _c_godot_string_rstrip,
        _dart_godot_string_rstrip>('godot_string_rstrip'))(
      p_self,
      p_chars,
    );
  }

  _dart_godot_string_rstrip? _godot_string_rstrip;

  godot_pool_string_array godot_string_rsplit(
    ffi.Pointer<godot_string> p_self,
    ffi.Pointer<godot_string> p_divisor,
    bool p_allow_empty,
    int p_maxsplit,
  ) {
    return (_godot_string_rsplit ??= _dylib.lookupFunction<
        _c_godot_string_rsplit,
        _dart_godot_string_rsplit>('godot_string_rsplit'))(
      p_self,
      p_divisor,
      p_allow_empty ? 1 : 0,
      p_maxsplit,
    );
  }

  _dart_godot_string_rsplit? _godot_string_rsplit;

  void godot_string_destroy(
    ffi.Pointer<godot_string> p_self,
  ) {
    return (_godot_string_destroy ??= _dylib.lookupFunction<
        _c_godot_string_destroy,
        _dart_godot_string_destroy>('godot_string_destroy'))(
      p_self,
    );
  }

  _dart_godot_string_destroy? _godot_string_destroy;

  void godot_string_name_new(
    ffi.Pointer<godot_string_name> r_dest,
    ffi.Pointer<godot_string> p_name,
  ) {
    return (_godot_string_name_new ??= _dylib.lookupFunction<
        _c_godot_string_name_new,
        _dart_godot_string_name_new>('godot_string_name_new'))(
      r_dest,
      p_name,
    );
  }

  _dart_godot_string_name_new? _godot_string_name_new;

  void godot_string_name_new_data(
    ffi.Pointer<godot_string_name> r_dest,
    ffi.Pointer<ffi.Int8> p_name,
  ) {
    return (_godot_string_name_new_data ??= _dylib.lookupFunction<
        _c_godot_string_name_new_data,
        _dart_godot_string_name_new_data>('godot_string_name_new_data'))(
      r_dest,
      p_name,
    );
  }

  _dart_godot_string_name_new_data? _godot_string_name_new_data;

  godot_string godot_string_name_get_name(
    ffi.Pointer<godot_string_name> p_self,
  ) {
    return (_godot_string_name_get_name ??= _dylib.lookupFunction<
        _c_godot_string_name_get_name,
        _dart_godot_string_name_get_name>('godot_string_name_get_name'))(
      p_self,
    );
  }

  _dart_godot_string_name_get_name? _godot_string_name_get_name;

  int godot_string_name_get_hash(
    ffi.Pointer<godot_string_name> p_self,
  ) {
    return (_godot_string_name_get_hash ??= _dylib.lookupFunction<
        _c_godot_string_name_get_hash,
        _dart_godot_string_name_get_hash>('godot_string_name_get_hash'))(
      p_self,
    );
  }

  _dart_godot_string_name_get_hash? _godot_string_name_get_hash;

  ffi.Pointer<ffi.Void> godot_string_name_get_data_unique_pointer(
    ffi.Pointer<godot_string_name> p_self,
  ) {
    return (_godot_string_name_get_data_unique_pointer ??=
        _dylib.lookupFunction<_c_godot_string_name_get_data_unique_pointer,
                _dart_godot_string_name_get_data_unique_pointer>(
            'godot_string_name_get_data_unique_pointer'))(
      p_self,
    );
  }

  _dart_godot_string_name_get_data_unique_pointer?
      _godot_string_name_get_data_unique_pointer;

  bool godot_string_name_operator_equal(
    ffi.Pointer<godot_string_name> p_self,
    ffi.Pointer<godot_string_name> p_other,
  ) {
    return (_godot_string_name_operator_equal ??= _dylib.lookupFunction<
                _c_godot_string_name_operator_equal,
                _dart_godot_string_name_operator_equal>(
            'godot_string_name_operator_equal'))(
          p_self,
          p_other,
        ) !=
        0;
  }

  _dart_godot_string_name_operator_equal? _godot_string_name_operator_equal;

  bool godot_string_name_operator_less(
    ffi.Pointer<godot_string_name> p_self,
    ffi.Pointer<godot_string_name> p_other,
  ) {
    return (_godot_string_name_operator_less ??= _dylib.lookupFunction<
                _c_godot_string_name_operator_less,
                _dart_godot_string_name_operator_less>(
            'godot_string_name_operator_less'))(
          p_self,
          p_other,
        ) !=
        0;
  }

  _dart_godot_string_name_operator_less? _godot_string_name_operator_less;

  void godot_string_name_destroy(
    ffi.Pointer<godot_string_name> p_self,
  ) {
    return (_godot_string_name_destroy ??= _dylib.lookupFunction<
        _c_godot_string_name_destroy,
        _dart_godot_string_name_destroy>('godot_string_name_destroy'))(
      p_self,
    );
  }

  _dart_godot_string_name_destroy? _godot_string_name_destroy;

  void godot_object_destroy(
    ffi.Pointer<ffi.Void> p_o,
  ) {
    return (_godot_object_destroy ??= _dylib.lookupFunction<
        _c_godot_object_destroy,
        _dart_godot_object_destroy>('godot_object_destroy'))(
      p_o,
    );
  }

  _dart_godot_object_destroy? _godot_object_destroy;

  /// ////// Singleton API
  ffi.Pointer<ffi.Void> godot_global_get_singleton(
    ffi.Pointer<ffi.Int8> p_name,
  ) {
    return (_godot_global_get_singleton ??= _dylib.lookupFunction<
        _c_godot_global_get_singleton,
        _dart_godot_global_get_singleton>('godot_global_get_singleton'))(
      p_name,
    );
  }

  _dart_godot_global_get_singleton? _godot_global_get_singleton;

  ffi.Pointer<godot_method_bind> godot_method_bind_get_method(
    ffi.Pointer<ffi.Int8> p_classname,
    ffi.Pointer<ffi.Int8> p_methodname,
  ) {
    return (_godot_method_bind_get_method ??= _dylib.lookupFunction<
        _c_godot_method_bind_get_method,
        _dart_godot_method_bind_get_method>('godot_method_bind_get_method'))(
      p_classname,
      p_methodname,
    );
  }

  _dart_godot_method_bind_get_method? _godot_method_bind_get_method;

  void godot_method_bind_ptrcall(
    ffi.Pointer<godot_method_bind> p_method_bind,
    ffi.Pointer<ffi.Void> p_instance,
    ffi.Pointer<ffi.Pointer<ffi.Void>> p_args,
    ffi.Pointer<ffi.Void> p_ret,
  ) {
    return (_godot_method_bind_ptrcall ??= _dylib.lookupFunction<
        _c_godot_method_bind_ptrcall,
        _dart_godot_method_bind_ptrcall>('godot_method_bind_ptrcall'))(
      p_method_bind,
      p_instance,
      p_args,
      p_ret,
    );
  }

  _dart_godot_method_bind_ptrcall? _godot_method_bind_ptrcall;

  godot_variant godot_method_bind_call(
    ffi.Pointer<godot_method_bind> p_method_bind,
    ffi.Pointer<ffi.Void> p_instance,
    ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
    int p_arg_count,
    ffi.Pointer<godot_variant_call_error> p_call_error,
  ) {
    return (_godot_method_bind_call ??= _dylib.lookupFunction<
        _c_godot_method_bind_call,
        _dart_godot_method_bind_call>('godot_method_bind_call'))(
      p_method_bind,
      p_instance,
      p_args,
      p_arg_count,
      p_call_error,
    );
  }

  _dart_godot_method_bind_call? _godot_method_bind_call;

  ffi.Pointer<ffi.NativeFunction<godot_class_constructor>>
      godot_get_class_constructor(
    ffi.Pointer<ffi.Int8> p_classname,
  ) {
    return (_godot_get_class_constructor ??= _dylib.lookupFunction<
        _c_godot_get_class_constructor,
        _dart_godot_get_class_constructor>('godot_get_class_constructor'))(
      p_classname,
    );
  }

  _dart_godot_get_class_constructor? _godot_get_class_constructor;

  godot_dictionary godot_get_global_constants() {
    return (_godot_get_global_constants ??= _dylib.lookupFunction<
        _c_godot_get_global_constants,
        _dart_godot_get_global_constants>('godot_get_global_constants'))();
  }

  _dart_godot_get_global_constants? _godot_get_global_constants;

  void godot_register_native_call_type(
    ffi.Pointer<ffi.Int8> p_call_type,
    ffi.Pointer<ffi.NativeFunction<native_call_cb>> p_callback,
  ) {
    return (_godot_register_native_call_type ??= _dylib.lookupFunction<
            _c_godot_register_native_call_type,
            _dart_godot_register_native_call_type>(
        'godot_register_native_call_type'))(
      p_call_type,
      p_callback,
    );
  }

  _dart_godot_register_native_call_type? _godot_register_native_call_type;

  ffi.Pointer<ffi.Void> godot_alloc(
    int p_bytes,
  ) {
    return (_godot_alloc ??= _dylib
        .lookupFunction<_c_godot_alloc, _dart_godot_alloc>('godot_alloc'))(
      p_bytes,
    );
  }

  _dart_godot_alloc? _godot_alloc;

  ffi.Pointer<ffi.Void> godot_realloc(
    ffi.Pointer<ffi.Void> p_ptr,
    int p_bytes,
  ) {
    return (_godot_realloc ??=
        _dylib.lookupFunction<_c_godot_realloc, _dart_godot_realloc>(
            'godot_realloc'))(
      p_ptr,
      p_bytes,
    );
  }

  _dart_godot_realloc? _godot_realloc;

  void godot_free(
    ffi.Pointer<ffi.Void> p_ptr,
  ) {
    return (_godot_free ??=
        _dylib.lookupFunction<_c_godot_free, _dart_godot_free>('godot_free'))(
      p_ptr,
    );
  }

  _dart_godot_free? _godot_free;

  void godot_print_error(
    ffi.Pointer<ffi.Int8> p_description,
    ffi.Pointer<ffi.Int8> p_function,
    ffi.Pointer<ffi.Int8> p_file,
    int p_line,
  ) {
    return (_godot_print_error ??=
        _dylib.lookupFunction<_c_godot_print_error, _dart_godot_print_error>(
            'godot_print_error'))(
      p_description,
      p_function,
      p_file,
      p_line,
    );
  }

  _dart_godot_print_error? _godot_print_error;

  void godot_print_warning(
    ffi.Pointer<ffi.Int8> p_description,
    ffi.Pointer<ffi.Int8> p_function,
    ffi.Pointer<ffi.Int8> p_file,
    int p_line,
  ) {
    return (_godot_print_warning ??= _dylib.lookupFunction<
        _c_godot_print_warning,
        _dart_godot_print_warning>('godot_print_warning'))(
      p_description,
      p_function,
      p_file,
      p_line,
    );
  }

  _dart_godot_print_warning? _godot_print_warning;

  void godot_print(
    ffi.Pointer<godot_string> p_message,
  ) {
    return (_godot_print ??= _dylib
        .lookupFunction<_c_godot_print, _dart_godot_print>('godot_print'))(
      p_message,
    );
  }

  _dart_godot_print? _godot_print;

  bool godot_is_instance_valid(
    ffi.Pointer<ffi.Void> p_object,
  ) {
    return (_godot_is_instance_valid ??= _dylib.lookupFunction<
            _c_godot_is_instance_valid,
            _dart_godot_is_instance_valid>('godot_is_instance_valid'))(
          p_object,
        ) !=
        0;
  }

  _dart_godot_is_instance_valid? _godot_is_instance_valid;

  ffi.Pointer<ffi.Void> godot_get_class_tag(
    ffi.Pointer<godot_string_name> p_class,
  ) {
    return (_godot_get_class_tag ??= _dylib.lookupFunction<
        _c_godot_get_class_tag,
        _dart_godot_get_class_tag>('godot_get_class_tag'))(
      p_class,
    );
  }

  _dart_godot_get_class_tag? _godot_get_class_tag;

  ffi.Pointer<ffi.Void> godot_object_cast_to(
    ffi.Pointer<ffi.Void> p_object,
    ffi.Pointer<ffi.Void> p_class_tag,
  ) {
    return (_godot_object_cast_to ??= _dylib.lookupFunction<
        _c_godot_object_cast_to,
        _dart_godot_object_cast_to>('godot_object_cast_to'))(
      p_object,
      p_class_tag,
    );
  }

  _dart_godot_object_cast_to? _godot_object_cast_to;

  ffi.Pointer<ffi.Void> godot_instance_from_id(
    int p_instance_id,
  ) {
    return (_godot_instance_from_id ??= _dylib.lookupFunction<
        _c_godot_instance_from_id,
        _dart_godot_instance_from_id>('godot_instance_from_id'))(
      p_instance_id,
    );
  }

  _dart_godot_instance_from_id? _godot_instance_from_id;
}

/// ////// Error
abstract class godot_error {
  static const int GODOT_OK = 0;

  /// ///< Generic fail error
  static const int GODOT_FAILED = 1;

  /// ///< What is requested is unsupported/unavailable
  static const int GODOT_ERR_UNAVAILABLE = 2;

  /// ///< The object being used hasn't been properly set up yet
  static const int GODOT_ERR_UNCONFIGURED = 3;

  /// ///< Missing credentials for requested resource
  static const int GODOT_ERR_UNAUTHORIZED = 4;

  /// ///< Parameter given out of range (5)
  static const int GODOT_ERR_PARAMETER_RANGE_ERROR = 5;

  /// ///< Out of memory
  static const int GODOT_ERR_OUT_OF_MEMORY = 6;
  static const int GODOT_ERR_FILE_NOT_FOUND = 7;
  static const int GODOT_ERR_FILE_BAD_DRIVE = 8;
  static const int GODOT_ERR_FILE_BAD_PATH = 9;
  static const int GODOT_ERR_FILE_NO_PERMISSION = 10;
  static const int GODOT_ERR_FILE_ALREADY_IN_USE = 11;
  static const int GODOT_ERR_FILE_CANT_OPEN = 12;
  static const int GODOT_ERR_FILE_CANT_WRITE = 13;
  static const int GODOT_ERR_FILE_CANT_READ = 14;
  static const int GODOT_ERR_FILE_UNRECOGNIZED = 15;
  static const int GODOT_ERR_FILE_CORRUPT = 16;
  static const int GODOT_ERR_FILE_MISSING_DEPENDENCIES = 17;
  static const int GODOT_ERR_FILE_EOF = 18;

  /// ///< Can't open a resource/socket/file
  static const int GODOT_ERR_CANT_OPEN = 19;
  static const int GODOT_ERR_CANT_CREATE = 20;
  static const int GODOT_ERR_QUERY_FAILED = 21;
  static const int GODOT_ERR_ALREADY_IN_USE = 22;

  /// ///< resource is locked
  static const int GODOT_ERR_LOCKED = 23;
  static const int GODOT_ERR_TIMEOUT = 24;
  static const int GODOT_ERR_CANT_CONNECT = 25;
  static const int GODOT_ERR_CANT_RESOLVE = 26;
  static const int GODOT_ERR_CONNECTION_ERROR = 27;
  static const int GODOT_ERR_CANT_ACQUIRE_RESOURCE = 28;
  static const int GODOT_ERR_CANT_FORK = 29;

  /// ///< Data passed is invalid (30)
  static const int GODOT_ERR_INVALID_DATA = 30;

  /// ///< Parameter passed is invalid
  static const int GODOT_ERR_INVALID_PARAMETER = 31;

  /// ///< When adding, item already exists
  static const int GODOT_ERR_ALREADY_EXISTS = 32;

  /// ///< When retrieving/erasing, it item does not exist
  static const int GODOT_ERR_DOES_NOT_EXIST = 33;

  /// ///< database is full
  static const int GODOT_ERR_DATABASE_CANT_READ = 34;

  /// ///< database is full (35)
  static const int GODOT_ERR_DATABASE_CANT_WRITE = 35;
  static const int GODOT_ERR_COMPILATION_FAILED = 36;
  static const int GODOT_ERR_METHOD_NOT_FOUND = 37;
  static const int GODOT_ERR_LINK_FAILED = 38;
  static const int GODOT_ERR_SCRIPT_FAILED = 39;
  static const int GODOT_ERR_CYCLIC_LINK = 40;
  static const int GODOT_ERR_INVALID_DECLARATION = 41;
  static const int GODOT_ERR_DUPLICATE_SYMBOL = 42;
  static const int GODOT_ERR_PARSE_ERROR = 43;
  static const int GODOT_ERR_BUSY = 44;
  static const int GODOT_ERR_SKIP = 45;

  /// ///< user requested help!!
  static const int GODOT_ERR_HELP = 46;

  /// ///< a bug in the software certainly happened, due to a double check failing or unexpected behavior.
  static const int GODOT_ERR_BUG = 47;
  static const int GODOT_ERR_PRINTER_ON_FIRE = 48;
}

class godot_string extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_string__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_string__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_string`.
class ArrayHelper_godot_string__dont_touch_that_level0 {
  final godot_string _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_string__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_char_string extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_char_string__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_char_string__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_char_string`.
class ArrayHelper_godot_char_string__dont_touch_that_level0 {
  final godot_char_string _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_char_string__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_array__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_array__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_array`.
class ArrayHelper_godot_array__dont_touch_that_level0 {
  final godot_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_array_read_access extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_array_read_access__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_array_read_access__dont_touch_that_level0(
              this, [1], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_array_read_access`.
class ArrayHelper_godot_pool_array_read_access__dont_touch_that_level0 {
  final godot_pool_array_read_access _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_array_read_access__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_array_write_access extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_array_write_access__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_array_write_access__dont_touch_that_level0(
              this, [1], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_array_write_access`.
class ArrayHelper_godot_pool_array_write_access__dont_touch_that_level0 {
  final godot_pool_array_write_access _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_array_write_access__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_byte_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_byte_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_byte_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_byte_array`.
class ArrayHelper_godot_pool_byte_array__dont_touch_that_level0 {
  final godot_pool_byte_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_byte_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_int_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_int_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_int_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_int_array`.
class ArrayHelper_godot_pool_int_array__dont_touch_that_level0 {
  final godot_pool_int_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_int_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_real_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_real_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_real_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_real_array`.
class ArrayHelper_godot_pool_real_array__dont_touch_that_level0 {
  final godot_pool_real_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_real_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_string_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_string_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_string_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_string_array`.
class ArrayHelper_godot_pool_string_array__dont_touch_that_level0 {
  final godot_pool_string_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_string_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_vector2_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_vector2_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_vector2_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_vector2_array`.
class ArrayHelper_godot_pool_vector2_array__dont_touch_that_level0 {
  final godot_pool_vector2_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_vector2_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_vector3_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_vector3_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_vector3_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_vector3_array`.
class ArrayHelper_godot_pool_vector3_array__dont_touch_that_level0 {
  final godot_pool_vector3_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_vector3_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_pool_color_array extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_pool_color_array__dont_touch_that_level0
      get _dont_touch_that =>
          ArrayHelper_godot_pool_color_array__dont_touch_that_level0(
              this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_pool_color_array`.
class ArrayHelper_godot_pool_color_array__dont_touch_that_level0 {
  final godot_pool_color_array _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_pool_color_array__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_color extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_color__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_color__dont_touch_that_level0(this, [16], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_color`.
class ArrayHelper_godot_color__dont_touch_that_level0 {
  final godot_color _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_color__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_vector2 extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_vector2__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_vector2__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_vector2`.
class ArrayHelper_godot_vector2__dont_touch_that_level0 {
  final godot_vector2 _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_vector2__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_vector3 extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_vector3__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_vector3__dont_touch_that_level0(this, [12], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_vector3`.
class ArrayHelper_godot_vector3__dont_touch_that_level0 {
  final godot_vector3 _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_vector3__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_basis extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_16;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_17;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_18;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_19;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_20;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_21;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_22;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_23;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_24;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_25;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_26;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_27;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_28;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_29;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_30;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_31;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_32;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_33;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_34;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_35;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_basis__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_basis__dont_touch_that_level0(this, [36], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_basis`.
class ArrayHelper_godot_basis__dont_touch_that_level0 {
  final godot_basis _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_basis__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      case 16:
        return _struct._unique__dont_touch_that_item_16;
      case 17:
        return _struct._unique__dont_touch_that_item_17;
      case 18:
        return _struct._unique__dont_touch_that_item_18;
      case 19:
        return _struct._unique__dont_touch_that_item_19;
      case 20:
        return _struct._unique__dont_touch_that_item_20;
      case 21:
        return _struct._unique__dont_touch_that_item_21;
      case 22:
        return _struct._unique__dont_touch_that_item_22;
      case 23:
        return _struct._unique__dont_touch_that_item_23;
      case 24:
        return _struct._unique__dont_touch_that_item_24;
      case 25:
        return _struct._unique__dont_touch_that_item_25;
      case 26:
        return _struct._unique__dont_touch_that_item_26;
      case 27:
        return _struct._unique__dont_touch_that_item_27;
      case 28:
        return _struct._unique__dont_touch_that_item_28;
      case 29:
        return _struct._unique__dont_touch_that_item_29;
      case 30:
        return _struct._unique__dont_touch_that_item_30;
      case 31:
        return _struct._unique__dont_touch_that_item_31;
      case 32:
        return _struct._unique__dont_touch_that_item_32;
      case 33:
        return _struct._unique__dont_touch_that_item_33;
      case 34:
        return _struct._unique__dont_touch_that_item_34;
      case 35:
        return _struct._unique__dont_touch_that_item_35;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      case 16:
        _struct._unique__dont_touch_that_item_16 = value;
        break;
      case 17:
        _struct._unique__dont_touch_that_item_17 = value;
        break;
      case 18:
        _struct._unique__dont_touch_that_item_18 = value;
        break;
      case 19:
        _struct._unique__dont_touch_that_item_19 = value;
        break;
      case 20:
        _struct._unique__dont_touch_that_item_20 = value;
        break;
      case 21:
        _struct._unique__dont_touch_that_item_21 = value;
        break;
      case 22:
        _struct._unique__dont_touch_that_item_22 = value;
        break;
      case 23:
        _struct._unique__dont_touch_that_item_23 = value;
        break;
      case 24:
        _struct._unique__dont_touch_that_item_24 = value;
        break;
      case 25:
        _struct._unique__dont_touch_that_item_25 = value;
        break;
      case 26:
        _struct._unique__dont_touch_that_item_26 = value;
        break;
      case 27:
        _struct._unique__dont_touch_that_item_27 = value;
        break;
      case 28:
        _struct._unique__dont_touch_that_item_28 = value;
        break;
      case 29:
        _struct._unique__dont_touch_that_item_29 = value;
        break;
      case 30:
        _struct._unique__dont_touch_that_item_30 = value;
        break;
      case 31:
        _struct._unique__dont_touch_that_item_31 = value;
        break;
      case 32:
        _struct._unique__dont_touch_that_item_32 = value;
        break;
      case 33:
        _struct._unique__dont_touch_that_item_33 = value;
        break;
      case 34:
        _struct._unique__dont_touch_that_item_34 = value;
        break;
      case 35:
        _struct._unique__dont_touch_that_item_35 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_quat extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_quat__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_quat__dont_touch_that_level0(this, [16], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_quat`.
class ArrayHelper_godot_quat__dont_touch_that_level0 {
  final godot_quat _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_quat__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

abstract class godot_vector3_axis {
  static const int GODOT_VECTOR3_AXIS_X = 0;
  static const int GODOT_VECTOR3_AXIS_Y = 1;
  static const int GODOT_VECTOR3_AXIS_Z = 2;
}

class godot_variant extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_16;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_17;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_18;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_19;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_20;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_21;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_22;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_23;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_variant__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_variant__dont_touch_that_level0(this, [24], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_variant`.
class ArrayHelper_godot_variant__dont_touch_that_level0 {
  final godot_variant _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_variant__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      case 16:
        return _struct._unique__dont_touch_that_item_16;
      case 17:
        return _struct._unique__dont_touch_that_item_17;
      case 18:
        return _struct._unique__dont_touch_that_item_18;
      case 19:
        return _struct._unique__dont_touch_that_item_19;
      case 20:
        return _struct._unique__dont_touch_that_item_20;
      case 21:
        return _struct._unique__dont_touch_that_item_21;
      case 22:
        return _struct._unique__dont_touch_that_item_22;
      case 23:
        return _struct._unique__dont_touch_that_item_23;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      case 16:
        _struct._unique__dont_touch_that_item_16 = value;
        break;
      case 17:
        _struct._unique__dont_touch_that_item_17 = value;
        break;
      case 18:
        _struct._unique__dont_touch_that_item_18 = value;
        break;
      case 19:
        _struct._unique__dont_touch_that_item_19 = value;
        break;
      case 20:
        _struct._unique__dont_touch_that_item_20 = value;
        break;
      case 21:
        _struct._unique__dont_touch_that_item_21 = value;
        break;
      case 22:
        _struct._unique__dont_touch_that_item_22 = value;
        break;
      case 23:
        _struct._unique__dont_touch_that_item_23 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

abstract class godot_variant_type {
  static const int GODOT_VARIANT_TYPE_NIL = 0;
  static const int GODOT_VARIANT_TYPE_BOOL = 1;
  static const int GODOT_VARIANT_TYPE_INT = 2;
  static const int GODOT_VARIANT_TYPE_REAL = 3;
  static const int GODOT_VARIANT_TYPE_STRING = 4;
  static const int GODOT_VARIANT_TYPE_VECTOR2 = 5;
  static const int GODOT_VARIANT_TYPE_RECT2 = 6;
  static const int GODOT_VARIANT_TYPE_VECTOR3 = 7;
  static const int GODOT_VARIANT_TYPE_TRANSFORM2D = 8;
  static const int GODOT_VARIANT_TYPE_PLANE = 9;
  static const int GODOT_VARIANT_TYPE_QUAT = 10;
  static const int GODOT_VARIANT_TYPE_AABB = 11;
  static const int GODOT_VARIANT_TYPE_BASIS = 12;
  static const int GODOT_VARIANT_TYPE_TRANSFORM = 13;
  static const int GODOT_VARIANT_TYPE_COLOR = 14;
  static const int GODOT_VARIANT_TYPE_NODE_PATH = 15;
  static const int GODOT_VARIANT_TYPE_RID = 16;
  static const int GODOT_VARIANT_TYPE_OBJECT = 17;
  static const int GODOT_VARIANT_TYPE_DICTIONARY = 18;
  static const int GODOT_VARIANT_TYPE_ARRAY = 19;
  static const int GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY = 20;
  static const int GODOT_VARIANT_TYPE_POOL_INT_ARRAY = 21;
  static const int GODOT_VARIANT_TYPE_POOL_REAL_ARRAY = 22;
  static const int GODOT_VARIANT_TYPE_POOL_STRING_ARRAY = 23;
  static const int GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY = 24;
  static const int GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY = 25;
  static const int GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY = 26;
}

abstract class godot_variant_call_error_error {
  static const int GODOT_CALL_ERROR_CALL_OK = 0;
  static const int GODOT_CALL_ERROR_CALL_ERROR_INVALID_METHOD = 1;
  static const int GODOT_CALL_ERROR_CALL_ERROR_INVALID_ARGUMENT = 2;
  static const int GODOT_CALL_ERROR_CALL_ERROR_TOO_MANY_ARGUMENTS = 3;
  static const int GODOT_CALL_ERROR_CALL_ERROR_TOO_FEW_ARGUMENTS = 4;
  static const int GODOT_CALL_ERROR_CALL_ERROR_INSTANCE_IS_NULL = 5;
}

class godot_variant_call_error extends ffi.Struct {
  @ffi.Int32()
  external int error;

  @ffi.Int32()
  external int argument;

  @ffi.Int32()
  external int expected;
}

abstract class godot_variant_operator {
  static const int GODOT_VARIANT_OP_EQUAL = 0;
  static const int GODOT_VARIANT_OP_NOT_EQUAL = 1;
  static const int GODOT_VARIANT_OP_LESS = 2;
  static const int GODOT_VARIANT_OP_LESS_EQUAL = 3;
  static const int GODOT_VARIANT_OP_GREATER = 4;
  static const int GODOT_VARIANT_OP_GREATER_EQUAL = 5;
  static const int GODOT_VARIANT_OP_ADD = 6;
  static const int GODOT_VARIANT_OP_SUBTRACT = 7;
  static const int GODOT_VARIANT_OP_MULTIPLY = 8;
  static const int GODOT_VARIANT_OP_DIVIDE = 9;
  static const int GODOT_VARIANT_OP_NEGATE = 10;
  static const int GODOT_VARIANT_OP_POSITIVE = 11;
  static const int GODOT_VARIANT_OP_MODULE = 12;
  static const int GODOT_VARIANT_OP_STRING_CONCAT = 13;
  static const int GODOT_VARIANT_OP_SHIFT_LEFT = 14;
  static const int GODOT_VARIANT_OP_SHIFT_RIGHT = 15;
  static const int GODOT_VARIANT_OP_BIT_AND = 16;
  static const int GODOT_VARIANT_OP_BIT_OR = 17;
  static const int GODOT_VARIANT_OP_BIT_XOR = 18;
  static const int GODOT_VARIANT_OP_BIT_NEGATE = 19;
  static const int GODOT_VARIANT_OP_AND = 20;
  static const int GODOT_VARIANT_OP_OR = 21;
  static const int GODOT_VARIANT_OP_XOR = 22;
  static const int GODOT_VARIANT_OP_NOT = 23;
  static const int GODOT_VARIANT_OP_IN = 24;
  static const int GODOT_VARIANT_OP_MAX = 25;
}

class godot_aabb extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_16;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_17;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_18;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_19;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_20;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_21;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_22;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_23;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_aabb__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_aabb__dont_touch_that_level0(this, [24], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_aabb`.
class ArrayHelper_godot_aabb__dont_touch_that_level0 {
  final godot_aabb _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_aabb__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      case 16:
        return _struct._unique__dont_touch_that_item_16;
      case 17:
        return _struct._unique__dont_touch_that_item_17;
      case 18:
        return _struct._unique__dont_touch_that_item_18;
      case 19:
        return _struct._unique__dont_touch_that_item_19;
      case 20:
        return _struct._unique__dont_touch_that_item_20;
      case 21:
        return _struct._unique__dont_touch_that_item_21;
      case 22:
        return _struct._unique__dont_touch_that_item_22;
      case 23:
        return _struct._unique__dont_touch_that_item_23;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      case 16:
        _struct._unique__dont_touch_that_item_16 = value;
        break;
      case 17:
        _struct._unique__dont_touch_that_item_17 = value;
        break;
      case 18:
        _struct._unique__dont_touch_that_item_18 = value;
        break;
      case 19:
        _struct._unique__dont_touch_that_item_19 = value;
        break;
      case 20:
        _struct._unique__dont_touch_that_item_20 = value;
        break;
      case 21:
        _struct._unique__dont_touch_that_item_21 = value;
        break;
      case 22:
        _struct._unique__dont_touch_that_item_22 = value;
        break;
      case 23:
        _struct._unique__dont_touch_that_item_23 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_plane extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_plane__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_plane__dont_touch_that_level0(this, [16], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_plane`.
class ArrayHelper_godot_plane__dont_touch_that_level0 {
  final godot_plane _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_plane__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_dictionary extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_dictionary__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_dictionary__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_dictionary`.
class ArrayHelper_godot_dictionary__dont_touch_that_level0 {
  final godot_dictionary _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_dictionary__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_node_path extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_node_path__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_node_path__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_node_path`.
class ArrayHelper_godot_node_path__dont_touch_that_level0 {
  final godot_node_path _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_node_path__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_rect2 extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_rect2__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_rect2__dont_touch_that_level0(this, [16], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_rect2`.
class ArrayHelper_godot_rect2__dont_touch_that_level0 {
  final godot_rect2 _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_rect2__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_rid extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_rid__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_rid__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_rid`.
class ArrayHelper_godot_rid__dont_touch_that_level0 {
  final godot_rid _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_rid__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_transform extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_16;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_17;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_18;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_19;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_20;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_21;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_22;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_23;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_24;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_25;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_26;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_27;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_28;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_29;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_30;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_31;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_32;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_33;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_34;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_35;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_36;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_37;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_38;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_39;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_40;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_41;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_42;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_43;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_44;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_45;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_46;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_47;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_transform__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_transform__dont_touch_that_level0(this, [48], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_transform`.
class ArrayHelper_godot_transform__dont_touch_that_level0 {
  final godot_transform _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_transform__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      case 16:
        return _struct._unique__dont_touch_that_item_16;
      case 17:
        return _struct._unique__dont_touch_that_item_17;
      case 18:
        return _struct._unique__dont_touch_that_item_18;
      case 19:
        return _struct._unique__dont_touch_that_item_19;
      case 20:
        return _struct._unique__dont_touch_that_item_20;
      case 21:
        return _struct._unique__dont_touch_that_item_21;
      case 22:
        return _struct._unique__dont_touch_that_item_22;
      case 23:
        return _struct._unique__dont_touch_that_item_23;
      case 24:
        return _struct._unique__dont_touch_that_item_24;
      case 25:
        return _struct._unique__dont_touch_that_item_25;
      case 26:
        return _struct._unique__dont_touch_that_item_26;
      case 27:
        return _struct._unique__dont_touch_that_item_27;
      case 28:
        return _struct._unique__dont_touch_that_item_28;
      case 29:
        return _struct._unique__dont_touch_that_item_29;
      case 30:
        return _struct._unique__dont_touch_that_item_30;
      case 31:
        return _struct._unique__dont_touch_that_item_31;
      case 32:
        return _struct._unique__dont_touch_that_item_32;
      case 33:
        return _struct._unique__dont_touch_that_item_33;
      case 34:
        return _struct._unique__dont_touch_that_item_34;
      case 35:
        return _struct._unique__dont_touch_that_item_35;
      case 36:
        return _struct._unique__dont_touch_that_item_36;
      case 37:
        return _struct._unique__dont_touch_that_item_37;
      case 38:
        return _struct._unique__dont_touch_that_item_38;
      case 39:
        return _struct._unique__dont_touch_that_item_39;
      case 40:
        return _struct._unique__dont_touch_that_item_40;
      case 41:
        return _struct._unique__dont_touch_that_item_41;
      case 42:
        return _struct._unique__dont_touch_that_item_42;
      case 43:
        return _struct._unique__dont_touch_that_item_43;
      case 44:
        return _struct._unique__dont_touch_that_item_44;
      case 45:
        return _struct._unique__dont_touch_that_item_45;
      case 46:
        return _struct._unique__dont_touch_that_item_46;
      case 47:
        return _struct._unique__dont_touch_that_item_47;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      case 16:
        _struct._unique__dont_touch_that_item_16 = value;
        break;
      case 17:
        _struct._unique__dont_touch_that_item_17 = value;
        break;
      case 18:
        _struct._unique__dont_touch_that_item_18 = value;
        break;
      case 19:
        _struct._unique__dont_touch_that_item_19 = value;
        break;
      case 20:
        _struct._unique__dont_touch_that_item_20 = value;
        break;
      case 21:
        _struct._unique__dont_touch_that_item_21 = value;
        break;
      case 22:
        _struct._unique__dont_touch_that_item_22 = value;
        break;
      case 23:
        _struct._unique__dont_touch_that_item_23 = value;
        break;
      case 24:
        _struct._unique__dont_touch_that_item_24 = value;
        break;
      case 25:
        _struct._unique__dont_touch_that_item_25 = value;
        break;
      case 26:
        _struct._unique__dont_touch_that_item_26 = value;
        break;
      case 27:
        _struct._unique__dont_touch_that_item_27 = value;
        break;
      case 28:
        _struct._unique__dont_touch_that_item_28 = value;
        break;
      case 29:
        _struct._unique__dont_touch_that_item_29 = value;
        break;
      case 30:
        _struct._unique__dont_touch_that_item_30 = value;
        break;
      case 31:
        _struct._unique__dont_touch_that_item_31 = value;
        break;
      case 32:
        _struct._unique__dont_touch_that_item_32 = value;
        break;
      case 33:
        _struct._unique__dont_touch_that_item_33 = value;
        break;
      case 34:
        _struct._unique__dont_touch_that_item_34 = value;
        break;
      case 35:
        _struct._unique__dont_touch_that_item_35 = value;
        break;
      case 36:
        _struct._unique__dont_touch_that_item_36 = value;
        break;
      case 37:
        _struct._unique__dont_touch_that_item_37 = value;
        break;
      case 38:
        _struct._unique__dont_touch_that_item_38 = value;
        break;
      case 39:
        _struct._unique__dont_touch_that_item_39 = value;
        break;
      case 40:
        _struct._unique__dont_touch_that_item_40 = value;
        break;
      case 41:
        _struct._unique__dont_touch_that_item_41 = value;
        break;
      case 42:
        _struct._unique__dont_touch_that_item_42 = value;
        break;
      case 43:
        _struct._unique__dont_touch_that_item_43 = value;
        break;
      case 44:
        _struct._unique__dont_touch_that_item_44 = value;
        break;
      case 45:
        _struct._unique__dont_touch_that_item_45 = value;
        break;
      case 46:
        _struct._unique__dont_touch_that_item_46 = value;
        break;
      case 47:
        _struct._unique__dont_touch_that_item_47 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_transform2d extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_8;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_9;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_10;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_11;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_12;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_13;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_14;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_15;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_16;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_17;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_18;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_19;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_20;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_21;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_22;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_23;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_transform2d__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_transform2d__dont_touch_that_level0(this, [24], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_transform2d`.
class ArrayHelper_godot_transform2d__dont_touch_that_level0 {
  final godot_transform2d _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_transform2d__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      case 8:
        return _struct._unique__dont_touch_that_item_8;
      case 9:
        return _struct._unique__dont_touch_that_item_9;
      case 10:
        return _struct._unique__dont_touch_that_item_10;
      case 11:
        return _struct._unique__dont_touch_that_item_11;
      case 12:
        return _struct._unique__dont_touch_that_item_12;
      case 13:
        return _struct._unique__dont_touch_that_item_13;
      case 14:
        return _struct._unique__dont_touch_that_item_14;
      case 15:
        return _struct._unique__dont_touch_that_item_15;
      case 16:
        return _struct._unique__dont_touch_that_item_16;
      case 17:
        return _struct._unique__dont_touch_that_item_17;
      case 18:
        return _struct._unique__dont_touch_that_item_18;
      case 19:
        return _struct._unique__dont_touch_that_item_19;
      case 20:
        return _struct._unique__dont_touch_that_item_20;
      case 21:
        return _struct._unique__dont_touch_that_item_21;
      case 22:
        return _struct._unique__dont_touch_that_item_22;
      case 23:
        return _struct._unique__dont_touch_that_item_23;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      case 8:
        _struct._unique__dont_touch_that_item_8 = value;
        break;
      case 9:
        _struct._unique__dont_touch_that_item_9 = value;
        break;
      case 10:
        _struct._unique__dont_touch_that_item_10 = value;
        break;
      case 11:
        _struct._unique__dont_touch_that_item_11 = value;
        break;
      case 12:
        _struct._unique__dont_touch_that_item_12 = value;
        break;
      case 13:
        _struct._unique__dont_touch_that_item_13 = value;
        break;
      case 14:
        _struct._unique__dont_touch_that_item_14 = value;
        break;
      case 15:
        _struct._unique__dont_touch_that_item_15 = value;
        break;
      case 16:
        _struct._unique__dont_touch_that_item_16 = value;
        break;
      case 17:
        _struct._unique__dont_touch_that_item_17 = value;
        break;
      case 18:
        _struct._unique__dont_touch_that_item_18 = value;
        break;
      case 19:
        _struct._unique__dont_touch_that_item_19 = value;
        break;
      case 20:
        _struct._unique__dont_touch_that_item_20 = value;
        break;
      case 21:
        _struct._unique__dont_touch_that_item_21 = value;
        break;
      case 22:
        _struct._unique__dont_touch_that_item_22 = value;
        break;
      case 23:
        _struct._unique__dont_touch_that_item_23 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

class godot_string_name extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_1;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_2;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_3;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_4;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_5;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_6;
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_7;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_string_name__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_string_name__dont_touch_that_level0(this, [8], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_string_name`.
class ArrayHelper_godot_string_name__dont_touch_that_level0 {
  final godot_string_name _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_string_name__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      case 1:
        return _struct._unique__dont_touch_that_item_1;
      case 2:
        return _struct._unique__dont_touch_that_item_2;
      case 3:
        return _struct._unique__dont_touch_that_item_3;
      case 4:
        return _struct._unique__dont_touch_that_item_4;
      case 5:
        return _struct._unique__dont_touch_that_item_5;
      case 6:
        return _struct._unique__dont_touch_that_item_6;
      case 7:
        return _struct._unique__dont_touch_that_item_7;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      case 1:
        _struct._unique__dont_touch_that_item_1 = value;
        break;
      case 2:
        _struct._unique__dont_touch_that_item_2 = value;
        break;
      case 3:
        _struct._unique__dont_touch_that_item_3 = value;
        break;
      case 4:
        _struct._unique__dont_touch_that_item_4 = value;
        break;
      case 5:
        _struct._unique__dont_touch_that_item_5 = value;
        break;
      case 6:
        _struct._unique__dont_touch_that_item_6 = value;
        break;
      case 7:
        _struct._unique__dont_touch_that_item_7 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// ////// MethodBind API
class godot_method_bind extends ffi.Struct {
  @ffi.Uint8()
  external int _unique__dont_touch_that_item_0;

  /// Helper for array `_dont_touch_that`.
  ArrayHelper_godot_method_bind__dont_touch_that_level0 get _dont_touch_that =>
      ArrayHelper_godot_method_bind__dont_touch_that_level0(this, [1], 0, 0);
}

/// Helper for array `_dont_touch_that` in struct `godot_method_bind`.
class ArrayHelper_godot_method_bind__dont_touch_that_level0 {
  final godot_method_bind _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_godot_method_bind__dont_touch_that_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique__dont_touch_that_item_0;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique__dont_touch_that_item_0 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

/// ////// Script API
class godot_gdnative_api_version extends ffi.Struct {
  @ffi.Uint32()
  external int major;

  @ffi.Uint32()
  external int minor;
}

class godot_gdnative_api_struct extends ffi.Struct {}

class godot_gdnative_core_api_struct extends ffi.Struct {}

class godot_gdnative_init_options extends ffi.Struct {
  @ffi.Uint8()
  external int in_editor;

  @ffi.Uint64()
  external int core_api_hash;

  @ffi.Uint64()
  external int editor_api_hash;

  @ffi.Uint64()
  external int no_api_hash;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> report_version_mismatch;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> report_loading_error;

  external ffi.Pointer<ffi.Void> gd_native_library;

  external ffi.Pointer<godot_gdnative_core_api_struct> api_struct;

  external ffi.Pointer<godot_string> active_library_path;
}

class godot_gdnative_terminate_options extends ffi.Struct {
  @ffi.Uint8()
  external int in_editor;
}

const int GODOT_API_VERSION = 1;

const int GODOT_TRUE = 1;

const int GODOT_FALSE = 0;

const int GODOT_STRING_SIZE = 8;

const int GODOT_CHAR_STRING_SIZE = 8;

const int GODOT_ARRAY_SIZE = 8;

const int GODOT_POOL_ARRAY_READ_ACCESS_SIZE = 1;

const int GODOT_POOL_ARRAY_WRITE_ACCESS_SIZE = 1;

const int GODOT_POOL_BYTE_ARRAY_SIZE = 8;

const int GODOT_POOL_INT_ARRAY_SIZE = 8;

const int GODOT_POOL_REAL_ARRAY_SIZE = 8;

const int GODOT_POOL_STRING_ARRAY_SIZE = 8;

const int GODOT_POOL_VECTOR2_ARRAY_SIZE = 8;

const int GODOT_POOL_VECTOR3_ARRAY_SIZE = 8;

const int GODOT_POOL_COLOR_ARRAY_SIZE = 8;

const int GODOT_COLOR_SIZE = 16;

const int GODOT_VECTOR2_SIZE = 8;

const int GODOT_VECTOR3_SIZE = 12;

const int GODOT_BASIS_SIZE = 36;

const int GODOT_QUAT_SIZE = 16;

const int GODOT_VARIANT_SIZE = 24;

const int GODOT_AABB_SIZE = 24;

const int GODOT_PLANE_SIZE = 16;

const int GODOT_DICTIONARY_SIZE = 8;

const int GODOT_NODE_PATH_SIZE = 8;

const int GODOT_RID_SIZE = 8;

const int GODOT_TRANSFORM_SIZE = 48;

const int GODOT_TRANSFORM2D_SIZE = 24;

const int GODOT_STRING_NAME_SIZE = 8;

typedef _c_godot_color_new_rgba = ffi.Void Function(
  ffi.Pointer<godot_color> r_dest,
  ffi.Float p_r,
  ffi.Float p_g,
  ffi.Float p_b,
  ffi.Float p_a,
);

typedef _dart_godot_color_new_rgba = void Function(
  ffi.Pointer<godot_color> r_dest,
  double p_r,
  double p_g,
  double p_b,
  double p_a,
);

typedef _c_godot_color_new_rgb = ffi.Void Function(
  ffi.Pointer<godot_color> r_dest,
  ffi.Float p_r,
  ffi.Float p_g,
  ffi.Float p_b,
);

typedef _dart_godot_color_new_rgb = void Function(
  ffi.Pointer<godot_color> r_dest,
  double p_r,
  double p_g,
  double p_b,
);

typedef _c_godot_color_get_r = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_r = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_set_r = ffi.Void Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float r,
);

typedef _dart_godot_color_set_r = void Function(
  ffi.Pointer<godot_color> p_self,
  double r,
);

typedef _c_godot_color_get_g = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_g = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_set_g = ffi.Void Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float g,
);

typedef _dart_godot_color_set_g = void Function(
  ffi.Pointer<godot_color> p_self,
  double g,
);

typedef _c_godot_color_get_b = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_b = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_set_b = ffi.Void Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float b,
);

typedef _dart_godot_color_set_b = void Function(
  ffi.Pointer<godot_color> p_self,
  double b,
);

typedef _c_godot_color_get_a = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_a = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_set_a = ffi.Void Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float a,
);

typedef _dart_godot_color_set_a = void Function(
  ffi.Pointer<godot_color> p_self,
  double a,
);

typedef _c_godot_color_get_h = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_h = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_get_s = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_s = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_get_v = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_get_v = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_as_string = godot_string Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_as_string = godot_string Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_rgba32 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_rgba32 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_abgr32 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_abgr32 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_abgr64 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_abgr64 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_argb64 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_argb64 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_rgba64 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_rgba64 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_to_argb32 = ffi.Int32 Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_to_argb32 = int Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_gray = ffi.Float Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_gray = double Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_inverted = godot_color Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_inverted = godot_color Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_contrasted = godot_color Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _dart_godot_color_contrasted = godot_color Function(
  ffi.Pointer<godot_color> p_self,
);

typedef _c_godot_color_linear_interpolate = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_color_linear_interpolate = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
  double p_t,
);

typedef _c_godot_color_blend = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_over,
);

typedef _dart_godot_color_blend = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_over,
);

typedef _c_godot_color_darkened = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float p_amount,
);

typedef _dart_godot_color_darkened = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  double p_amount,
);

typedef _c_godot_color_from_hsv = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float p_h,
  ffi.Float p_s,
  ffi.Float p_v,
  ffi.Float p_a,
);

typedef _dart_godot_color_from_hsv = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  double p_h,
  double p_s,
  double p_v,
  double p_a,
);

typedef _c_godot_color_lightened = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Float p_amount,
);

typedef _dart_godot_color_lightened = godot_color Function(
  ffi.Pointer<godot_color> p_self,
  double p_amount,
);

typedef _c_godot_color_to_html = godot_string Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Uint8 p_with_alpha,
);

typedef _dart_godot_color_to_html = godot_string Function(
  ffi.Pointer<godot_color> p_self,
  int p_with_alpha,
);

typedef _c_godot_color_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
);

typedef _dart_godot_color_operator_equal = int Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
);

typedef _c_godot_color_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
);

typedef _dart_godot_color_operator_less = int Function(
  ffi.Pointer<godot_color> p_self,
  ffi.Pointer<godot_color> p_b,
);

typedef _c_godot_vector2_new = ffi.Void Function(
  ffi.Pointer<godot_vector2> r_dest,
  ffi.Float p_x,
  ffi.Float p_y,
);

typedef _dart_godot_vector2_new = void Function(
  ffi.Pointer<godot_vector2> r_dest,
  double p_x,
  double p_y,
);

typedef _c_godot_vector2_as_string = godot_string Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_as_string = godot_string Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_normalized = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_normalized = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_length = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_length = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_angle = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_angle = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_length_squared = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_length_squared = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_is_normalized = ffi.Uint8 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_is_normalized = int Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_direction_to = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_direction_to = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_distance_to = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _dart_godot_vector2_distance_to = double Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _c_godot_vector2_distance_squared_to = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _dart_godot_vector2_distance_squared_to = double Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _c_godot_vector2_angle_to = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _dart_godot_vector2_angle_to = double Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _c_godot_vector2_angle_to_point = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _dart_godot_vector2_angle_to_point = double Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _c_godot_vector2_linear_interpolate = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_vector2_linear_interpolate = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
  double p_t,
);

typedef _c_godot_vector2_cubic_interpolate = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
  ffi.Pointer<godot_vector2> p_pre_a,
  ffi.Pointer<godot_vector2> p_post_b,
  ffi.Float p_t,
);

typedef _dart_godot_vector2_cubic_interpolate = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
  ffi.Pointer<godot_vector2> p_pre_a,
  ffi.Pointer<godot_vector2> p_post_b,
  double p_t,
);

typedef _c_godot_vector2_move_toward = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
  ffi.Float p_delta,
);

typedef _dart_godot_vector2_move_toward = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_to,
  double p_delta,
);

typedef _c_godot_vector2_rotated = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_phi,
);

typedef _dart_godot_vector2_rotated = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_phi,
);

typedef _c_godot_vector2_tangent = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_tangent = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_floor = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_floor = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_snapped = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_by,
);

typedef _dart_godot_vector2_snapped = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_by,
);

typedef _c_godot_vector2_aspect = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_aspect = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_dot = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_with,
);

typedef _dart_godot_vector2_dot = double Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_with,
);

typedef _c_godot_vector2_slide = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _dart_godot_vector2_slide = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _c_godot_vector2_bounce = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _dart_godot_vector2_bounce = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _c_godot_vector2_reflect = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _dart_godot_vector2_reflect = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_n,
);

typedef _c_godot_vector2_abs = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_abs = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_clamped = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_length,
);

typedef _dart_godot_vector2_clamped = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_length,
);

typedef _c_godot_vector2_operator_add = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_add = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_subtract = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_subtract = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_multiply_vector = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_multiply_vector = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_multiply_scalar = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_vector2_operator_multiply_scalar = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_b,
);

typedef _c_godot_vector2_operator_divide_vector = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_divide_vector = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_divide_scalar = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_vector2_operator_divide_scalar = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_b,
);

typedef _c_godot_vector2_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_equal = int Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _dart_godot_vector2_operator_less = int Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Pointer<godot_vector2> p_b,
);

typedef _c_godot_vector2_operator_neg = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_operator_neg = godot_vector2 Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_set_x = ffi.Void Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_x,
);

typedef _dart_godot_vector2_set_x = void Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_x,
);

typedef _c_godot_vector2_set_y = ffi.Void Function(
  ffi.Pointer<godot_vector2> p_self,
  ffi.Float p_y,
);

typedef _dart_godot_vector2_set_y = void Function(
  ffi.Pointer<godot_vector2> p_self,
  double p_y,
);

typedef _c_godot_vector2_get_x = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_get_x = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_vector2_get_y = ffi.Float Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _dart_godot_vector2_get_y = double Function(
  ffi.Pointer<godot_vector2> p_self,
);

typedef _c_godot_quat_new = ffi.Void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Float p_x,
  ffi.Float p_y,
  ffi.Float p_z,
  ffi.Float p_w,
);

typedef _dart_godot_quat_new = void Function(
  ffi.Pointer<godot_quat> r_dest,
  double p_x,
  double p_y,
  double p_z,
  double p_w,
);

typedef _c_godot_quat_new_with_axis_angle = ffi.Void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_angle,
);

typedef _dart_godot_quat_new_with_axis_angle = void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_vector3> p_axis,
  double p_angle,
);

typedef _c_godot_quat_new_with_basis = ffi.Void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_basis> p_basis,
);

typedef _dart_godot_quat_new_with_basis = void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_basis> p_basis,
);

typedef _c_godot_quat_new_with_euler = ffi.Void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_vector3> p_euler,
);

typedef _dart_godot_quat_new_with_euler = void Function(
  ffi.Pointer<godot_quat> r_dest,
  ffi.Pointer<godot_vector3> p_euler,
);

typedef _c_godot_quat_get_x = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_get_x = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_set_x = ffi.Void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float val,
);

typedef _dart_godot_quat_set_x = void Function(
  ffi.Pointer<godot_quat> p_self,
  double val,
);

typedef _c_godot_quat_get_y = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_get_y = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_set_y = ffi.Void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float val,
);

typedef _dart_godot_quat_set_y = void Function(
  ffi.Pointer<godot_quat> p_self,
  double val,
);

typedef _c_godot_quat_get_z = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_get_z = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_set_z = ffi.Void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float val,
);

typedef _dart_godot_quat_set_z = void Function(
  ffi.Pointer<godot_quat> p_self,
  double val,
);

typedef _c_godot_quat_get_w = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_get_w = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_set_w = ffi.Void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float val,
);

typedef _dart_godot_quat_set_w = void Function(
  ffi.Pointer<godot_quat> p_self,
  double val,
);

typedef _c_godot_quat_as_string = godot_string Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_as_string = godot_string Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_length = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_length = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_length_squared = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_length_squared = double Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_normalized = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_normalized = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_is_normalized = ffi.Uint8 Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_is_normalized = int Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_inverse = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_inverse = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_dot = ffi.Float Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _dart_godot_quat_dot = double Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _c_godot_quat_xform = godot_vector3 Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_quat_xform = godot_vector3 Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_quat_slerp = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_quat_slerp = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  double p_t,
);

typedef _c_godot_quat_slerpni = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_quat_slerpni = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  double p_t,
);

typedef _c_godot_quat_cubic_slerp = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  ffi.Pointer<godot_quat> p_pre_a,
  ffi.Pointer<godot_quat> p_post_b,
  ffi.Float p_t,
);

typedef _dart_godot_quat_cubic_slerp = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
  ffi.Pointer<godot_quat> p_pre_a,
  ffi.Pointer<godot_quat> p_post_b,
  double p_t,
);

typedef _c_godot_quat_operator_multiply = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_quat_operator_multiply = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  double p_b,
);

typedef _c_godot_quat_operator_add = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _dart_godot_quat_operator_add = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _c_godot_quat_operator_subtract = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _dart_godot_quat_operator_subtract = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _c_godot_quat_operator_divide = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_quat_operator_divide = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
  double p_b,
);

typedef _c_godot_quat_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _dart_godot_quat_operator_equal = int Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_quat> p_b,
);

typedef _c_godot_quat_operator_neg = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _dart_godot_quat_operator_neg = godot_quat Function(
  ffi.Pointer<godot_quat> p_self,
);

typedef _c_godot_quat_set_axis_angle = ffi.Void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_angle,
);

typedef _dart_godot_quat_set_axis_angle = void Function(
  ffi.Pointer<godot_quat> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  double p_angle,
);

typedef _c_godot_basis_new_with_rows = ffi.Void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_x_axis,
  ffi.Pointer<godot_vector3> p_y_axis,
  ffi.Pointer<godot_vector3> p_z_axis,
);

typedef _dart_godot_basis_new_with_rows = void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_x_axis,
  ffi.Pointer<godot_vector3> p_y_axis,
  ffi.Pointer<godot_vector3> p_z_axis,
);

typedef _c_godot_basis_new_with_axis_and_angle = ffi.Void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_phi,
);

typedef _dart_godot_basis_new_with_axis_and_angle = void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_axis,
  double p_phi,
);

typedef _c_godot_basis_new_with_euler = ffi.Void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_euler,
);

typedef _dart_godot_basis_new_with_euler = void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_vector3> p_euler,
);

typedef _c_godot_basis_new_with_euler_quat = ffi.Void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_quat> p_euler,
);

typedef _dart_godot_basis_new_with_euler_quat = void Function(
  ffi.Pointer<godot_basis> r_dest,
  ffi.Pointer<godot_quat> p_euler,
);

typedef _c_godot_basis_as_string = godot_string Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_as_string = godot_string Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_inverse = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_inverse = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_transposed = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_transposed = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_orthonormalized = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_orthonormalized = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_determinant = ffi.Float Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_determinant = double Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_rotated = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_phi,
);

typedef _dart_godot_basis_rotated = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  double p_phi,
);

typedef _c_godot_basis_scaled = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _dart_godot_basis_scaled = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _c_godot_basis_get_scale = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_get_scale = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_get_euler = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_get_euler = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_get_quat = godot_quat Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_get_quat = godot_quat Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_set_quat = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _dart_godot_basis_set_quat = void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _c_godot_basis_set_axis_angle_scale = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_phi,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _dart_godot_basis_set_axis_angle_scale = void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  double p_phi,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _c_godot_basis_set_euler_scale = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_euler,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _dart_godot_basis_set_euler_scale = void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_euler,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _c_godot_basis_set_quat_scale = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_quat> p_quat,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _dart_godot_basis_set_quat_scale = void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_quat> p_quat,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _c_godot_basis_tdotx = ffi.Float Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _dart_godot_basis_tdotx = double Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _c_godot_basis_tdoty = ffi.Float Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _dart_godot_basis_tdoty = double Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _c_godot_basis_tdotz = ffi.Float Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _dart_godot_basis_tdotz = double Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_with,
);

typedef _c_godot_basis_xform = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_basis_xform = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_basis_xform_inv = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_basis_xform_inv = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_basis_get_orthogonal_index = ffi.Int32 Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _dart_godot_basis_get_orthogonal_index = int Function(
  ffi.Pointer<godot_basis> p_self,
);

typedef _c_godot_basis_new = ffi.Void Function(
  ffi.Pointer<godot_basis> r_dest,
);

typedef _dart_godot_basis_new = void Function(
  ffi.Pointer<godot_basis> r_dest,
);

typedef _c_godot_basis_get_elements = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_elements,
);

typedef _dart_godot_basis_get_elements = void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_vector3> p_elements,
);

typedef _c_godot_basis_get_axis = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Int32 p_axis,
);

typedef _dart_godot_basis_get_axis = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  int p_axis,
);

typedef _c_godot_basis_set_axis = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Int32 p_axis,
  ffi.Pointer<godot_vector3> p_value,
);

typedef _dart_godot_basis_set_axis = void Function(
  ffi.Pointer<godot_basis> p_self,
  int p_axis,
  ffi.Pointer<godot_vector3> p_value,
);

typedef _c_godot_basis_get_row = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Int32 p_row,
);

typedef _dart_godot_basis_get_row = godot_vector3 Function(
  ffi.Pointer<godot_basis> p_self,
  int p_row,
);

typedef _c_godot_basis_set_row = ffi.Void Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Int32 p_row,
  ffi.Pointer<godot_vector3> p_value,
);

typedef _dart_godot_basis_set_row = void Function(
  ffi.Pointer<godot_basis> p_self,
  int p_row,
  ffi.Pointer<godot_vector3> p_value,
);

typedef _c_godot_basis_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _dart_godot_basis_operator_equal = int Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _c_godot_basis_operator_add = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _dart_godot_basis_operator_add = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _c_godot_basis_operator_subtract = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _dart_godot_basis_operator_subtract = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _c_godot_basis_operator_multiply_vector = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _dart_godot_basis_operator_multiply_vector = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
);

typedef _c_godot_basis_operator_multiply_scalar = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_basis_operator_multiply_scalar = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  double p_b,
);

typedef _c_godot_basis_slerp = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_basis_slerp = godot_basis Function(
  ffi.Pointer<godot_basis> p_self,
  ffi.Pointer<godot_basis> p_b,
  double p_t,
);

typedef _c_godot_vector3_new = ffi.Void Function(
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Float p_x,
  ffi.Float p_y,
  ffi.Float p_z,
);

typedef _dart_godot_vector3_new = void Function(
  ffi.Pointer<godot_vector3> r_dest,
  double p_x,
  double p_y,
  double p_z,
);

typedef _c_godot_vector3_as_string = godot_string Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_as_string = godot_string Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_min_axis = ffi.Int32 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_min_axis = int Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_max_axis = ffi.Int32 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_max_axis = int Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_length = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_length = double Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_length_squared = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_length_squared = double Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_is_normalized = ffi.Uint8 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_is_normalized = int Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_normalized = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_normalized = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_inverse = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_inverse = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_snapped = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_by,
);

typedef _dart_godot_vector3_snapped = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_by,
);

typedef _c_godot_vector3_rotated = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_phi,
);

typedef _dart_godot_vector3_rotated = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  double p_phi,
);

typedef _c_godot_vector3_linear_interpolate = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
  ffi.Float p_t,
);

typedef _dart_godot_vector3_linear_interpolate = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
  double p_t,
);

typedef _c_godot_vector3_cubic_interpolate = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
  ffi.Pointer<godot_vector3> p_pre_a,
  ffi.Pointer<godot_vector3> p_post_b,
  ffi.Float p_t,
);

typedef _dart_godot_vector3_cubic_interpolate = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
  ffi.Pointer<godot_vector3> p_pre_a,
  ffi.Pointer<godot_vector3> p_post_b,
  double p_t,
);

typedef _c_godot_vector3_move_toward = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_to,
  ffi.Float p_delta,
);

typedef _dart_godot_vector3_move_toward = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_to,
  double p_delta,
);

typedef _c_godot_vector3_dot = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_dot = double Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_cross = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_cross = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_outer = godot_basis Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_outer = godot_basis Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_to_diagonal_matrix = godot_basis Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_to_diagonal_matrix = godot_basis Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_abs = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_abs = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_floor = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_floor = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_ceil = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_ceil = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_direction_to = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_direction_to = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_distance_to = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_distance_to = double Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_distance_squared_to = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_distance_squared_to = double Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_angle_to = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_to,
);

typedef _dart_godot_vector3_angle_to = double Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_to,
);

typedef _c_godot_vector3_slide = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _dart_godot_vector3_slide = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _c_godot_vector3_bounce = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _dart_godot_vector3_bounce = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _c_godot_vector3_reflect = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _dart_godot_vector3_reflect = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_n,
);

typedef _c_godot_vector3_operator_add = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_add = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_subtract = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_subtract = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_multiply_vector = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_multiply_vector = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_multiply_scalar = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_vector3_operator_multiply_scalar = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  double p_b,
);

typedef _c_godot_vector3_operator_divide_vector = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_divide_vector = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_divide_scalar = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Float p_b,
);

typedef _dart_godot_vector3_operator_divide_scalar = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
  double p_b,
);

typedef _c_godot_vector3_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_equal = int Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _dart_godot_vector3_operator_less = int Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Pointer<godot_vector3> p_b,
);

typedef _c_godot_vector3_operator_neg = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _dart_godot_vector3_operator_neg = godot_vector3 Function(
  ffi.Pointer<godot_vector3> p_self,
);

typedef _c_godot_vector3_set_axis = ffi.Void Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Int32 p_axis,
  ffi.Float p_val,
);

typedef _dart_godot_vector3_set_axis = void Function(
  ffi.Pointer<godot_vector3> p_self,
  int p_axis,
  double p_val,
);

typedef _c_godot_vector3_get_axis = ffi.Float Function(
  ffi.Pointer<godot_vector3> p_self,
  ffi.Int32 p_axis,
);

typedef _dart_godot_vector3_get_axis = double Function(
  ffi.Pointer<godot_vector3> p_self,
  int p_axis,
);

typedef _c_godot_pool_byte_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
);

typedef _dart_godot_pool_byte_array_new = void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
);

typedef _c_godot_pool_byte_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_src,
);

typedef _dart_godot_pool_byte_array_new_copy = void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_src,
);

typedef _c_godot_pool_byte_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_byte_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_byte_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_byte_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Uint8 p_data,
);

typedef _dart_godot_pool_byte_array_append = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_data,
);

typedef _c_godot_pool_byte_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Pointer<godot_pool_byte_array> p_array,
);

typedef _dart_godot_pool_byte_array_append_array = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Pointer<godot_pool_byte_array> p_array,
);

typedef _c_godot_pool_byte_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Int32 p_idx,
  ffi.Uint8 p_data,
);

typedef _dart_godot_pool_byte_array_insert = int Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_idx,
  int p_data,
);

typedef _c_godot_pool_byte_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_invert = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_byte_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Uint8 p_data,
);

typedef _dart_godot_pool_byte_array_push_back = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_data,
);

typedef _c_godot_pool_byte_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_byte_array_remove = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_byte_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_byte_array_resize = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_size,
);

typedef _c_godot_pool_byte_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_byte_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_byte_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Int32 p_idx,
  ffi.Uint8 p_data,
);

typedef _dart_godot_pool_byte_array_set = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_idx,
  int p_data,
);

typedef _c_godot_pool_byte_array_get = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_byte_array_get = int Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_byte_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_size = int Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_byte_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_empty = int Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_byte_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _dart_godot_pool_byte_array_destroy = void Function(
  ffi.Pointer<godot_pool_byte_array> p_self,
);

typedef _c_godot_pool_int_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
);

typedef _dart_godot_pool_int_array_new = void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
);

typedef _c_godot_pool_int_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
  ffi.Pointer<godot_pool_int_array> p_src,
);

typedef _dart_godot_pool_int_array_new_copy = void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
  ffi.Pointer<godot_pool_int_array> p_src,
);

typedef _c_godot_pool_int_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_int_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_int_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_int_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_data,
);

typedef _dart_godot_pool_int_array_append = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_data,
);

typedef _c_godot_pool_int_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Pointer<godot_pool_int_array> p_array,
);

typedef _dart_godot_pool_int_array_append_array = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Pointer<godot_pool_int_array> p_array,
);

typedef _c_godot_pool_int_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_idx,
  ffi.Int32 p_data,
);

typedef _dart_godot_pool_int_array_insert = int Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_idx,
  int p_data,
);

typedef _c_godot_pool_int_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_invert = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_int_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_data,
);

typedef _dart_godot_pool_int_array_push_back = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_data,
);

typedef _c_godot_pool_int_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_int_array_remove = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_int_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_int_array_resize = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_size,
);

typedef _c_godot_pool_int_array_read = ffi.Pointer<godot_pool_array_read_access>
    Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_int_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_int_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_idx,
  ffi.Int32 p_data,
);

typedef _dart_godot_pool_int_array_set = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_idx,
  int p_data,
);

typedef _c_godot_pool_int_array_get = ffi.Int32 Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_int_array_get = int Function(
  ffi.Pointer<godot_pool_int_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_int_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_size = int Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_int_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_empty = int Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_int_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _dart_godot_pool_int_array_destroy = void Function(
  ffi.Pointer<godot_pool_int_array> p_self,
);

typedef _c_godot_pool_real_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
);

typedef _dart_godot_pool_real_array_new = void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
);

typedef _c_godot_pool_real_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
  ffi.Pointer<godot_pool_real_array> p_src,
);

typedef _dart_godot_pool_real_array_new_copy = void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
  ffi.Pointer<godot_pool_real_array> p_src,
);

typedef _c_godot_pool_real_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_real_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_real_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_real_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Float p_data,
);

typedef _dart_godot_pool_real_array_append = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  double p_data,
);

typedef _c_godot_pool_real_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Pointer<godot_pool_real_array> p_array,
);

typedef _dart_godot_pool_real_array_append_array = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Pointer<godot_pool_real_array> p_array,
);

typedef _c_godot_pool_real_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Int32 p_idx,
  ffi.Float p_data,
);

typedef _dart_godot_pool_real_array_insert = int Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  int p_idx,
  double p_data,
);

typedef _c_godot_pool_real_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_invert = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_real_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Float p_data,
);

typedef _dart_godot_pool_real_array_push_back = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  double p_data,
);

typedef _c_godot_pool_real_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_real_array_remove = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_real_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_real_array_resize = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  int p_size,
);

typedef _c_godot_pool_real_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_real_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_real_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Int32 p_idx,
  ffi.Float p_data,
);

typedef _dart_godot_pool_real_array_set = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  int p_idx,
  double p_data,
);

typedef _c_godot_pool_real_array_get = ffi.Float Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_real_array_get = double Function(
  ffi.Pointer<godot_pool_real_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_real_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_size = int Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_real_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_empty = int Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_real_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _dart_godot_pool_real_array_destroy = void Function(
  ffi.Pointer<godot_pool_real_array> p_self,
);

typedef _c_godot_pool_string_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
);

typedef _dart_godot_pool_string_array_new = void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
);

typedef _c_godot_pool_string_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
  ffi.Pointer<godot_pool_string_array> p_src,
);

typedef _dart_godot_pool_string_array_new_copy = void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
  ffi.Pointer<godot_pool_string_array> p_src,
);

typedef _c_godot_pool_string_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_string_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_string_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_string_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_string> p_data,
);

typedef _dart_godot_pool_string_array_append = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_string> p_data,
);

typedef _c_godot_pool_string_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_pool_string_array> p_array,
);

typedef _dart_godot_pool_string_array_append_array = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_pool_string_array> p_array,
);

typedef _c_godot_pool_string_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_string> p_data,
);

typedef _dart_godot_pool_string_array_insert = int Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  int p_idx,
  ffi.Pointer<godot_string> p_data,
);

typedef _c_godot_pool_string_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_invert = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_string_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_string> p_data,
);

typedef _dart_godot_pool_string_array_push_back = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Pointer<godot_string> p_data,
);

typedef _c_godot_pool_string_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_string_array_remove = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_string_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_string_array_resize = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  int p_size,
);

typedef _c_godot_pool_string_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_string_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_string_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_string> p_data,
);

typedef _dart_godot_pool_string_array_set = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  int p_idx,
  ffi.Pointer<godot_string> p_data,
);

typedef _c_godot_pool_string_array_get = godot_string Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_string_array_get = godot_string Function(
  ffi.Pointer<godot_pool_string_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_string_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_size = int Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_string_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_empty = int Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_string_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _dart_godot_pool_string_array_destroy = void Function(
  ffi.Pointer<godot_pool_string_array> p_self,
);

typedef _c_godot_pool_vector2_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
);

typedef _dart_godot_pool_vector2_array_new = void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
);

typedef _c_godot_pool_vector2_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_src,
);

typedef _dart_godot_pool_vector2_array_new_copy = void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_src,
);

typedef _c_godot_pool_vector2_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_vector2_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_vector2_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_vector2_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _dart_godot_pool_vector2_array_append = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _c_godot_pool_vector2_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_pool_vector2_array> p_array,
);

typedef _dart_godot_pool_vector2_array_append_array = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_pool_vector2_array> p_array,
);

typedef _c_godot_pool_vector2_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _dart_godot_pool_vector2_array_insert = int Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  int p_idx,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _c_godot_pool_vector2_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_invert = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector2_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _dart_godot_pool_vector2_array_push_back = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _c_godot_pool_vector2_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_vector2_array_remove = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_vector2_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_vector2_array_resize = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  int p_size,
);

typedef _c_godot_pool_vector2_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector2_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector2_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _dart_godot_pool_vector2_array_set = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  int p_idx,
  ffi.Pointer<godot_vector2> p_data,
);

typedef _c_godot_pool_vector2_array_get = godot_vector2 Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_vector2_array_get = godot_vector2 Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_vector2_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_size = int Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector2_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_empty = int Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector2_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _dart_godot_pool_vector2_array_destroy = void Function(
  ffi.Pointer<godot_pool_vector2_array> p_self,
);

typedef _c_godot_pool_vector3_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
);

typedef _dart_godot_pool_vector3_array_new = void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
);

typedef _c_godot_pool_vector3_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_src,
);

typedef _dart_godot_pool_vector3_array_new_copy = void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_src,
);

typedef _c_godot_pool_vector3_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_vector3_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_vector3_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_vector3_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _dart_godot_pool_vector3_array_append = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _c_godot_pool_vector3_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_pool_vector3_array> p_array,
);

typedef _dart_godot_pool_vector3_array_append_array = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_pool_vector3_array> p_array,
);

typedef _c_godot_pool_vector3_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _dart_godot_pool_vector3_array_insert = int Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  int p_idx,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _c_godot_pool_vector3_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_invert = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_vector3_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _dart_godot_pool_vector3_array_push_back = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _c_godot_pool_vector3_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_vector3_array_remove = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_vector3_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_vector3_array_resize = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  int p_size,
);

typedef _c_godot_pool_vector3_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_vector3_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_vector3_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _dart_godot_pool_vector3_array_set = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  int p_idx,
  ffi.Pointer<godot_vector3> p_data,
);

typedef _c_godot_pool_vector3_array_get = godot_vector3 Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_vector3_array_get = godot_vector3 Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_vector3_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_size = int Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_vector3_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_empty = int Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_vector3_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _dart_godot_pool_vector3_array_destroy = void Function(
  ffi.Pointer<godot_pool_vector3_array> p_self,
);

typedef _c_godot_pool_color_array_new = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
);

typedef _dart_godot_pool_color_array_new = void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
);

typedef _c_godot_pool_color_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
  ffi.Pointer<godot_pool_color_array> p_src,
);

typedef _dart_godot_pool_color_array_new_copy = void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
  ffi.Pointer<godot_pool_color_array> p_src,
);

typedef _c_godot_pool_color_array_new_with_array = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _dart_godot_pool_color_array_new_with_array = void Function(
  ffi.Pointer<godot_pool_color_array> r_dest,
  ffi.Pointer<godot_array> p_a,
);

typedef _c_godot_pool_color_array_append = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_color> p_data,
);

typedef _dart_godot_pool_color_array_append = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_color> p_data,
);

typedef _c_godot_pool_color_array_append_array = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_pool_color_array> p_array,
);

typedef _dart_godot_pool_color_array_append_array = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_pool_color_array> p_array,
);

typedef _c_godot_pool_color_array_insert = ffi.Int32 Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_color> p_data,
);

typedef _dart_godot_pool_color_array_insert = int Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  int p_idx,
  ffi.Pointer<godot_color> p_data,
);

typedef _c_godot_pool_color_array_invert = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_invert = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_color_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_color> p_data,
);

typedef _dart_godot_pool_color_array_push_back = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Pointer<godot_color> p_data,
);

typedef _c_godot_pool_color_array_remove = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_color_array_remove = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_color_array_resize = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_pool_color_array_resize = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  int p_size,
);

typedef _c_godot_pool_color_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_read
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_color_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_write
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_color_array_set = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_color> p_data,
);

typedef _dart_godot_pool_color_array_set = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  int p_idx,
  ffi.Pointer<godot_color> p_data,
);

typedef _c_godot_pool_color_array_get = godot_color Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_pool_color_array_get = godot_color Function(
  ffi.Pointer<godot_pool_color_array> p_self,
  int p_idx,
);

typedef _c_godot_pool_color_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_size = int Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_color_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_empty = int Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_color_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _dart_godot_pool_color_array_destroy = void Function(
  ffi.Pointer<godot_pool_color_array> p_self,
);

typedef _c_godot_pool_byte_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_byte_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_byte_array_read_access_ptr = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_byte_array_read_access_ptr = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_byte_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_byte_array_read_access_operator_assign = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_byte_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_byte_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_int_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_int_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_int_array_read_access_ptr = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_int_array_read_access_ptr = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_int_array_read_access_operator_assign = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_int_array_read_access_operator_assign = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_int_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_int_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_real_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_real_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_real_array_read_access_ptr = ffi.Pointer<ffi.Float>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_real_array_read_access_ptr = ffi.Pointer<ffi.Float>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_real_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_real_array_read_access_operator_assign = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_real_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_real_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_string_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_string_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_string_array_read_access_ptr = ffi.Pointer<godot_string>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_string_array_read_access_ptr
    = ffi.Pointer<godot_string> Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_string_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_string_array_read_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_string_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_string_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_vector2_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_vector2_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_vector2_array_read_access_ptr = ffi.Pointer<godot_vector2>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_vector2_array_read_access_ptr
    = ffi.Pointer<godot_vector2> Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_vector2_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_vector2_array_read_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_vector2_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_vector2_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_vector3_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_vector3_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_vector3_array_read_access_ptr = ffi.Pointer<godot_vector3>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_vector3_array_read_access_ptr
    = ffi.Pointer<godot_vector3> Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_vector3_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_vector3_array_read_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_vector3_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_vector3_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_color_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_color_array_read_access_copy
    = ffi.Pointer<godot_pool_array_read_access> Function(
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_color_array_read_access_ptr = ffi.Pointer<godot_color>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_color_array_read_access_ptr = ffi.Pointer<godot_color>
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_color_array_read_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _dart_godot_pool_color_array_read_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
  ffi.Pointer<godot_pool_array_read_access> p_other,
);

typedef _c_godot_pool_color_array_read_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _dart_godot_pool_color_array_read_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_read_access> p_read,
);

typedef _c_godot_pool_byte_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_byte_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_byte_array_write_access_ptr = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_byte_array_write_access_ptr = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_byte_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_byte_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_byte_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_byte_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_int_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_int_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_int_array_write_access_ptr = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_int_array_write_access_ptr = ffi.Pointer<ffi.Int32>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_int_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_int_array_write_access_operator_assign = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_int_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_int_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_real_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_real_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_real_array_write_access_ptr = ffi.Pointer<ffi.Float>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_real_array_write_access_ptr = ffi.Pointer<ffi.Float>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_real_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_real_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_real_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_real_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_string_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_string_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_string_array_write_access_ptr = ffi.Pointer<godot_string>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_string_array_write_access_ptr
    = ffi.Pointer<godot_string> Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_string_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_string_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_string_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_string_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_vector2_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_vector2_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_vector2_array_write_access_ptr
    = ffi.Pointer<godot_vector2> Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_vector2_array_write_access_ptr
    = ffi.Pointer<godot_vector2> Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_vector2_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_vector2_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_vector2_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_vector2_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_vector3_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_vector3_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_vector3_array_write_access_ptr
    = ffi.Pointer<godot_vector3> Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_vector3_array_write_access_ptr
    = ffi.Pointer<godot_vector3> Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_vector3_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_vector3_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_vector3_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_vector3_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_color_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_color_array_write_access_copy
    = ffi.Pointer<godot_pool_array_write_access> Function(
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_color_array_write_access_ptr = ffi.Pointer<godot_color>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_color_array_write_access_ptr = ffi.Pointer<godot_color>
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_pool_color_array_write_access_operator_assign = ffi.Void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _dart_godot_pool_color_array_write_access_operator_assign = void
    Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
  ffi.Pointer<godot_pool_array_write_access> p_other,
);

typedef _c_godot_pool_color_array_write_access_destroy = ffi.Void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _dart_godot_pool_color_array_write_access_destroy = void Function(
  ffi.Pointer<godot_pool_array_write_access> p_write,
);

typedef _c_godot_plane_new_with_reals = ffi.Void Function(
  ffi.Pointer<godot_plane> r_dest,
  ffi.Float p_a,
  ffi.Float p_b,
  ffi.Float p_c,
  ffi.Float p_d,
);

typedef _dart_godot_plane_new_with_reals = void Function(
  ffi.Pointer<godot_plane> r_dest,
  double p_a,
  double p_b,
  double p_c,
  double p_d,
);

typedef _c_godot_plane_new_with_vectors = ffi.Void Function(
  ffi.Pointer<godot_plane> r_dest,
  ffi.Pointer<godot_vector3> p_v1,
  ffi.Pointer<godot_vector3> p_v2,
  ffi.Pointer<godot_vector3> p_v3,
);

typedef _dart_godot_plane_new_with_vectors = void Function(
  ffi.Pointer<godot_plane> r_dest,
  ffi.Pointer<godot_vector3> p_v1,
  ffi.Pointer<godot_vector3> p_v2,
  ffi.Pointer<godot_vector3> p_v3,
);

typedef _c_godot_plane_new_with_normal = ffi.Void Function(
  ffi.Pointer<godot_plane> r_dest,
  ffi.Pointer<godot_vector3> p_normal,
  ffi.Float p_d,
);

typedef _dart_godot_plane_new_with_normal = void Function(
  ffi.Pointer<godot_plane> r_dest,
  ffi.Pointer<godot_vector3> p_normal,
  double p_d,
);

typedef _c_godot_plane_as_string = godot_string Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_as_string = godot_string Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_normalized = godot_plane Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_normalized = godot_plane Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_center = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_center = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_get_any_point = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_get_any_point = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_is_point_over = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _dart_godot_plane_is_point_over = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _c_godot_plane_distance_to = ffi.Float Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _dart_godot_plane_distance_to = double Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _c_godot_plane_has_point = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
  ffi.Float p_epsilon,
);

typedef _dart_godot_plane_has_point = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
  double p_epsilon,
);

typedef _c_godot_plane_project = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _dart_godot_plane_project = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _c_godot_plane_intersect_3 = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_plane> p_b,
  ffi.Pointer<godot_plane> p_c,
);

typedef _dart_godot_plane_intersect_3 = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_plane> p_b,
  ffi.Pointer<godot_plane> p_c,
);

typedef _c_godot_plane_intersects_ray = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_vector3> p_from,
  ffi.Pointer<godot_vector3> p_dir,
);

typedef _dart_godot_plane_intersects_ray = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_vector3> p_from,
  ffi.Pointer<godot_vector3> p_dir,
);

typedef _c_godot_plane_intersects_segment = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_vector3> p_begin,
  ffi.Pointer<godot_vector3> p_end,
);

typedef _dart_godot_plane_intersects_segment = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> r_dest,
  ffi.Pointer<godot_vector3> p_begin,
  ffi.Pointer<godot_vector3> p_end,
);

typedef _c_godot_plane_operator_neg = godot_plane Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_operator_neg = godot_plane Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_plane> p_b,
);

typedef _dart_godot_plane_operator_equal = int Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_plane> p_b,
);

typedef _c_godot_plane_set_normal = ffi.Void Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_normal,
);

typedef _dart_godot_plane_set_normal = void Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Pointer<godot_vector3> p_normal,
);

typedef _c_godot_plane_get_normal = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_get_normal = godot_vector3 Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_get_d = ffi.Float Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _dart_godot_plane_get_d = double Function(
  ffi.Pointer<godot_plane> p_self,
);

typedef _c_godot_plane_set_d = ffi.Void Function(
  ffi.Pointer<godot_plane> p_self,
  ffi.Float p_d,
);

typedef _dart_godot_plane_set_d = void Function(
  ffi.Pointer<godot_plane> p_self,
  double p_d,
);

typedef _c_godot_aabb_new = ffi.Void Function(
  ffi.Pointer<godot_aabb> r_dest,
  ffi.Pointer<godot_vector3> p_pos,
  ffi.Pointer<godot_vector3> p_size,
);

typedef _dart_godot_aabb_new = void Function(
  ffi.Pointer<godot_aabb> r_dest,
  ffi.Pointer<godot_vector3> p_pos,
  ffi.Pointer<godot_vector3> p_size,
);

typedef _c_godot_aabb_get_position = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_position = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_set_position = ffi.Void Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_aabb_set_position = void Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_aabb_get_size = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_size = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_set_size = ffi.Void Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_aabb_set_size = void Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_aabb_as_string = godot_string Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_as_string = godot_string Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_area = ffi.Float Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_area = double Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_has_no_area = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_has_no_area = int Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_has_no_surface = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_has_no_surface = int Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_intersects = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _dart_godot_aabb_intersects = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _c_godot_aabb_encloses = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _dart_godot_aabb_encloses = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _c_godot_aabb_merge = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _dart_godot_aabb_merge = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _c_godot_aabb_intersection = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _dart_godot_aabb_intersection = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_with,
);

typedef _c_godot_aabb_intersects_plane = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_plane> p_plane,
);

typedef _dart_godot_aabb_intersects_plane = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_plane> p_plane,
);

typedef _c_godot_aabb_intersects_segment = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_from,
  ffi.Pointer<godot_vector3> p_to,
);

typedef _dart_godot_aabb_intersects_segment = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_from,
  ffi.Pointer<godot_vector3> p_to,
);

typedef _c_godot_aabb_has_point = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _dart_godot_aabb_has_point = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_point,
);

typedef _c_godot_aabb_get_support = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_dir,
);

typedef _dart_godot_aabb_get_support = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_dir,
);

typedef _c_godot_aabb_get_longest_axis = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_longest_axis = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_longest_axis_index = ffi.Int32 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_longest_axis_index = int Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_longest_axis_size = ffi.Float Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_longest_axis_size = double Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_shortest_axis = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_shortest_axis = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_shortest_axis_index = ffi.Int32 Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_shortest_axis_index = int Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_get_shortest_axis_size = ffi.Float Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _dart_godot_aabb_get_shortest_axis_size = double Function(
  ffi.Pointer<godot_aabb> p_self,
);

typedef _c_godot_aabb_expand = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_to_point,
);

typedef _dart_godot_aabb_expand = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_vector3> p_to_point,
);

typedef _c_godot_aabb_grow = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Float p_by,
);

typedef _dart_godot_aabb_grow = godot_aabb Function(
  ffi.Pointer<godot_aabb> p_self,
  double p_by,
);

typedef _c_godot_aabb_get_endpoint = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_aabb_get_endpoint = godot_vector3 Function(
  ffi.Pointer<godot_aabb> p_self,
  int p_idx,
);

typedef _c_godot_aabb_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_b,
);

typedef _dart_godot_aabb_operator_equal = int Function(
  ffi.Pointer<godot_aabb> p_self,
  ffi.Pointer<godot_aabb> p_b,
);

typedef _c_godot_dictionary_new = ffi.Void Function(
  ffi.Pointer<godot_dictionary> r_dest,
);

typedef _dart_godot_dictionary_new = void Function(
  ffi.Pointer<godot_dictionary> r_dest,
);

typedef _c_godot_dictionary_new_copy = ffi.Void Function(
  ffi.Pointer<godot_dictionary> r_dest,
  ffi.Pointer<godot_dictionary> p_src,
);

typedef _dart_godot_dictionary_new_copy = void Function(
  ffi.Pointer<godot_dictionary> r_dest,
  ffi.Pointer<godot_dictionary> p_src,
);

typedef _c_godot_dictionary_destroy = ffi.Void Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_destroy = void Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_duplicate = godot_dictionary Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Uint8 p_deep,
);

typedef _dart_godot_dictionary_duplicate = godot_dictionary Function(
  ffi.Pointer<godot_dictionary> p_self,
  int p_deep,
);

typedef _c_godot_dictionary_size = ffi.Int32 Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_size = int Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_empty = int Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_clear = ffi.Void Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_clear = void Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_has = ffi.Uint8 Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_has = int Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_has_all = ffi.Uint8 Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_array> p_keys,
);

typedef _dart_godot_dictionary_has_all = int Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_array> p_keys,
);

typedef _c_godot_dictionary_erase = ffi.Void Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_erase = void Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_hash = ffi.Int32 Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_hash = int Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_keys = godot_array Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_keys = godot_array Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_values = godot_array Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_values = godot_array Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_get = godot_variant Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_get = godot_variant Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_set = ffi.Void Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_dictionary_set = void Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_dictionary_operator_index = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_operator_index = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_operator_index_const = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_operator_index_const = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_next = ffi.Pointer<godot_variant> Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_next = ffi.Pointer<godot_variant> Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_dictionary> p_b,
);

typedef _dart_godot_dictionary_operator_equal = int Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_dictionary> p_b,
);

typedef _c_godot_dictionary_to_json = godot_string Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _dart_godot_dictionary_to_json = godot_string Function(
  ffi.Pointer<godot_dictionary> p_self,
);

typedef _c_godot_dictionary_erase_with_return = ffi.Uint8 Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _dart_godot_dictionary_erase_with_return = int Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
);

typedef _c_godot_dictionary_get_with_default = godot_variant Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
  ffi.Pointer<godot_variant> p_default,
);

typedef _dart_godot_dictionary_get_with_default = godot_variant Function(
  ffi.Pointer<godot_dictionary> p_self,
  ffi.Pointer<godot_variant> p_key,
  ffi.Pointer<godot_variant> p_default,
);

typedef _c_godot_node_path_new = ffi.Void Function(
  ffi.Pointer<godot_node_path> r_dest,
  ffi.Pointer<godot_string> p_from,
);

typedef _dart_godot_node_path_new = void Function(
  ffi.Pointer<godot_node_path> r_dest,
  ffi.Pointer<godot_string> p_from,
);

typedef _c_godot_node_path_new_copy = ffi.Void Function(
  ffi.Pointer<godot_node_path> r_dest,
  ffi.Pointer<godot_node_path> p_src,
);

typedef _dart_godot_node_path_new_copy = void Function(
  ffi.Pointer<godot_node_path> r_dest,
  ffi.Pointer<godot_node_path> p_src,
);

typedef _c_godot_node_path_destroy = ffi.Void Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_destroy = void Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_as_string = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_as_string = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_is_absolute = ffi.Uint8 Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_is_absolute = int Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_get_name_count = ffi.Int32 Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_get_name_count = int Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_get_name = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_node_path_get_name = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
  int p_idx,
);

typedef _c_godot_node_path_get_subname_count = ffi.Int32 Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_get_subname_count = int Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_get_subname = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_node_path_get_subname = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
  int p_idx,
);

typedef _c_godot_node_path_get_concatenated_subnames = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_get_concatenated_subnames = godot_string Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_is_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_is_empty = int Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_node_path_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_node_path> p_self,
  ffi.Pointer<godot_node_path> p_b,
);

typedef _dart_godot_node_path_operator_equal = int Function(
  ffi.Pointer<godot_node_path> p_self,
  ffi.Pointer<godot_node_path> p_b,
);

typedef _c_godot_node_path_get_as_property_path = godot_node_path Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _dart_godot_node_path_get_as_property_path = godot_node_path Function(
  ffi.Pointer<godot_node_path> p_self,
);

typedef _c_godot_rect2_new_with_position_and_size = ffi.Void Function(
  ffi.Pointer<godot_rect2> r_dest,
  ffi.Pointer<godot_vector2> p_pos,
  ffi.Pointer<godot_vector2> p_size,
);

typedef _dart_godot_rect2_new_with_position_and_size = void Function(
  ffi.Pointer<godot_rect2> r_dest,
  ffi.Pointer<godot_vector2> p_pos,
  ffi.Pointer<godot_vector2> p_size,
);

typedef _c_godot_rect2_new = ffi.Void Function(
  ffi.Pointer<godot_rect2> r_dest,
  ffi.Float p_x,
  ffi.Float p_y,
  ffi.Float p_width,
  ffi.Float p_height,
);

typedef _dart_godot_rect2_new = void Function(
  ffi.Pointer<godot_rect2> r_dest,
  double p_x,
  double p_y,
  double p_width,
  double p_height,
);

typedef _c_godot_rect2_as_string = godot_string Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_as_string = godot_string Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_get_area = ffi.Float Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_get_area = double Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_intersects = ffi.Uint8 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _dart_godot_rect2_intersects = int Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _c_godot_rect2_encloses = ffi.Uint8 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _dart_godot_rect2_encloses = int Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _c_godot_rect2_has_no_area = ffi.Uint8 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_has_no_area = int Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_clip = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _dart_godot_rect2_clip = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _c_godot_rect2_merge = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _dart_godot_rect2_merge = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _c_godot_rect2_has_point = ffi.Uint8 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_point,
);

typedef _dart_godot_rect2_has_point = int Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_point,
);

typedef _c_godot_rect2_grow = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Float p_by,
);

typedef _dart_godot_rect2_grow = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  double p_by,
);

typedef _c_godot_rect2_grow_individual = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Float p_left,
  ffi.Float p_top,
  ffi.Float p_right,
  ffi.Float p_bottom,
);

typedef _dart_godot_rect2_grow_individual = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  double p_left,
  double p_top,
  double p_right,
  double p_bottom,
);

typedef _c_godot_rect2_grow_margin = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Int32 p_margin,
  ffi.Float p_by,
);

typedef _dart_godot_rect2_grow_margin = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  int p_margin,
  double p_by,
);

typedef _c_godot_rect2_abs = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_abs = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_expand = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _dart_godot_rect2_expand = godot_rect2 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_to,
);

typedef _c_godot_rect2_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _dart_godot_rect2_operator_equal = int Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_rect2> p_b,
);

typedef _c_godot_rect2_get_position = godot_vector2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_get_position = godot_vector2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_get_size = godot_vector2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _dart_godot_rect2_get_size = godot_vector2 Function(
  ffi.Pointer<godot_rect2> p_self,
);

typedef _c_godot_rect2_set_position = ffi.Void Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_pos,
);

typedef _dart_godot_rect2_set_position = void Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_pos,
);

typedef _c_godot_rect2_set_size = ffi.Void Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_size,
);

typedef _dart_godot_rect2_set_size = void Function(
  ffi.Pointer<godot_rect2> p_self,
  ffi.Pointer<godot_vector2> p_size,
);

typedef _c_godot_rid_new = ffi.Void Function(
  ffi.Pointer<godot_rid> r_dest,
);

typedef _dart_godot_rid_new = void Function(
  ffi.Pointer<godot_rid> r_dest,
);

typedef _c_godot_rid_get_id = ffi.Int32 Function(
  ffi.Pointer<godot_rid> p_self,
);

typedef _dart_godot_rid_get_id = int Function(
  ffi.Pointer<godot_rid> p_self,
);

typedef _c_godot_rid_new_with_resource = ffi.Void Function(
  ffi.Pointer<godot_rid> r_dest,
  ffi.Pointer<ffi.Void> p_from,
);

typedef _dart_godot_rid_new_with_resource = void Function(
  ffi.Pointer<godot_rid> r_dest,
  ffi.Pointer<ffi.Void> p_from,
);

typedef _c_godot_rid_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_rid> p_self,
  ffi.Pointer<godot_rid> p_b,
);

typedef _dart_godot_rid_operator_equal = int Function(
  ffi.Pointer<godot_rid> p_self,
  ffi.Pointer<godot_rid> p_b,
);

typedef _c_godot_rid_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_rid> p_self,
  ffi.Pointer<godot_rid> p_b,
);

typedef _dart_godot_rid_operator_less = int Function(
  ffi.Pointer<godot_rid> p_self,
  ffi.Pointer<godot_rid> p_b,
);

typedef _c_godot_transform_new_with_axis_origin = ffi.Void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_vector3> p_x_axis,
  ffi.Pointer<godot_vector3> p_y_axis,
  ffi.Pointer<godot_vector3> p_z_axis,
  ffi.Pointer<godot_vector3> p_origin,
);

typedef _dart_godot_transform_new_with_axis_origin = void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_vector3> p_x_axis,
  ffi.Pointer<godot_vector3> p_y_axis,
  ffi.Pointer<godot_vector3> p_z_axis,
  ffi.Pointer<godot_vector3> p_origin,
);

typedef _c_godot_transform_new = ffi.Void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_basis> p_basis,
  ffi.Pointer<godot_vector3> p_origin,
);

typedef _dart_godot_transform_new = void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_basis> p_basis,
  ffi.Pointer<godot_vector3> p_origin,
);

typedef _c_godot_transform_new_with_quat = ffi.Void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _dart_godot_transform_new_with_quat = void Function(
  ffi.Pointer<godot_transform> r_dest,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _c_godot_transform_get_basis = godot_basis Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_get_basis = godot_basis Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_set_basis = ffi.Void Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_basis> p_v,
);

typedef _dart_godot_transform_set_basis = void Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_basis> p_v,
);

typedef _c_godot_transform_get_origin = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_get_origin = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_set_origin = ffi.Void Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_transform_set_origin = void Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_transform_as_string = godot_string Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_as_string = godot_string Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_inverse = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_inverse = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_affine_inverse = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_affine_inverse = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_orthonormalized = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _dart_godot_transform_orthonormalized = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
);

typedef _c_godot_transform_rotated = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  ffi.Float p_phi,
);

typedef _dart_godot_transform_rotated = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_axis,
  double p_phi,
);

typedef _c_godot_transform_scaled = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _dart_godot_transform_scaled = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_scale,
);

typedef _c_godot_transform_translated = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_ofs,
);

typedef _dart_godot_transform_translated = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_ofs,
);

typedef _c_godot_transform_looking_at = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_target,
  ffi.Pointer<godot_vector3> p_up,
);

typedef _dart_godot_transform_looking_at = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_target,
  ffi.Pointer<godot_vector3> p_up,
);

typedef _c_godot_transform_xform_plane = godot_plane Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_plane> p_v,
);

typedef _dart_godot_transform_xform_plane = godot_plane Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_plane> p_v,
);

typedef _c_godot_transform_xform_inv_plane = godot_plane Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_plane> p_v,
);

typedef _dart_godot_transform_xform_inv_plane = godot_plane Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_plane> p_v,
);

typedef _c_godot_transform_new_identity = ffi.Void Function(
  ffi.Pointer<godot_transform> r_dest,
);

typedef _dart_godot_transform_new_identity = void Function(
  ffi.Pointer<godot_transform> r_dest,
);

typedef _c_godot_transform_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_transform> p_b,
);

typedef _dart_godot_transform_operator_equal = int Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_transform> p_b,
);

typedef _c_godot_transform_operator_multiply = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_transform> p_b,
);

typedef _dart_godot_transform_operator_multiply = godot_transform Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_transform> p_b,
);

typedef _c_godot_transform_xform_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_transform_xform_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_transform_xform_inv_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _dart_godot_transform_xform_inv_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_vector3> p_v,
);

typedef _c_godot_transform_xform_aabb = godot_aabb Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_aabb> p_v,
);

typedef _dart_godot_transform_xform_aabb = godot_aabb Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_aabb> p_v,
);

typedef _c_godot_transform_xform_inv_aabb = godot_aabb Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_aabb> p_v,
);

typedef _dart_godot_transform_xform_inv_aabb = godot_aabb Function(
  ffi.Pointer<godot_transform> p_self,
  ffi.Pointer<godot_aabb> p_v,
);

typedef _c_godot_transform2d_new = ffi.Void Function(
  ffi.Pointer<godot_transform2d> r_dest,
  ffi.Float p_rot,
  ffi.Pointer<godot_vector2> p_pos,
);

typedef _dart_godot_transform2d_new = void Function(
  ffi.Pointer<godot_transform2d> r_dest,
  double p_rot,
  ffi.Pointer<godot_vector2> p_pos,
);

typedef _c_godot_transform2d_new_axis_origin = ffi.Void Function(
  ffi.Pointer<godot_transform2d> r_dest,
  ffi.Pointer<godot_vector2> p_x_axis,
  ffi.Pointer<godot_vector2> p_y_axis,
  ffi.Pointer<godot_vector2> p_origin,
);

typedef _dart_godot_transform2d_new_axis_origin = void Function(
  ffi.Pointer<godot_transform2d> r_dest,
  ffi.Pointer<godot_vector2> p_x_axis,
  ffi.Pointer<godot_vector2> p_y_axis,
  ffi.Pointer<godot_vector2> p_origin,
);

typedef _c_godot_transform2d_as_string = godot_string Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_as_string = godot_string Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_inverse = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_inverse = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_affine_inverse = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_affine_inverse = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_get_rotation = ffi.Float Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_get_rotation = double Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_get_origin = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_get_origin = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_get_scale = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_get_scale = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_orthonormalized = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _dart_godot_transform2d_orthonormalized = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
);

typedef _c_godot_transform2d_rotated = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Float p_phi,
);

typedef _dart_godot_transform2d_rotated = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  double p_phi,
);

typedef _c_godot_transform2d_scaled = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_scale,
);

typedef _dart_godot_transform2d_scaled = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_scale,
);

typedef _c_godot_transform2d_translated = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_offset,
);

typedef _dart_godot_transform2d_translated = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_offset,
);

typedef _c_godot_transform2d_xform_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _dart_godot_transform2d_xform_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _c_godot_transform2d_xform_inv_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _dart_godot_transform2d_xform_inv_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _c_godot_transform2d_basis_xform_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _dart_godot_transform2d_basis_xform_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _c_godot_transform2d_basis_xform_inv_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _dart_godot_transform2d_basis_xform_inv_vector2 = godot_vector2
    Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_vector2> p_v,
);

typedef _c_godot_transform2d_interpolate_with = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_m,
  ffi.Float p_c,
);

typedef _dart_godot_transform2d_interpolate_with = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_m,
  double p_c,
);

typedef _c_godot_transform2d_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_b,
);

typedef _dart_godot_transform2d_operator_equal = int Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_b,
);

typedef _c_godot_transform2d_operator_multiply = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_b,
);

typedef _dart_godot_transform2d_operator_multiply = godot_transform2d Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_transform2d> p_b,
);

typedef _c_godot_transform2d_new_identity = ffi.Void Function(
  ffi.Pointer<godot_transform2d> r_dest,
);

typedef _dart_godot_transform2d_new_identity = void Function(
  ffi.Pointer<godot_transform2d> r_dest,
);

typedef _c_godot_transform2d_xform_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_rect2> p_v,
);

typedef _dart_godot_transform2d_xform_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_rect2> p_v,
);

typedef _c_godot_transform2d_xform_inv_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_rect2> p_v,
);

typedef _dart_godot_transform2d_xform_inv_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_transform2d> p_self,
  ffi.Pointer<godot_rect2> p_v,
);

typedef _c_godot_variant_get_type = ffi.Int32 Function(
  ffi.Pointer<godot_variant> p_v,
);

typedef _dart_godot_variant_get_type = int Function(
  ffi.Pointer<godot_variant> p_v,
);

typedef _c_godot_variant_new_copy = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_variant> p_src,
);

typedef _dart_godot_variant_new_copy = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_variant> p_src,
);

typedef _c_godot_variant_new_nil = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
);

typedef _dart_godot_variant_new_nil = void Function(
  ffi.Pointer<godot_variant> r_dest,
);

typedef _c_godot_variant_new_bool = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Uint8 p_b,
);

typedef _dart_godot_variant_new_bool = void Function(
  ffi.Pointer<godot_variant> r_dest,
  int p_b,
);

typedef _c_godot_variant_new_uint = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Uint64 p_i,
);

typedef _dart_godot_variant_new_uint = void Function(
  ffi.Pointer<godot_variant> r_dest,
  int p_i,
);

typedef _c_godot_variant_new_int = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Int64 p_i,
);

typedef _dart_godot_variant_new_int = void Function(
  ffi.Pointer<godot_variant> r_dest,
  int p_i,
);

typedef _c_godot_variant_new_real = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Double p_r,
);

typedef _dart_godot_variant_new_real = void Function(
  ffi.Pointer<godot_variant> r_dest,
  double p_r,
);

typedef _c_godot_variant_new_string = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_string> p_s,
);

typedef _dart_godot_variant_new_string = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_string> p_s,
);

typedef _c_godot_variant_new_vector2 = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_vector2> p_v2,
);

typedef _dart_godot_variant_new_vector2 = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_vector2> p_v2,
);

typedef _c_godot_variant_new_rect2 = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_rect2> p_rect2,
);

typedef _dart_godot_variant_new_rect2 = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_rect2> p_rect2,
);

typedef _c_godot_variant_new_vector3 = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_vector3> p_v3,
);

typedef _dart_godot_variant_new_vector3 = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_vector3> p_v3,
);

typedef _c_godot_variant_new_transform2d = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_transform2d> p_t2d,
);

typedef _dart_godot_variant_new_transform2d = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_transform2d> p_t2d,
);

typedef _c_godot_variant_new_plane = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_plane> p_plane,
);

typedef _dart_godot_variant_new_plane = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_plane> p_plane,
);

typedef _c_godot_variant_new_quat = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _dart_godot_variant_new_quat = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_quat> p_quat,
);

typedef _c_godot_variant_new_aabb = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_aabb> p_aabb,
);

typedef _dart_godot_variant_new_aabb = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_aabb> p_aabb,
);

typedef _c_godot_variant_new_basis = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_basis> p_basis,
);

typedef _dart_godot_variant_new_basis = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_basis> p_basis,
);

typedef _c_godot_variant_new_transform = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_transform> p_trans,
);

typedef _dart_godot_variant_new_transform = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_transform> p_trans,
);

typedef _c_godot_variant_new_color = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_color> p_color,
);

typedef _dart_godot_variant_new_color = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_color> p_color,
);

typedef _c_godot_variant_new_node_path = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_node_path> p_np,
);

typedef _dart_godot_variant_new_node_path = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_node_path> p_np,
);

typedef _c_godot_variant_new_rid = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_rid> p_rid,
);

typedef _dart_godot_variant_new_rid = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_rid> p_rid,
);

typedef _c_godot_variant_new_object = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<ffi.Void> p_obj,
);

typedef _dart_godot_variant_new_object = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<ffi.Void> p_obj,
);

typedef _c_godot_variant_new_dictionary = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_dictionary> p_dict,
);

typedef _dart_godot_variant_new_dictionary = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_dictionary> p_dict,
);

typedef _c_godot_variant_new_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_array> p_arr,
);

typedef _dart_godot_variant_new_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_array> p_arr,
);

typedef _c_godot_variant_new_pool_byte_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_pba,
);

typedef _dart_godot_variant_new_pool_byte_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_pba,
);

typedef _c_godot_variant_new_pool_int_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_int_array> p_pia,
);

typedef _dart_godot_variant_new_pool_int_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_int_array> p_pia,
);

typedef _c_godot_variant_new_pool_real_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_real_array> p_pra,
);

typedef _dart_godot_variant_new_pool_real_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_real_array> p_pra,
);

typedef _c_godot_variant_new_pool_string_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_string_array> p_psa,
);

typedef _dart_godot_variant_new_pool_string_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_string_array> p_psa,
);

typedef _c_godot_variant_new_pool_vector2_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_pv2a,
);

typedef _dart_godot_variant_new_pool_vector2_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_pv2a,
);

typedef _c_godot_variant_new_pool_vector3_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_pv3a,
);

typedef _dart_godot_variant_new_pool_vector3_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_pv3a,
);

typedef _c_godot_variant_new_pool_color_array = ffi.Void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_color_array> p_pca,
);

typedef _dart_godot_variant_new_pool_color_array = void Function(
  ffi.Pointer<godot_variant> r_dest,
  ffi.Pointer<godot_pool_color_array> p_pca,
);

typedef _c_godot_variant_as_bool = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_bool = int Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_uint = ffi.Uint64 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_uint = int Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_int = ffi.Int64 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_int = int Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_real = ffi.Double Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_real = double Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_string = godot_string Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_string = godot_string Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_vector2 = godot_vector2 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_rect2 = godot_rect2 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_vector3 = godot_vector3 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_transform2d = godot_transform2d Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_transform2d = godot_transform2d Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_plane = godot_plane Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_plane = godot_plane Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_quat = godot_quat Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_quat = godot_quat Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_aabb = godot_aabb Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_aabb = godot_aabb Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_basis = godot_basis Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_basis = godot_basis Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_transform = godot_transform Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_transform = godot_transform Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_color = godot_color Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_color = godot_color Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_node_path = godot_node_path Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_node_path = godot_node_path Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_rid = godot_rid Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_rid = godot_rid Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_object = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_object = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_dictionary = godot_dictionary Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_dictionary = godot_dictionary Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_array = godot_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_array = godot_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_byte_array = godot_pool_byte_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_byte_array = godot_pool_byte_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_int_array = godot_pool_int_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_int_array = godot_pool_int_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_real_array = godot_pool_real_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_real_array = godot_pool_real_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_string_array = godot_pool_string_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_string_array = godot_pool_string_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_vector2_array = godot_pool_vector2_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_vector2_array = godot_pool_vector2_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_vector3_array = godot_pool_vector3_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_vector3_array = godot_pool_vector3_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_as_pool_color_array = godot_pool_color_array Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_as_pool_color_array = godot_pool_color_array
    Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_call = godot_variant Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_string> p_method,
  ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
  ffi.Int32 p_argcount,
  ffi.Pointer<godot_variant_call_error> r_error,
);

typedef _dart_godot_variant_call = godot_variant Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_string> p_method,
  ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
  int p_argcount,
  ffi.Pointer<godot_variant_call_error> r_error,
);

typedef _c_godot_variant_has_method = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_string> p_method,
);

typedef _dart_godot_variant_has_method = int Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_string> p_method,
);

typedef _c_godot_variant_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _dart_godot_variant_operator_equal = int Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _c_godot_variant_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _dart_godot_variant_operator_less = int Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _c_godot_variant_hash_compare = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _dart_godot_variant_hash_compare = int Function(
  ffi.Pointer<godot_variant> p_self,
  ffi.Pointer<godot_variant> p_other,
);

typedef _c_godot_variant_booleanize = ffi.Uint8 Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_booleanize = int Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_destroy = ffi.Void Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _dart_godot_variant_destroy = void Function(
  ffi.Pointer<godot_variant> p_self,
);

typedef _c_godot_variant_get_operator_name = godot_string Function(
  ffi.Int32 p_op,
);

typedef _dart_godot_variant_get_operator_name = godot_string Function(
  int p_op,
);

typedef _c_godot_variant_evaluate = ffi.Void Function(
  ffi.Int32 p_op,
  ffi.Pointer<godot_variant> p_a,
  ffi.Pointer<godot_variant> p_b,
  ffi.Pointer<godot_variant> r_ret,
  ffi.Pointer<ffi.Uint8> r_valid,
);

typedef _dart_godot_variant_evaluate = void Function(
  int p_op,
  ffi.Pointer<godot_variant> p_a,
  ffi.Pointer<godot_variant> p_b,
  ffi.Pointer<godot_variant> r_ret,
  ffi.Pointer<ffi.Uint8> r_valid,
);

typedef _c_godot_array_new = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
);

typedef _dart_godot_array_new = void Function(
  ffi.Pointer<godot_array> r_dest,
);

typedef _c_godot_array_new_copy = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_array> p_src,
);

typedef _dart_godot_array_new_copy = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_array> p_src,
);

typedef _c_godot_array_new_pool_color_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_color_array> p_pca,
);

typedef _dart_godot_array_new_pool_color_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_color_array> p_pca,
);

typedef _c_godot_array_new_pool_vector3_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_pv3a,
);

typedef _dart_godot_array_new_pool_vector3_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_vector3_array> p_pv3a,
);

typedef _c_godot_array_new_pool_vector2_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_pv2a,
);

typedef _dart_godot_array_new_pool_vector2_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_vector2_array> p_pv2a,
);

typedef _c_godot_array_new_pool_string_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_string_array> p_psa,
);

typedef _dart_godot_array_new_pool_string_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_string_array> p_psa,
);

typedef _c_godot_array_new_pool_real_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_real_array> p_pra,
);

typedef _dart_godot_array_new_pool_real_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_real_array> p_pra,
);

typedef _c_godot_array_new_pool_int_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_int_array> p_pia,
);

typedef _dart_godot_array_new_pool_int_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_int_array> p_pia,
);

typedef _c_godot_array_new_pool_byte_array = ffi.Void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_pba,
);

typedef _dart_godot_array_new_pool_byte_array = void Function(
  ffi.Pointer<godot_array> r_dest,
  ffi.Pointer<godot_pool_byte_array> p_pba,
);

typedef _c_godot_array_set = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_idx,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_set = void Function(
  ffi.Pointer<godot_array> p_self,
  int p_idx,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_get = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_array_get = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
  int p_idx,
);

typedef _c_godot_array_operator_index = ffi.Pointer<godot_variant> Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_array_operator_index = ffi.Pointer<godot_variant> Function(
  ffi.Pointer<godot_array> p_self,
  int p_idx,
);

typedef _c_godot_array_operator_index_const = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_array_operator_index_const = ffi.Pointer<godot_variant>
    Function(
  ffi.Pointer<godot_array> p_self,
  int p_idx,
);

typedef _c_godot_array_append = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_append = void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_clear = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_clear = void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_count = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_count = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_empty = int Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_erase = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_erase = void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_front = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_front = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_back = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_back = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_find = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_array_find = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
  int p_from,
);

typedef _c_godot_array_find_last = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
);

typedef _dart_godot_array_find_last = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
);

typedef _c_godot_array_has = ffi.Uint8 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_has = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_hash = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_hash = int Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_insert = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_pos,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_insert = void Function(
  ffi.Pointer<godot_array> p_self,
  int p_pos,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_invert = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_invert = void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_pop_back = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_pop_back = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_pop_front = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_pop_front = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_push_back = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_push_back = void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_push_front = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _dart_godot_array_push_front = void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
);

typedef _c_godot_array_remove = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_array_remove = void Function(
  ffi.Pointer<godot_array> p_self,
  int p_idx,
);

typedef _c_godot_array_resize = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_size,
);

typedef _dart_godot_array_resize = void Function(
  ffi.Pointer<godot_array> p_self,
  int p_size,
);

typedef _c_godot_array_rfind = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_array_rfind = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_what,
  int p_from,
);

typedef _c_godot_array_size = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_size = int Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_sort = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_sort = void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_sort_custom = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<ffi.Void> p_obj,
  ffi.Pointer<godot_string> p_func,
);

typedef _dart_godot_array_sort_custom = void Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<ffi.Void> p_obj,
  ffi.Pointer<godot_string> p_func,
);

typedef _c_godot_array_bsearch = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
  ffi.Uint8 p_before,
);

typedef _dart_godot_array_bsearch = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
  int p_before,
);

typedef _c_godot_array_bsearch_custom = ffi.Int32 Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
  ffi.Pointer<ffi.Void> p_obj,
  ffi.Pointer<godot_string> p_func,
  ffi.Uint8 p_before,
);

typedef _dart_godot_array_bsearch_custom = int Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Pointer<godot_variant> p_value,
  ffi.Pointer<ffi.Void> p_obj,
  ffi.Pointer<godot_string> p_func,
  int p_before,
);

typedef _c_godot_array_destroy = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_destroy = void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_duplicate = godot_array Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Uint8 p_deep,
);

typedef _dart_godot_array_duplicate = godot_array Function(
  ffi.Pointer<godot_array> p_self,
  int p_deep,
);

typedef _c_godot_array_slice = godot_array Function(
  ffi.Pointer<godot_array> p_self,
  ffi.Int32 p_begin,
  ffi.Int32 p_end,
  ffi.Int32 p_step,
  ffi.Uint8 p_deep,
);

typedef _dart_godot_array_slice = godot_array Function(
  ffi.Pointer<godot_array> p_self,
  int p_begin,
  int p_end,
  int p_step,
  int p_deep,
);

typedef _c_godot_array_max = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_max = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_min = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_min = godot_variant Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_array_shuffle = ffi.Void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _dart_godot_array_shuffle = void Function(
  ffi.Pointer<godot_array> p_self,
);

typedef _c_godot_char_string_length = ffi.Int32 Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _dart_godot_char_string_length = int Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _c_godot_char_string_get_data = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _dart_godot_char_string_get_data = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _c_godot_char_string_destroy = ffi.Void Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _dart_godot_char_string_destroy = void Function(
  ffi.Pointer<godot_char_string> p_cs,
);

typedef _c_godot_string_new = ffi.Void Function(
  ffi.Pointer<godot_string> r_dest,
);

typedef _dart_godot_string_new = void Function(
  ffi.Pointer<godot_string> r_dest,
);

typedef _c_godot_string_new_copy = ffi.Void Function(
  ffi.Pointer<godot_string> r_dest,
  ffi.Pointer<godot_string> p_src,
);

typedef _dart_godot_string_new_copy = void Function(
  ffi.Pointer<godot_string> r_dest,
  ffi.Pointer<godot_string> p_src,
);

typedef _c_godot_string_new_with_wide_string = ffi.Void Function(
  ffi.Pointer<godot_string> r_dest,
  ffi.Pointer<ffi.Int32> p_contents,
  ffi.Int32 p_size,
);

typedef _dart_godot_string_new_with_wide_string = void Function(
  ffi.Pointer<godot_string> r_dest,
  ffi.Pointer<ffi.Int32> p_contents,
  int p_size,
);

typedef _c_godot_string_operator_index = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_string_operator_index = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<godot_string> p_self,
  int p_idx,
);

typedef _c_godot_string_operator_index_const = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_string_operator_index_const = int Function(
  ffi.Pointer<godot_string> p_self,
  int p_idx,
);

typedef _c_godot_string_wide_str = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_wide_str = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _dart_godot_string_operator_equal = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _c_godot_string_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _dart_godot_string_operator_less = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _c_godot_string_operator_plus = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _dart_godot_string_operator_plus = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_b,
);

typedef _c_godot_string_length = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_length = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_casecmp_to = ffi.Int8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _dart_godot_string_casecmp_to = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _c_godot_string_nocasecmp_to = ffi.Int8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _dart_godot_string_nocasecmp_to = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _c_godot_string_naturalnocasecmp_to = ffi.Int8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _dart_godot_string_naturalnocasecmp_to = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_str,
);

typedef _c_godot_string_begins_with = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _dart_godot_string_begins_with = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _c_godot_string_begins_with_char_array = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_char_array,
);

typedef _dart_godot_string_begins_with_char_array = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_char_array,
);

typedef _c_godot_string_bigrams = godot_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_bigrams = godot_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_chr = godot_string Function(
  ffi.Int32 p_character,
);

typedef _dart_godot_string_chr = godot_string Function(
  int p_character,
);

typedef _c_godot_string_ends_with = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _dart_godot_string_ends_with = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _c_godot_string_count = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
  ffi.Int32 p_to,
);

typedef _dart_godot_string_count = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
  int p_to,
);

typedef _c_godot_string_countn = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
  ffi.Int32 p_to,
);

typedef _dart_godot_string_countn = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
  int p_to,
);

typedef _c_godot_string_find = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _dart_godot_string_find = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _c_godot_string_find_from = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_string_find_from = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
);

typedef _c_godot_string_findmk = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
);

typedef _dart_godot_string_findmk = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
);

typedef _c_godot_string_findmk_from = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
  ffi.Int32 p_from,
);

typedef _dart_godot_string_findmk_from = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
  int p_from,
);

typedef _c_godot_string_findmk_from_in_place = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
  ffi.Int32 p_from,
  ffi.Pointer<ffi.Int32> r_key,
);

typedef _dart_godot_string_findmk_from_in_place = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_keys,
  int p_from,
  ffi.Pointer<ffi.Int32> r_key,
);

typedef _c_godot_string_findn = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _dart_godot_string_findn = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _c_godot_string_findn_from = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_string_findn_from = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
);

typedef _c_godot_string_find_last = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _dart_godot_string_find_last = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _c_godot_string_format = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_variant> p_values,
);

typedef _dart_godot_string_format = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_variant> p_values,
);

typedef _c_godot_string_format_with_custom_placeholder = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_variant> p_values,
  ffi.Pointer<ffi.Int8> p_placeholder,
);

typedef _dart_godot_string_format_with_custom_placeholder = godot_string
    Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_variant> p_values,
  ffi.Pointer<ffi.Int8> p_placeholder,
);

typedef _c_godot_string_hex_encode_buffer = godot_string Function(
  ffi.Pointer<ffi.Uint8> p_buffer,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_hex_encode_buffer = godot_string Function(
  ffi.Pointer<ffi.Uint8> p_buffer,
  int p_len,
);

typedef _c_godot_string_hex_to_int = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hex_to_int = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_hex_to_int_without_prefix = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hex_to_int_without_prefix = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_insert = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_at_pos,
  godot_string p_string,
);

typedef _dart_godot_string_insert = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_at_pos,
  godot_string p_string,
);

typedef _c_godot_string_is_numeric = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_numeric = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_subsequence_of = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _dart_godot_string_is_subsequence_of = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _c_godot_string_is_subsequence_ofi = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _dart_godot_string_is_subsequence_ofi = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _c_godot_string_lpad = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_min_length,
);

typedef _dart_godot_string_lpad = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_min_length,
);

typedef _c_godot_string_lpad_with_custom_character = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_min_length,
  ffi.Pointer<godot_string> p_character,
);

typedef _dart_godot_string_lpad_with_custom_character = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_min_length,
  ffi.Pointer<godot_string> p_character,
);

typedef _c_godot_string_match = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_wildcard,
);

typedef _dart_godot_string_match = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_wildcard,
);

typedef _c_godot_string_matchn = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_wildcard,
);

typedef _dart_godot_string_matchn = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_wildcard,
);

typedef _c_godot_string_md5 = godot_string Function(
  ffi.Pointer<ffi.Uint8> p_md5,
);

typedef _dart_godot_string_md5 = godot_string Function(
  ffi.Pointer<ffi.Uint8> p_md5,
);

typedef _c_godot_string_num = godot_string Function(
  ffi.Double p_num,
);

typedef _dart_godot_string_num = godot_string Function(
  double p_num,
);

typedef _c_godot_string_num_int64 = godot_string Function(
  ffi.Int64 p_num,
  ffi.Int32 p_base,
);

typedef _dart_godot_string_num_int64 = godot_string Function(
  int p_num,
  int p_base,
);

typedef _c_godot_string_num_int64_capitalized = godot_string Function(
  ffi.Int64 p_num,
  ffi.Int32 p_base,
  ffi.Uint8 p_capitalize_hex,
);

typedef _dart_godot_string_num_int64_capitalized = godot_string Function(
  int p_num,
  int p_base,
  int p_capitalize_hex,
);

typedef _c_godot_string_num_real = godot_string Function(
  ffi.Double p_num,
);

typedef _dart_godot_string_num_real = godot_string Function(
  double p_num,
);

typedef _c_godot_string_num_scientific = godot_string Function(
  ffi.Double p_num,
);

typedef _dart_godot_string_num_scientific = godot_string Function(
  double p_num,
);

typedef _c_godot_string_num_with_decimals = godot_string Function(
  ffi.Double p_num,
  ffi.Int32 p_decimals,
);

typedef _dart_godot_string_num_with_decimals = godot_string Function(
  double p_num,
  int p_decimals,
);

typedef _c_godot_string_pad_decimals = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_digits,
);

typedef _dart_godot_string_pad_decimals = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_digits,
);

typedef _c_godot_string_pad_zeros = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_digits,
);

typedef _dart_godot_string_pad_zeros = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_digits,
);

typedef _c_godot_string_replace_first = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _dart_godot_string_replace_first = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _c_godot_string_replace = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _dart_godot_string_replace = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _c_godot_string_replacen = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _dart_godot_string_replacen = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_key,
  godot_string p_with,
);

typedef _c_godot_string_rfind = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _dart_godot_string_rfind = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _c_godot_string_rfindn = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _dart_godot_string_rfindn = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
);

typedef _c_godot_string_rfind_from = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_string_rfind_from = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
);

typedef _c_godot_string_rfindn_from = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  ffi.Int32 p_from,
);

typedef _dart_godot_string_rfindn_from = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_what,
  int p_from,
);

typedef _c_godot_string_rpad = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_min_length,
);

typedef _dart_godot_string_rpad = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_min_length,
);

typedef _c_godot_string_rpad_with_custom_character = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_min_length,
  ffi.Pointer<godot_string> p_character,
);

typedef _dart_godot_string_rpad_with_custom_character = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_min_length,
  ffi.Pointer<godot_string> p_character,
);

typedef _c_godot_string_similarity = ffi.Float Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _dart_godot_string_similarity = double Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_string,
);

typedef _c_godot_string_sprintf = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_values,
  ffi.Pointer<ffi.Uint8> p_error,
);

typedef _dart_godot_string_sprintf = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_values,
  ffi.Pointer<ffi.Uint8> p_error,
);

typedef _c_godot_string_substr = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_from,
  ffi.Int32 p_chars,
);

typedef _dart_godot_string_substr = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_from,
  int p_chars,
);

typedef _c_godot_string_to_double = ffi.Double Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_double = double Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_to_float = ffi.Float Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_float = double Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_to_int = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_int = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_camelcase_to_underscore = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_camelcase_to_underscore = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_camelcase_to_underscore_lowercased = godot_string
    Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_camelcase_to_underscore_lowercased = godot_string
    Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_capitalize = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_capitalize = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_char_to_double = ffi.Double Function(
  ffi.Pointer<ffi.Int8> p_what,
);

typedef _dart_godot_string_char_to_double = double Function(
  ffi.Pointer<ffi.Int8> p_what,
);

typedef _c_godot_string_char_to_int = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> p_what,
);

typedef _dart_godot_string_char_to_int = int Function(
  ffi.Pointer<ffi.Int8> p_what,
);

typedef _c_godot_string_wchar_to_int = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> p_str,
);

typedef _dart_godot_string_wchar_to_int = int Function(
  ffi.Pointer<ffi.Int32> p_str,
);

typedef _c_godot_string_char_to_int_with_len = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> p_what,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_char_to_int_with_len = int Function(
  ffi.Pointer<ffi.Int8> p_what,
  int p_len,
);

typedef _c_godot_string_char_to_int64_with_len = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> p_str,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_char_to_int64_with_len = int Function(
  ffi.Pointer<ffi.Int32> p_str,
  int p_len,
);

typedef _c_godot_string_hex_to_int64 = ffi.Int64 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hex_to_int64 = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_hex_to_int64_with_prefix = ffi.Int64 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hex_to_int64_with_prefix = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_to_int64 = ffi.Int64 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_int64 = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_unicode_char_to_double = ffi.Double Function(
  ffi.Pointer<ffi.Int32> p_str,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> r_end,
);

typedef _dart_godot_string_unicode_char_to_double = double Function(
  ffi.Pointer<ffi.Int32> p_str,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> r_end,
);

typedef _c_godot_string_get_slice_count = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_splitter,
);

typedef _dart_godot_string_get_slice_count = int Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_splitter,
);

typedef _c_godot_string_get_slice = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_splitter,
  ffi.Int32 p_slice,
);

typedef _dart_godot_string_get_slice = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  godot_string p_splitter,
  int p_slice,
);

typedef _c_godot_string_get_slicec = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_splitter,
  ffi.Int32 p_slice,
);

typedef _dart_godot_string_get_slicec = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_splitter,
  int p_slice,
);

typedef _c_godot_string_split = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_allow_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split_allow_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_floats = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split_floats = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_floats_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split_floats_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_floats_mk = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _dart_godot_string_split_floats_mk = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _c_godot_string_split_floats_mk_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _dart_godot_string_split_floats_mk_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _c_godot_string_split_ints = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split_ints = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_ints_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _dart_godot_string_split_ints_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_splitter,
);

typedef _c_godot_string_split_ints_mk = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _dart_godot_string_split_ints_mk = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _c_godot_string_split_ints_mk_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _dart_godot_string_split_ints_mk_allows_empty = godot_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_array> p_splitters,
);

typedef _c_godot_string_split_spaces = godot_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_split_spaces = godot_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_char_lowercase = ffi.Int32 Function(
  ffi.Int32 p_char,
);

typedef _dart_godot_string_char_lowercase = int Function(
  int p_char,
);

typedef _c_godot_string_char_uppercase = ffi.Int32 Function(
  ffi.Int32 p_char,
);

typedef _dart_godot_string_char_uppercase = int Function(
  int p_char,
);

typedef _c_godot_string_to_lower = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_lower = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_to_upper = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_to_upper = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_get_basename = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_get_basename = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_get_extension = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_get_extension = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_left = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_pos,
);

typedef _dart_godot_string_left = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_pos,
);

typedef _c_godot_string_ord_at = ffi.Int32 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_idx,
);

typedef _dart_godot_string_ord_at = int Function(
  ffi.Pointer<godot_string> p_self,
  int p_idx,
);

typedef _c_godot_string_plus_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_file,
);

typedef _dart_godot_string_plus_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_file,
);

typedef _c_godot_string_right = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_pos,
);

typedef _dart_godot_string_right = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_pos,
);

typedef _c_godot_string_strip_edges = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Uint8 p_left,
  ffi.Uint8 p_right,
);

typedef _dart_godot_string_strip_edges = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_left,
  int p_right,
);

typedef _c_godot_string_strip_escapes = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_strip_escapes = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_erase = ffi.Void Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_pos,
  ffi.Int32 p_chars,
);

typedef _dart_godot_string_erase = void Function(
  ffi.Pointer<godot_string> p_self,
  int p_pos,
  int p_chars,
);

typedef _c_godot_string_ascii = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_ascii = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_ascii_extended = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_ascii_extended = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_utf8 = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_utf8 = godot_char_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_parse_utf8 = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_utf8,
);

typedef _dart_godot_string_parse_utf8 = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_utf8,
);

typedef _c_godot_string_parse_utf8_with_len = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_utf8,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_parse_utf8_with_len = int Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<ffi.Int8> p_utf8,
  int p_len,
);

typedef _c_godot_string_chars_to_utf8 = godot_string Function(
  ffi.Pointer<ffi.Int8> p_utf8,
);

typedef _dart_godot_string_chars_to_utf8 = godot_string Function(
  ffi.Pointer<ffi.Int8> p_utf8,
);

typedef _c_godot_string_chars_to_utf8_with_len = godot_string Function(
  ffi.Pointer<ffi.Int8> p_utf8,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_chars_to_utf8_with_len = godot_string Function(
  ffi.Pointer<ffi.Int8> p_utf8,
  int p_len,
);

typedef _c_godot_string_hash = ffi.Uint32 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hash = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_hash64 = ffi.Uint64 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_hash64 = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_hash_chars = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> p_cstr,
);

typedef _dart_godot_string_hash_chars = int Function(
  ffi.Pointer<ffi.Int8> p_cstr,
);

typedef _c_godot_string_hash_chars_with_len = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> p_cstr,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_hash_chars_with_len = int Function(
  ffi.Pointer<ffi.Int8> p_cstr,
  int p_len,
);

typedef _c_godot_string_hash_utf8_chars = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int32> p_str,
);

typedef _dart_godot_string_hash_utf8_chars = int Function(
  ffi.Pointer<ffi.Int32> p_str,
);

typedef _c_godot_string_hash_utf8_chars_with_len = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int32> p_str,
  ffi.Int32 p_len,
);

typedef _dart_godot_string_hash_utf8_chars_with_len = int Function(
  ffi.Pointer<ffi.Int32> p_str,
  int p_len,
);

typedef _c_godot_string_md5_buffer = godot_pool_byte_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_md5_buffer = godot_pool_byte_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_md5_text = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_md5_text = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_sha256_buffer = godot_pool_byte_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_sha256_buffer = godot_pool_byte_array Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_sha256_text = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_sha256_text = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_empty = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_empty = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_get_base_dir = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_get_base_dir = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_get_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_get_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_humanize_size = godot_string Function(
  ffi.Uint64 p_size,
);

typedef _dart_godot_string_humanize_size = godot_string Function(
  int p_size,
);

typedef _c_godot_string_is_abs_path = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_abs_path = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_rel_path = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_rel_path = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_resource_file = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_resource_file = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_path_to = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_path,
);

typedef _dart_godot_string_path_to = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_path,
);

typedef _c_godot_string_path_to_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_path,
);

typedef _dart_godot_string_path_to_file = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_path,
);

typedef _c_godot_string_simplify_path = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_simplify_path = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_c_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_c_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_c_escape_multiline = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_c_escape_multiline = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_c_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_c_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_http_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_http_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_http_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_http_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_json_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_json_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_word_wrap = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Int32 p_chars_per_line,
);

typedef _dart_godot_string_word_wrap = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  int p_chars_per_line,
);

typedef _c_godot_string_xml_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_xml_escape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_xml_escape_with_quotes = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_xml_escape_with_quotes = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_xml_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_xml_unescape = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_percent_decode = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_percent_decode = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_percent_encode = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_percent_encode = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_valid_float = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_valid_float = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_valid_hex_number = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Uint8 p_with_prefix,
);

typedef _dart_godot_string_is_valid_hex_number = int Function(
  ffi.Pointer<godot_string> p_self,
  int p_with_prefix,
);

typedef _c_godot_string_is_valid_html_color = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_valid_html_color = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_valid_identifier = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_valid_identifier = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_valid_integer = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_valid_integer = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_is_valid_ip_address = ffi.Uint8 Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_is_valid_ip_address = int Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_dedent = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_dedent = godot_string Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_trim_prefix = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_prefix,
);

typedef _dart_godot_string_trim_prefix = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_prefix,
);

typedef _c_godot_string_trim_suffix = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_suffix,
);

typedef _dart_godot_string_trim_suffix = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_suffix,
);

typedef _c_godot_string_rstrip = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_chars,
);

typedef _dart_godot_string_rstrip = godot_string Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_chars,
);

typedef _c_godot_string_rsplit = godot_pool_string_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_divisor,
  ffi.Uint8 p_allow_empty,
  ffi.Int32 p_maxsplit,
);

typedef _dart_godot_string_rsplit = godot_pool_string_array Function(
  ffi.Pointer<godot_string> p_self,
  ffi.Pointer<godot_string> p_divisor,
  int p_allow_empty,
  int p_maxsplit,
);

typedef _c_godot_string_destroy = ffi.Void Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _dart_godot_string_destroy = void Function(
  ffi.Pointer<godot_string> p_self,
);

typedef _c_godot_string_name_new = ffi.Void Function(
  ffi.Pointer<godot_string_name> r_dest,
  ffi.Pointer<godot_string> p_name,
);

typedef _dart_godot_string_name_new = void Function(
  ffi.Pointer<godot_string_name> r_dest,
  ffi.Pointer<godot_string> p_name,
);

typedef _c_godot_string_name_new_data = ffi.Void Function(
  ffi.Pointer<godot_string_name> r_dest,
  ffi.Pointer<ffi.Int8> p_name,
);

typedef _dart_godot_string_name_new_data = void Function(
  ffi.Pointer<godot_string_name> r_dest,
  ffi.Pointer<ffi.Int8> p_name,
);

typedef _c_godot_string_name_get_name = godot_string Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _dart_godot_string_name_get_name = godot_string Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _c_godot_string_name_get_hash = ffi.Uint32 Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _dart_godot_string_name_get_hash = int Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _c_godot_string_name_get_data_unique_pointer = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _dart_godot_string_name_get_data_unique_pointer = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _c_godot_string_name_operator_equal = ffi.Uint8 Function(
  ffi.Pointer<godot_string_name> p_self,
  ffi.Pointer<godot_string_name> p_other,
);

typedef _dart_godot_string_name_operator_equal = int Function(
  ffi.Pointer<godot_string_name> p_self,
  ffi.Pointer<godot_string_name> p_other,
);

typedef _c_godot_string_name_operator_less = ffi.Uint8 Function(
  ffi.Pointer<godot_string_name> p_self,
  ffi.Pointer<godot_string_name> p_other,
);

typedef _dart_godot_string_name_operator_less = int Function(
  ffi.Pointer<godot_string_name> p_self,
  ffi.Pointer<godot_string_name> p_other,
);

typedef _c_godot_string_name_destroy = ffi.Void Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _dart_godot_string_name_destroy = void Function(
  ffi.Pointer<godot_string_name> p_self,
);

typedef _c_godot_object_destroy = ffi.Void Function(
  ffi.Pointer<ffi.Void> p_o,
);

typedef _dart_godot_object_destroy = void Function(
  ffi.Pointer<ffi.Void> p_o,
);

typedef _c_godot_global_get_singleton = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> p_name,
);

typedef _dart_godot_global_get_singleton = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> p_name,
);

typedef _c_godot_method_bind_get_method = ffi.Pointer<godot_method_bind>
    Function(
  ffi.Pointer<ffi.Int8> p_classname,
  ffi.Pointer<ffi.Int8> p_methodname,
);

typedef _dart_godot_method_bind_get_method = ffi.Pointer<godot_method_bind>
    Function(
  ffi.Pointer<ffi.Int8> p_classname,
  ffi.Pointer<ffi.Int8> p_methodname,
);

typedef _c_godot_method_bind_ptrcall = ffi.Void Function(
  ffi.Pointer<godot_method_bind> p_method_bind,
  ffi.Pointer<ffi.Void> p_instance,
  ffi.Pointer<ffi.Pointer<ffi.Void>> p_args,
  ffi.Pointer<ffi.Void> p_ret,
);

typedef _dart_godot_method_bind_ptrcall = void Function(
  ffi.Pointer<godot_method_bind> p_method_bind,
  ffi.Pointer<ffi.Void> p_instance,
  ffi.Pointer<ffi.Pointer<ffi.Void>> p_args,
  ffi.Pointer<ffi.Void> p_ret,
);

typedef _c_godot_method_bind_call = godot_variant Function(
  ffi.Pointer<godot_method_bind> p_method_bind,
  ffi.Pointer<ffi.Void> p_instance,
  ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
  ffi.Int32 p_arg_count,
  ffi.Pointer<godot_variant_call_error> p_call_error,
);

typedef _dart_godot_method_bind_call = godot_variant Function(
  ffi.Pointer<godot_method_bind> p_method_bind,
  ffi.Pointer<ffi.Void> p_instance,
  ffi.Pointer<ffi.Pointer<godot_variant>> p_args,
  int p_arg_count,
  ffi.Pointer<godot_variant_call_error> p_call_error,
);

typedef godot_class_constructor = ffi.Pointer<ffi.Void> Function();

typedef _c_godot_get_class_constructor
    = ffi.Pointer<ffi.NativeFunction<godot_class_constructor>> Function(
  ffi.Pointer<ffi.Int8> p_classname,
);

typedef _dart_godot_get_class_constructor
    = ffi.Pointer<ffi.NativeFunction<godot_class_constructor>> Function(
  ffi.Pointer<ffi.Int8> p_classname,
);

typedef _c_godot_get_global_constants = godot_dictionary Function();

typedef _dart_godot_get_global_constants = godot_dictionary Function();

typedef native_call_cb = godot_variant Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<godot_array>,
);

typedef _c_godot_register_native_call_type = ffi.Void Function(
  ffi.Pointer<ffi.Int8> p_call_type,
  ffi.Pointer<ffi.NativeFunction<native_call_cb>> p_callback,
);

typedef _dart_godot_register_native_call_type = void Function(
  ffi.Pointer<ffi.Int8> p_call_type,
  ffi.Pointer<ffi.NativeFunction<native_call_cb>> p_callback,
);

typedef _c_godot_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 p_bytes,
);

typedef _dart_godot_alloc = ffi.Pointer<ffi.Void> Function(
  int p_bytes,
);

typedef _c_godot_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p_ptr,
  ffi.Int32 p_bytes,
);

typedef _dart_godot_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p_ptr,
  int p_bytes,
);

typedef _c_godot_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> p_ptr,
);

typedef _dart_godot_free = void Function(
  ffi.Pointer<ffi.Void> p_ptr,
);

typedef _c_godot_print_error = ffi.Void Function(
  ffi.Pointer<ffi.Int8> p_description,
  ffi.Pointer<ffi.Int8> p_function,
  ffi.Pointer<ffi.Int8> p_file,
  ffi.Int32 p_line,
);

typedef _dart_godot_print_error = void Function(
  ffi.Pointer<ffi.Int8> p_description,
  ffi.Pointer<ffi.Int8> p_function,
  ffi.Pointer<ffi.Int8> p_file,
  int p_line,
);

typedef _c_godot_print_warning = ffi.Void Function(
  ffi.Pointer<ffi.Int8> p_description,
  ffi.Pointer<ffi.Int8> p_function,
  ffi.Pointer<ffi.Int8> p_file,
  ffi.Int32 p_line,
);

typedef _dart_godot_print_warning = void Function(
  ffi.Pointer<ffi.Int8> p_description,
  ffi.Pointer<ffi.Int8> p_function,
  ffi.Pointer<ffi.Int8> p_file,
  int p_line,
);

typedef _c_godot_print = ffi.Void Function(
  ffi.Pointer<godot_string> p_message,
);

typedef _dart_godot_print = void Function(
  ffi.Pointer<godot_string> p_message,
);

typedef _c_godot_is_instance_valid = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> p_object,
);

typedef _dart_godot_is_instance_valid = int Function(
  ffi.Pointer<ffi.Void> p_object,
);

typedef _c_godot_get_class_tag = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<godot_string_name> p_class,
);

typedef _dart_godot_get_class_tag = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<godot_string_name> p_class,
);

typedef _c_godot_object_cast_to = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p_object,
  ffi.Pointer<ffi.Void> p_class_tag,
);

typedef _dart_godot_object_cast_to = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> p_object,
  ffi.Pointer<ffi.Void> p_class_tag,
);

typedef _c_godot_instance_from_id = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 p_instance_id,
);

typedef _dart_godot_instance_from_id = ffi.Pointer<ffi.Void> Function(
  int p_instance_id,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  godot_gdnative_api_version,
  godot_gdnative_api_version,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);
